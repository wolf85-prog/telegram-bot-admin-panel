{"version":3,"file":"static/js/758.10d11c93.chunk.js","mappings":"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","sources":["pages/DistributionAdd.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { CContainer, CSpinner } from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport { \n  CRow,\n  CCol,\n  CCard,\n  CCardBody,\n  CForm,\n  CFormLabel,\n  CFormInput,\n  CFormTextarea,\n  CButton,\n  CAlert,\n  CFormCheck,\n} from '@coreui/react'\n\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { $host } from './../http/index'\nimport { useNavigate } from 'react-router-dom';\nimport { newDistribution, getDistributions, editDistribution } from './../http/adminAPI';\nimport { newMessage, uploadFile } from './../http/chatAPI';\nimport sendSound from './../chat-app-new/assets/sounds/distribution_sound.mp3';\n\n\nconst DistributionAdd = () => {\n\n  const token = process.env.REACT_APP_TELEGRAM_API_TOKEN\n\tconst host = process.env.REACT_APP_HOST\n  const hostPort = process.env.REACT_APP_API_URL\n  const chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID\n\n  const { users: clients } = useUsersContext();\n  const { addNewMessage, setDistributions } = useUsersContext();\n  const [contacts, setContacts]= useState([]);\n\n  const [selected, setSelected] = useState([]);\n  const [text, setText] = useState('');\n  const [countChar, setCountChar] = useState(0);\n  const [visible, setVisible] = useState(false);\n  const [showEditButtonAdd, setShowEditButtonAdd] = useState(false);\n  const [sendToAdmin, setSendToAdmin] = useState(false);\n  const [textButton, setTextButton] = useState('');\n  const [file, setFile] = useState();\n  const [value, setValue] = useState(\"\");\n  const [image, setImage]= useState(\"\");\n\n  const audio = new Audio(sendSound);\n\n  const navigate = useNavigate();\n\n  const backPage = () => {\n       navigate('/distribution');\n  } \n\n  useEffect(() => {\n    const arrClients = []\n    \n    clients.map((client) => {\n      const newObj = {\n        label: client.name, \n        value: client.chatId,\n      }\n      arrClients.push(newObj)\n    })\n    setContacts(arrClients)      \n  }, [clients]);\n\n  const onChangeText = (e) => {\n    setText(e.target.value)\n    setCountChar(e.target.value.length)\n  }\n\n  useEffect(() => {\n    const getImage = async () => {\n        if (file) {\n          console.log(\"file:\", file)\n          const data = new FormData();\n          data.append(\"name\", file.name);\n          data.append(\"photo\", file);\n          \n          let response = await uploadFile(data);\n          console.log(\"response: \", response.data.path)\n\n          setImage(response.data.path.split('.team')[1]);\n          //сообщение с ссылкой на файл\n          //console.log(host + response.data.path)\n          //setValue(host + response.data.path)\n        }\n    }\n    getImage();\n  }, [file])\n\n  {/* Добавление файла */}\n  const onFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setValue(e.target.value)\n  }\n\n  {/* Показать Добавление текста кнопки */}\n  const clickShowEditButton = (e) => {\n    e.preventDefault();\n    showEditButtonAdd ? setShowEditButtonAdd (false) : setShowEditButtonAdd (true)\n  }\n\n  const onChangeTextButton = (e) => {\n    setTextButton(e.target.value)\n  }\n\n  const onChangeCheck = (e) => {\n    setSendToAdmin(e.target.value)\n  }\n\n  {/* Отправка рассылки */}\n  const onSendText = async() => {\n    //console.log(selected)\n    \n    let arrUsers = []\n    let countSuccess = 0\n\n    audio.play();\n\n    //новая рассылка\n    const message = {\n      name: 'Рассылка', \n      text: text, \n      image: host + image, \n      button: textButton, \n      receivers: JSON.stringify(selected), \n      datestart: Date.now(), \n      delivered: 'true',        \n    }\n    console.log(\"message send button: \", message);\n\n    //сохранение рассылки в базе данных\n    const distrNew = await newDistribution(message)\n    \n    selected.map(async (user, index) => {\n      setTimeout(async()=> { \n        console.log(\"Пользователю ID: \" + user.value + \" сообщение \" + text + \" отправлено! Кнопка \" + textButton + \" отправлена!\")\n\n        //по-умолчанию пока сообщение не отправлено\n        arrUsers.push({\n          label: user.label,\n          value: user.value,\n          status: 500,\n          mess: null,\n        }) \n\n        let client = clients.filter((client) => client.chatId === user.value.toString())[0];\n        \n        //Передаем данные боту\n        const keyboard = JSON.stringify({\n          inline_keyboard: [\n              [\n                  {\"text\": textButton, callback_data:'/report'},\n              ],\n          ]\n        });\n\n        //отправить в телеграмм\n        let sendToTelegram\n        if (text !== '') {\n          console.log(arrUsers, distrNew)\n          const url_send_msg = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${user.value}&parse_mode=html&text=${text.replace(/\\n/g, '%0A')}`\n          console.log(\"url_send_msg: \", url_send_msg)\n          sendToTelegram = await $host.get(url_send_msg);\n          console.log('sendToTelegram: ', sendToTelegram)\n\n          const { status } = sendToTelegram;              \n          if (status === 200) {\n            console.log(\"статус 200 текст\", arrUsers, distrNew.id)\n            //countSuccess = countSuccess + 1 \n            \n            //обновить статус доставки\n            arrUsers[index-1].status = 200  \n            arrUsers[index-1].mess = sendToTelegram.data?.result?.message_id \n            \n            console.log(\"res: \", {receivers: JSON.stringify(arrUsers)}, distrNew.id)\n\n            //обновить бд рассылку\n            await editDistribution({receivers: JSON.stringify(arrUsers)}, distrNew.id)\n          } \n                              \n        }  \n\n        const url_send_photo = `https://api.telegram.org/bot${token}/sendPhoto?chat_id=${user.value}&reply_markup=${keyboard}`\n        console.log(\"url_send_photo: \", url_send_photo)\n        \n        let sendPhotoToTelegram\n        if (file) {\n          const form = new FormData();\n          form.append(\"photo\", file);\n\n          sendPhotoToTelegram = await $host.post(url_send_photo, form);\n          console.log('sendPhotoToTelegram: ', sendPhotoToTelegram)\n\n          const { status } = sendPhotoToTelegram;\n\n          if (status === 200 && text === '') {\n            console.log(\"статус 200 фото\")\n            //countSuccess = countSuccess + 1  \n                    \n            //обновить статус доставки\n            arrUsers[index-1].status = 200\n            arrUsers[index-1].mess = sendPhotoToTelegram.data?.result?.message_id   \n\n            //обновить бд рассылку\n            await editDistribution({receivers: JSON.stringify(arrUsers)}, distrNew.id)\n          }\n        } \n\n        //отправить в админку\n        if (sendToAdmin) {\n          let message = {};\n          if(!file) {\n              message = {\n                  senderId: chatAdminId, \n                  receiverId: user.value,\n                  conversationId: client.conversationId,\n                  type: \"text\",\n                  text: text,\n                  is_bot: true,\n                  messageId: sendToTelegram.data.result.message_id,\n                  buttons: '',\n              }\n          } else {\n              message = {\n                  senderId: chatAdminId, \n                  receiverId: user.value,\n                  conversationId: client.conversationId,\n                  type: \"image\",\n                  text: host + image,\n                  is_bot: true,\n                  messageId: sendPhotoToTelegram.data.result.message_id,\n                  buttons: textButton,\n              }\n          }\n          console.log(\"message send: \", message);\n\n          //сохранение сообщения в базе данных\n          await newMessage(message)\n\n          //сохранить в контексте\n          if(!file) {\n            addNewMessage(user.value, text, 'text', '', client.conversationId, sendToTelegram.data.result.message_id);\n          } else {\n            addNewMessage(user.value, host + image, 'image', textButton, client.conversationId, sendPhotoToTelegram.data.result.message_id);\n          }\n    \n        }  \n\n      }, 3000 * ++index) \n    })\n\n    //обновить список рассылок\n    let response = await getDistributions();\n    console.log(\"distribution new add: \", response.length)\n    setDistributions(response)\n\n    setSelected([])\n    setSendToAdmin(false)\n    setText('')\n    setShowEditButtonAdd(false)\n    setTextButton('')\n    setVisible(true)\n    setValue('')\n\n    navigate('/distribution');\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Новая рассылка</h2>\n\n                    <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            {/* <CCardHeader>Рассылки</CCardHeader> */}\n                            <CCardBody>\n                            <CAlert color=\"success\" dismissible visible={visible} onClose={() => setVisible(false)}>\n                              Сообщение успешно отправлено!\n                            </CAlert>\n                              <CForm>\n                                <div className=\"mb-3\" style={{color: '#f3f3f3'}}>\n                                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Выберите получателей:</CFormLabel>\n                                  <MultiSelect\n                                    options={contacts}\n                                    value={selected}\n                                    onChange={setSelected}\n                                    style={{color: '#1e1919'}}\n                                    overrideStrings={{\n                                      \"allItemsAreSelected\": \"Все поля выбраны\",\n                                      \"clearSearch\": \"Очистить поиск\",\n                                      \"clearSelected\": \"Очистить выбор\",\n                                      \"noOptions\": \"Ничего не найдено\",\n                                      \"search\": \"Поиск\",\n                                      \"selectAll\": \"Выбрать всё\",\n                                      \"selectAllFiltered\": \"Выбрать всё (Найденных)\",\n                                      \"selectSomeItems\": \"Выбрать...\",\n                                      \"create\": \"Создать\",\n                                    }}   \n                                  />\n                                  <p style={{color: '#767676'}}>Получателей: <span>{selected.length}</span></p>\n                                </div>\n\n                                <div className='mb-3' style={{color: '#f3f3f3'}}>\n                                  <CFormCheck \n                                    id=\"flexCheckDefault\" \n                                    label=\"Дублировать в админку\"\n                                    onChange={onChangeCheck}\n                                    defaultChecked={sendToAdmin}\n                                  />\n                                </div>\n\n                                <div className=\"mb-3\">\n                                  {/* <CFormLabel htmlFor=\"exampleFormControlTextarea1\">Текст сообщения</CFormLabel> */}\n                                  <CFormTextarea \n                                    id=\"exampleFormControlTextarea1\" \n                                    rows={3} \n                                    placeholder='Введите текст сообщения'\n                                    onChange={onChangeText}\n                                    value={text}\n                                    // helperText = {`${countChar}/500`}\n                                  >           \n                                  </CFormTextarea>\n                                </div>\n                              \n\n                                {/* Добавление картинки */}\n                                <div className=\"mb-6\" style={{color: '#8f8888'}}>\n                                  <CFormInput \n                                    type=\"file\" \n                                    id=\"formFile\" \n                                    label=\"Добавить картинку\" \n                                    name=\"photo\"\n                                    onChange={(e) => onFileChange(e)}\n                                    value={value}\n                                  />\n                                </div>\n\n                                <div className=\"mb-3\"></div>\n\n                                <div className=\"mb-3 text-center\">\n                                  <p style={{color: '#fff', cursor: 'pointer'}} onClick={clickShowEditButton} > {showEditButtonAdd ? '- Убрать кнопку' : '+ Добавить кнопку'}</p>\n                                </div>\n\n                                {/* Добавление кнопки */}\n                                <CForm className=\"row g-3\" style={{color: '#8f8888', display: showEditButtonAdd ? \"block\" : \"none\" }}>\n                                  <CCol md={6}>\n                                    <CFormInput \n                                      type=\"text\" \n                                      id=\"inputTextButton\" \n                                      label=\"Название кнопки\" \n                                      placeholder=\"Введите текст\"\n                                      onChange={onChangeTextButton}\n                                      value={textButton}\n                                    />\n                                  </CCol>\n                                </CForm>\n                                <br/>\n                                <div className=\"mb-3\" style={{textAlign: 'right'}}>\n                                  <CButton color=\"secondary\" style={{marginRight: '15px'}} onClick={backPage}>Отмена</CButton>\n                                  <CButton color=\"primary\" onClick={onSendText}>Отправить рассылку</CButton>\n                                </div>\n                              </CForm>\n\n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionAdd\n"],"names":["token","process","host","chatAdminId","clients","useUsersContext","users","_useUsersContext2","addNewMessage","setDistributions","_useState","useState","_useState2","_slicedToArray","contacts","setContacts","_useState3","_useState4","selected","setSelected","_useState5","_useState6","text","setText","_useState7","_useState8","setCountChar","_useState9","_useState10","visible","setVisible","_useState11","_useState12","showEditButtonAdd","setShowEditButtonAdd","_useState13","_useState14","sendToAdmin","setSendToAdmin","_useState15","_useState16","textButton","setTextButton","_useState17","_useState18","file","setFile","_useState19","_useState20","value","setValue","_useState21","_useState22","image","setImage","audio","Audio","sendSound","navigate","useNavigate","useEffect","arrClients","map","client","newObj","label","name","chatId","push","getImage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","response","wrap","_context","prev","next","console","log","FormData","append","uploadFile","sent","path","split","stop","apply","arguments","onSendText","_ref2","_callee4","arrUsers","message","distrNew","_context4","play","button","receivers","JSON","stringify","datestart","Date","now","delivered","newDistribution","_ref3","_callee3","user","index","_context3","setTimeout","_callee2","keyboard","sendToTelegram","url_send_msg","_sendToTelegram$data","_sendToTelegram$data$","url_send_photo","sendPhotoToTelegram","form","_sendPhotoToTelegram$","_sendPhotoToTelegram$2","_message","_context2","status","mess","filter","toString","inline_keyboard","callback_data","concat","replace","$host","get","id","result","message_id","editDistribution","post","senderId","receiverId","conversationId","type","is_bot","messageId","buttons","newMessage","_x","_x2","getDistributions","length","_jsxs","className","children","_jsx","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","color","_Fragment","CRow","CCol","xs","CCard","CCardBody","CAlert","dismissible","onClose","CForm","style","CFormLabel","htmlFor","MultiSelect","options","onChange","overrideStrings","CFormCheck","e","target","defaultChecked","CFormTextarea","rows","placeholder","CFormInput","files","onFileChange","cursor","onClick","preventDefault","display","md","textAlign","CButton","marginRight","AppFooter"],"sourceRoot":""}