{"version":3,"file":"static/js/3437.108c7e0f.chunk.js","mappings":"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","sources":["assets/images/close.svg","webpack://client/./src/components/MyModal/MyModal.module.css?67e6","components/MyModal/MyModal.jsx","pages/Distribution.js"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgClose(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.62399 10.0556L2.35384 15.3257L0.0294979 13.0014L5.29965 7.73122L0.00463867 2.4362L2.44084 0L7.73586 5.29501L12.9936 0.0372888L15.3179 2.36163L10.0602 7.61935L15.3676 12.9268L12.9314 15.363L7.62399 10.0556Z\",\n    fill: \"#E8F1F9\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.fd4d4a44373883e617072fe7cf0c201d.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"myModal\":\"MyModal_myModal__TPf3j\",\"showModal\":\"MyModal_showModal__+Dcvr\",\"myModalContent\":\"MyModal_myModalContent__fPXa-\",\"active\":\"MyModal_active__zFeON\"};","import React from 'react';\r\nimport cl from './MyModal.module.css';\r\n\r\nconst MyModal = ({children, visible, setVisible}) => {\r\n\r\n    const rootClasses = [cl.myModal]\r\n\r\n    if (visible) {\r\n        rootClasses.push(cl.active);\r\n    }\r\n\r\n    return (\r\n        <div className={rootClasses.join(' ')} onClick={() => setVisible(false)}>\r\n            <div className={cl.myModalContent} onClick={(e) => e.stopPropagation()}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyModal;","import React, { Suspense, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { delDistribution, getDistributions } from 'src/http/adminAPI';\nimport MyModal from \"../components/MyModal/MyModal\";\nimport Close from \"../assets/images/close.svg\"\n\nconst Distribution = () => {\n  const { users: zakazchiki } = useUsersContext();\n  const [distributions, setDistributions]= useState([]);\n  const [loading, setLoading]= useState(true);\n  const [visibleModal, setVisibleModal] = useState(false);\n  const [userReceivers, setUserReceivers]= useState([]);\n  const [count, setCount] = useState(0)\n  const [count2, setCount2] = useState(0)\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n\t\t\tlet messages = await getDistributions();\n      //console.log(\"distributions: \", messages)\n\n      let strReceivers = ''\n      let countSuccess = 0\n\n      const arrDitributions = []\n      messages.map((distrib, index) => {\n        countSuccess = 0\n        \n        JSON.parse(distrib.receivers).map((receiver)=>{\n          strReceivers = receiver.label + ' '\n          if (receiver.status === 200) {\n            countSuccess = countSuccess + 1\n          }  \n        })\n\n        const d = new Date(distrib.createdAt);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year} ${chas}:${minut}`\n\n        const newDistribution = {\n          id: distrib.id,\n\t\t\t\t\tname: distrib.name,\n          text: distrib.text,\n          image: distrib.image.split('5000/')[1] !=='' ? distrib.image: '',\n          button: distrib.button,\n          receivers: countSuccess, //strReceivers, //JSON.parse(distrib.receivers)[index-1].label,\n          datestart: newDateMessage,\n          status: distrib.delivered ? \"отправлено\" : \"не отправлено\",\n          count: JSON.parse(distrib.receivers).length,\n          users: JSON.parse(distrib.receivers)\n\t\t\t\t}\n        //console.log(index)\n        arrDitributions.push(newDistribution)\n      })\n\n      setDistributions(arrDitributions) \n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[])\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    setDistributions(distributions.filter(p => p.id !== desk.id))\n    //удаление сообщения в базе данных\n    await delDistribution(desk.id)\n  }\n\n  const showReceivers = (users) => {\n    console.log(\"users: \", zakazchiki)\n    console.log(\"users2: \", users)\n\n    setVisibleModal(true)\n    let count = 0\n    let count2 = 0\n    let arrReceiver = []\n\n    users.map((item, index)=> {\n      if (item.status === 200) {\n        count++\n      } else {\n        count2++\n      }\n      const worker = zakazchiki.find((i)=> i.chatId === item.value)\n      //console.log(\"worker: \", worker)\n      const obj = {\n        user: item.value,\n        status: item.status,\n        userfamily: worker?.name,\n        username: '',\n      }\n      arrReceiver.push(obj)\n    })\n    setCount(count)\n    setCount2(count2)\n    setUserReceivers(arrReceiver)\n    //setUsers(arrReceiver)\n    //console.log(JSON.stringify(users))\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Рассылки</h2>\n                      <Link to={'/distribution_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardHeader>Рассылки</CCardHeader>\n                            <CCardBody>\n\n                              <br /> \n\n                            {loading ? \n                                  \n                              <CSpinner/> :\n\n                              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                <CTableHead className='table-dark'>\n                                  <CTableRow>\n                                    <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Кнопка</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Текст</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Получатели</CTableHeaderCell>   \n                                    <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                  </CTableRow>\n                                </CTableHead>\n                                <CTableBody>\n                                  {distributions.map((item, index) => (\n                                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                                      {/* <CTableDataCell>\n                                        <div>{index+1}</div>\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.datestart}</div>\n                                      </CTableDataCell>      \n                                      <CTableDataCell className=\"text-center\">\n                                        {item.image.endsWith('.pdf') ?\n                                        <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                        : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.button}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.text}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\" onClick={()=>showReceivers(item.users)}>\n                                        <div>{item.count} | {item.receivers}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.status}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <CButton color=\"light\" onClick={() => removeDescription(item)}>\n                                          <img src={deleteIcon} alt='' width='10px' />\n                                        </CButton>\n                                      </CTableDataCell>\n                                    </CTableRow>\n                                  ))}\n                                </CTableBody>\n                              </CTable>\n                            }                              \n                            </CCardBody>\n                          </CCard>\n\n                          <MyModal alignment=\"center\" visible={visibleModal} setVisible={setVisibleModal} onClose={() => setVisibleModal(false)}>\n                                          {/* <CModalHeader>\n                                            <CModalTitle>Получатели рассылки</CModalTitle>\n                                          </CModalHeader> */}\n                                          <div style={{paddingTop: '25px'}}>\n                                            <CRow className=\"mb-3\" >\n                                              <CCol sm={9} >\n                                                <h3>Получатели</h3>\n                                              </CCol>\n                                            </CRow>\n                                          </div>\n                                          \n                                          <img onClick={()=>setVisibleModal(false)} src={Close} alt='' style={{position: 'absolute', right: '20px', top: '20px', width: '15px'}}/>\n                                          <CCardBody>\n\n                                          {/* Рассылка: 800 | Доставлен: 600 | Не доставлено: 200  */}\n                                          <p style={{display: 'flex', justifyContent: 'space-between'}}><span>Рассылка: {count+count2}</span> <span>Доставлено: {count}</span> <span> Не доставлено: {count2}</span></p>  \n\n                                            <div className=\"scroll-table\">\n                                              <CTable align=\"middle\" className=\"mb-0\" responsive style={{color: '#ffffff'}}>\n                                                <CTableHead className='table-dark'>\n                                                  <CTableRow>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '45px'}}>№</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\"style={{width: '110px'}}>TelegramID</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '170px'}}>ФИО</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '100px'}}>Статус</CTableHeaderCell>\n                                                  </CTableRow>\n                                                </CTableHead>\n                                              </CTable>\t\n                                              <div className=\"scroll-table-body\" style={{height: '300px', overflowX: 'auto'}}>\n                                                <CTable>\n                                                  <CTableBody style={{height: '300px', overflowX: 'auto'}}>\n                                                  {userReceivers.map((item, index) => (\n                                                    <CTableRow key={index+1}>\n                                                      <CTableHeaderCell style={{width: '45px'}} scope=\"row\">{index < 9 ? '0'+(index+1) : index+1}</CTableHeaderCell>\n                                                      <CTableDataCell style={{width: '110px'}}>{item.user}</CTableDataCell>\n                                                      <CTableDataCell style={{width: '170px'}}>{item.userfamily} {item.username}</CTableDataCell>\n                                                      <CTableDataCell className='text-center' style={{width: '100px', color: item.status === 200 ? '#7070e7' : 'red'}}>{item.status === 200 ? \"Получено\" : \"Не получено\"}</CTableDataCell>\n                                                    </CTableRow> \n                                                  ))\n                                                  }   \n                                                  </CTableBody>\n                                                </CTable>\n                                              </div>\t\n                                            </div>\n\n                                            {/* <p style={{display: 'flex', justifyContent: 'space-between'}}><span>Получено: {count}</span> <span>Не получено: {count2}</span></p>   */}\n                                          </CCardBody> \n                                          \n                          </MyModal> \n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Distribution\n"],"names":["children","visible","setVisible","rootClasses","cl","push","className","join","onClick","e","stopPropagation","zakazchiki","useUsersContext","users","useState","distributions","setDistributions","loading","setLoading","visibleModal","setVisibleModal","userReceivers","setUserReceivers","count","setCount","count2","setCount2","useEffect","fetchData","getDistributions","messages","countSuccess","arrDitributions","map","distrib","index","JSON","parse","receivers","receiver","label","status","d","Date","createdAt","year","getFullYear","month","String","getMonth","padStart","day","getDate","chas","getHours","minut","getMinutes","newDateMessage","newDistribution","id","name","text","image","split","button","datestart","delivered","length","removeDescription","desk","filter","p","delDistribution","lg","Suspense","fallback","color","to","size","xs","align","hover","responsive","item","endsWith","src","height","width","title","href","target","rel","alt","style","objectFit","console","log","arrReceiver","worker","find","i","chatId","value","obj","user","userfamily","username","showReceivers","deleteIcon","alignment","onClose","paddingTop","sm","Close","position","right","top","display","justifyContent","scope","overflowX"],"sourceRoot":""}