{"version":3,"file":"static/js/1753.3288722c.chunk.js","mappings":"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","sources":["pages/DistributionAdd.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { CContainer, CSpinner } from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport { \n  CRow,\n  CCol,\n  CCard,\n  CCardBody,\n  CForm,\n  CFormLabel,\n  CFormInput,\n  CFormTextarea,\n  CButton,\n  CAlert,\n  CFormCheck,\n} from '@coreui/react'\n\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { $host } from './../http/index'\nimport { useNavigate } from 'react-router-dom';\nimport { newDistribution, getDistributions } from './../http/adminAPI';\nimport { newMessage, uploadFile } from './../http/chatAPI';\nimport sendSound from './../chat-app-new/assets/sounds/distribution_sound.mp3';\n\nconst DistributionAdd = () => {\n\n  const token = process.env.REACT_APP_TELEGRAM_API_TOKEN\n\tconst host = process.env.REACT_APP_HOST\n  const hostPort = process.env.REACT_APP_API_URL\n  const chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID\n\n  const { users: clients } = useUsersContext();\n  const { addNewMessage, setDistributions } = useUsersContext();\n  const [contacts, setContacts]= useState([]);\n\n  const [selected, setSelected] = useState([]);\n  const [text, setText] = useState('');\n  const [countChar, setCountChar] = useState(0);\n  const [visible, setVisible] = useState(false);\n  const [showEditButtonAdd, setShowEditButtonAdd] = useState(false);\n  const [sendToAdmin, setSendToAdmin] = useState(false);\n  const [textButton, setTextButton] = useState('');\n  const [file, setFile] = useState();\n  const [value, setValue] = useState(\"\");\n  const [image, setImage]= useState(\"\");\n\n  const audio = new Audio(sendSound);\n\n  const navigate = useNavigate();\n\n  const backPage = () => {\n       navigate('/distribution');\n  } \n\n  useEffect(() => {\n    const arrClients = []\n    \n    clients.map((client) => {\n      const newObj = {\n        label: client.name, \n        value: client.chatId,\n      }\n      arrClients.push(newObj)\n    })\n    setContacts(arrClients)      \n  }, [clients]);\n\n  const onChangeText = (e) => {\n    setText(e.target.value)\n    setCountChar(e.target.value.length)\n  }\n\n  useEffect(() => {\n    const getImage = async () => {\n        if (file) {\n          console.log(\"file:\", file)\n          const data = new FormData();\n          data.append(\"name\", file.name);\n          data.append(\"photo\", file);\n          \n          let response = await uploadFile(data);\n          console.log(\"response: \", response.data.path)\n\n          setImage(response.data.path.split('.team')[1]);\n          //сообщение с ссылкой на файл\n          //console.log(host + response.data.path)\n          //setValue(host + response.data.path)\n        }\n    }\n    getImage();\n  }, [file])\n\n  {/* Добавление файла */}\n  const onFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setValue(e.target.value)\n  }\n\n  {/* Показать Добавление текста кнопки */}\n  const clickShowEditButton = (e) => {\n    e.preventDefault();\n    showEditButtonAdd ? setShowEditButtonAdd (false) : setShowEditButtonAdd (true)\n  }\n\n  const onChangeTextButton = (e) => {\n    setTextButton(e.target.value)\n  }\n\n  const onChangeCheck = (e) => {\n    setSendToAdmin(e.target.value)\n  }\n\n  {/* Отправка рассылки */}\n  const onSendText = async() => {\n    console.log(selected)\n\n    audio.play();\n\n    //новая рассылка\n    const message = {\n      name: 'Рассылка', \n      text: text, \n      image: host + image, \n      button: textButton, \n      receivers: JSON.stringify(selected), \n      datestart: Date.now(), \n      delivered: 'true',        \n    }\n    console.log(\"message send button: \", message);\n\n    //сохранение рассылки в базе данных\n    await newDistribution(message)\n    \n    selected.map(async (user, index) => {\n      console.log(\"Пользователю ID: \" + user.value + \" сообщение \" + text + \" отправлено! Кнопка \" + textButton + \" отправлена!\")\n\n      let client = clients.filter((client) => client.chatId === user.value.toString())[0];\n      \n      //Передаем данные боту\n      const keyboard = JSON.stringify({\n        inline_keyboard: [\n            [\n                {\"text\": textButton, callback_data:'/report'},\n            ],\n        ]\n      });\n\n      //отправить в телеграмм\n      let sendToTelegram\n      if (text !== '') {\n        const url_send_msg = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${user.value}&parse_mode=html&text=${text.replace(/\\n/g, '%0A')}`\n        console.log(\"url_send_msg: \", url_send_msg)\n        sendToTelegram = await $host.get(url_send_msg);\n        console.log('sendToTelegram: ', sendToTelegram)\n      }  \n\n      const url_send_photo = `https://api.telegram.org/bot${token}/sendPhoto?chat_id=${user.value}&reply_markup=${keyboard}`\n      console.log(\"url_send_photo: \", url_send_photo)\n      \n      let sendPhotoToTelegram\n      if (file) {\n        const form = new FormData();\n        form.append(\"photo\", file);\n\n        sendPhotoToTelegram = await $host.post(url_send_photo, form);\n        console.log('sendPhotoToTelegram: ', sendPhotoToTelegram)\n      } \n\n      //отправить в админку\n      if (sendToAdmin) {\n        let message = {};\n        if(!file) {\n            message = {\n                senderId: chatAdminId, \n                receiverId: user.value,\n                conversationId: client.conversationId,\n                type: \"text\",\n                text: text,\n                is_bot: true,\n\t\t\t\t        messageId: sendToTelegram.data.result.message_id,\n                buttons: '',\n            }\n        } else {\n            message = {\n                senderId: chatAdminId, \n                receiverId: user.value,\n                conversationId: client.conversationId,\n                type: \"image\",\n                text: host + image,\n                is_bot: true,\n\t\t\t\t        messageId: sendPhotoToTelegram.data.result.message_id,\n                buttons: textButton,\n            }\n        }\n        console.log(\"message send: \", message);\n\n        //сохранение сообщения в базе данных\n\t\t    await newMessage(message)\n\n\t\t    //сохранить в контексте\n        if(!file) {\n          addNewMessage(user.value, text, 'text', '', client.conversationId, sendToTelegram.data.result.message_id);\n        } else {\n          addNewMessage(user.value, host + image, 'image', textButton, client.conversationId, sendPhotoToTelegram.data.result.message_id);\n        }\n  \n      }  \n\n      //обновить список рассылок\n      let response = await getDistributions();\n      console.log(\"distribution new add: \", response.length)\n\t\t\tsetDistributions(response)\n\n    })\n\n    setSelected([])\n    setSendToAdmin(false)\n    setText('')\n    setShowEditButtonAdd(false)\n    setTextButton('')\n    setVisible(true)\n    setValue('')\n\n    navigate('/distribution');\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Новая рассылка</h2>\n\n                    <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            {/* <CCardHeader>Рассылки</CCardHeader> */}\n                            <CCardBody>\n                            <CAlert color=\"success\" dismissible visible={visible} onClose={() => setVisible(false)}>\n                              Сообщение успешно отправлено!\n                            </CAlert>\n                              <CForm>\n                                <div className=\"mb-3\" style={{color: '#f3f3f3'}}>\n                                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Выберите получателей:</CFormLabel>\n                                  <MultiSelect\n                                    options={contacts}\n                                    value={selected}\n                                    onChange={setSelected}\n                                    style={{color: '#1e1919'}}\n                                    overrideStrings={{\n                                      \"allItemsAreSelected\": \"Все поля выбраны\",\n                                      \"clearSearch\": \"Очистить поиск\",\n                                      \"clearSelected\": \"Очистить выбор\",\n                                      \"noOptions\": \"Ничего не найдено\",\n                                      \"search\": \"Поиск\",\n                                      \"selectAll\": \"Выбрать всё\",\n                                      \"selectAllFiltered\": \"Выбрать всё (Найденных)\",\n                                      \"selectSomeItems\": \"Выбрать...\",\n                                      \"create\": \"Создать\",\n                                    }}   \n                                  />\n                                  <p style={{color: '#767676'}}>Получателей: <span>{selected.length}</span></p>\n                                </div>\n\n                                <div className='mb-3' style={{color: '#f3f3f3'}}>\n                                  <CFormCheck \n                                    id=\"flexCheckDefault\" \n                                    label=\"Дублировать в админку\"\n                                    onChange={onChangeCheck}\n                                    defaultChecked={sendToAdmin}\n                                  />\n                                </div>\n\n                                <div className=\"mb-3\">\n                                  {/* <CFormLabel htmlFor=\"exampleFormControlTextarea1\">Текст сообщения</CFormLabel> */}\n                                  <CFormTextarea \n                                    id=\"exampleFormControlTextarea1\" \n                                    rows={3} \n                                    placeholder='Введите текст сообщения'\n                                    onChange={onChangeText}\n                                    value={text}\n                                    // helperText = {`${countChar}/500`}\n                                  >           \n                                  </CFormTextarea>\n                                </div>\n                              \n\n                                {/* Добавление картинки */}\n                                <div className=\"mb-6\" style={{color: '#8f8888'}}>\n                                  <CFormInput \n                                    type=\"file\" \n                                    id=\"formFile\" \n                                    label=\"Добавить картинку\" \n                                    name=\"photo\"\n                                    onChange={(e) => onFileChange(e)}\n                                    value={value}\n                                  />\n                                </div>\n\n                                <div className=\"mb-3\"></div>\n\n                                <div className=\"mb-3 text-center\">\n                                  <p style={{color: '#fff', cursor: 'pointer'}} onClick={clickShowEditButton} > {showEditButtonAdd ? '- Убрать кнопку' : '+ Добавить кнопку'}</p>\n                                </div>\n\n                                {/* Добавление кнопки */}\n                                <CForm className=\"row g-3\" style={{color: '#8f8888', display: showEditButtonAdd ? \"block\" : \"none\" }}>\n                                  <CCol md={6}>\n                                    <CFormInput \n                                      type=\"text\" \n                                      id=\"inputTextButton\" \n                                      label=\"Название кнопки\" \n                                      placeholder=\"Введите текст\"\n                                      onChange={onChangeTextButton}\n                                      value={textButton}\n                                    />\n                                  </CCol>\n                                </CForm>\n                                <br/>\n                                <div className=\"mb-3\" style={{textAlign: 'right'}}>\n                                  <CButton color=\"secondary\" style={{marginRight: '15px'}} onClick={backPage}>Отмена</CButton>\n                                  <CButton color=\"primary\" onClick={onSendText}>Отправить рассылку</CButton>\n                                </div>\n                              </CForm>\n\n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionAdd\n"],"names":["token","process","host","chatAdminId","clients","useUsersContext","users","addNewMessage","setDistributions","useState","contacts","setContacts","selected","setSelected","text","setText","setCountChar","visible","setVisible","showEditButtonAdd","setShowEditButtonAdd","sendToAdmin","setSendToAdmin","textButton","setTextButton","file","setFile","value","setValue","image","setImage","audio","Audio","sendSound","navigate","useNavigate","useEffect","arrClients","map","client","newObj","label","name","chatId","push","getImage","console","log","data","FormData","append","uploadFile","response","path","split","onSendText","play","message","button","receivers","JSON","stringify","datestart","Date","now","delivered","newDistribution","user","index","filter","toString","keyboard","inline_keyboard","callback_data","url_send_msg","replace","$host","sendToTelegram","url_send_photo","form","sendPhotoToTelegram","senderId","receiverId","conversationId","type","is_bot","messageId","result","message_id","buttons","newMessage","getDistributions","length","className","lg","Suspense","fallback","color","xs","dismissible","onClose","style","htmlFor","options","onChange","overrideStrings","id","e","target","defaultChecked","rows","placeholder","files","onFileChange","cursor","onClick","preventDefault","display","md","textAlign","marginRight"],"sourceRoot":""}