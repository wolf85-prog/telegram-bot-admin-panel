{"version":3,"file":"static/js/190.be64a237.chunk.js","mappings":"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","sources":["assets/images/arrowDown.svg","webpack://client/./src/components/MyModal/MyModal.module.css?67e6","components/MyModal/MyModal.jsx","pages/DistributionW.js"],"sourcesContent":["var _metadata, _g;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgArrowDown(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 256 256\",\n    enableBackground: \"new 0 0 256 256\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _metadata || (_metadata = /*#__PURE__*/React.createElement(\"metadata\", null, \" Svg Vector Icons : http://www.onlinewebfonts.com/icon \")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000000\",\n    d: \"M128,10C62.9,10,10,62.9,10,128c0,65.1,52.9,118,118,118c65.1,0,118-52.9,118-118C246,62.9,193.1,10,128,10z M173.8,148.4l-37,31.4c-2.5,2.1-5.6,3.2-8.7,3.2s-6.2-1.1-8.7-3.2l-37-31.4c-5.7-4.8-6.4-13.3-1.5-19c4.8-5.7,13.3-6.4,19-1.5l14.9,12.6V86.4c0-7.4,6-13.5,13.5-13.5s13.5,6,13.5,13.5v54.2l14.9-12.6c5.7-4.8,14.2-4.1,19,1.5C180.1,135.1,179.4,143.6,173.8,148.4z\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowDown);\nexport default __webpack_public_path__ + \"static/media/arrowDown.4f7021c2d42a26d0369da8983c53315a.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"myModal\":\"MyModal_myModal__4gy1Y\",\"showModal\":\"MyModal_showModal__gLtSL\",\"myModalContent\":\"MyModal_myModalContent__ncmE+\",\"active\":\"MyModal_active__EyCLh\"};","import React from 'react';\nimport cl from './MyModal.module.css';\n\nconst MyModal = ({children, visible, setVisible}) => {\n\n    const rootClasses = [cl.myModal]\n\n    if (visible) {\n        rootClasses.push(cl.active);\n    }\n\n    return (\n        <div className={rootClasses.join(' ')} onClick={() => setVisible(false)}>\n            <div className={cl.myModalContent} onClick={(e) => e.stopPropagation()}>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default MyModal;","import React, { Suspense, useState, useEffect, useRef } from 'react'\nimport { useSocketContext } from \"./../chat-app-new/context/socketContext\";\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CToast,\n  CToastBody,\n  CToaster,\n  CToastClose,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CFormInput,\n  CCollapse,\n  CTooltip,\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport editIcon from 'src/assets/images/pencil.png'\nimport copyIcon from 'src/assets/images/copy.png'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\nimport { delDistributionW, getDistributionsCountW, getPlan, newPlan, getDistributionsWPlan, getDistributionsW} from 'src/http/adminAPI';\n\nimport MyModal from \"../components/MyModal/MyModal\";\nimport Close from \"../assets/images/close.svg\"\nimport arrowDown from '../assets/images/arrowDown.svg'\n\nconst DistributionW = () => {\n  const socket = useSocketContext();\n  const { workersAll, distributionsWork, setDistributionsWork } = useUsersContext();\n  //const [distributionsWork, setDistributionsWork]= useState([]);\n  const [userReceivers, setUserReceivers]= useState([]);\n  const [users, setUsers]= useState([]);\n  const [loading, setLoading]= useState(true);\n  const [proj, setProj] = useState('');\n  const [seconds, setSeconds] = useState(1);\n\n  const [visibleModal, setVisibleModal] = useState(false);\n\n  const [text, setText]= useState(\"\");\n\n  const [count, setCount] = useState(0)\n  const [count2, setCount2] = useState(0)\n\n  const [countDistrib, setCountDistrib] = useState(20)\n\n  const [showTable, setShowTable] = useState([])\n\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n\n  const exampleToast = (\n    <CToast autohide={true} visible={true} color=\"success\" className=\"text-white align-items-center\">\n      <div className=\"d-flex\">\n        <CToastBody>Рассылка успешно удалена!</CToastBody>\n        <CToastClose className=\"me-2 m-auto\" white />\n      </div>\n    </CToast>\n  )\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n      let response = await getDistributionsCountW(20, distributionsWork.length);\n      let response2 = await getDistributionsWPlan();\n      //console.log(\"response2: \", response2)\n\n      //сортировка\n      const messageSort = [...response].sort((a, b) => {       \n        var dateA = new Date(a.datestart), dateB = new Date(b.datestart) \n        return dateB-dateA  //сортировка по убывающей дате  \n      })\n\n      const messageSort2 = [...response2].sort((a, b) => {       \n        var dateA = new Date(a.datestart), dateB = new Date(b.datestart) \n        return dateA-dateB  //сортировка по возрастающей дате  \n      })\n      //console.log(\"messageSort2: \", messageSort2)\n      //console.log(\"messageSort: \", messageSort)\n\n      let all = [...messageSort2, ...messageSort]\n      //console.log(\"all: \", all)\n      const arrDitributions = []\n      all.map((distrib, index) => {\n          const d = new Date(distrib.datestart);\n          const year = d.getFullYear();\n          const month = String(d.getMonth()+1).padStart(2, \"0\");\n          const day = String(d.getDate()).padStart(2, \"0\");\n          const chas = d.getHours();\n          const minut = String(d.getMinutes()).padStart(2, \"0\");\n          const newDateMessage = `${day}.${month}.${year}`\n          const newTimeMessage = `${chas}:${minut}`\n\n          let space = /,/gi;\n\n          let deliv = distrib.delivered\n          //console.log(\"deliv: \", distrib.delivered)\n\n          const newDistribution = {\n            id: distrib.id,\n            text: distrib.text,\n            image: distrib.image !=='' ? distrib.image : '',\n            project: distrib.project,\n            projectId: distrib.projectId ? distrib.projectId : '',\n            receivers: distrib.receivers.replace(space, '<br/>'), //strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n            categories: distrib.receivers,\n            count: distrib.count,\n            date: newDateMessage,\n            timestart: newTimeMessage,\n            datestart: distrib.datestart,\n            status: deliv ? \"отправлено\" : \"запланировано\",\n            uuid: distrib.uuid,\n            success: distrib.success,\n            report: distrib.report,\n            delivered: deliv,\n            users: distrib.users,\n            button: distrib.button,\n            stavka: distrib.stavka,\n            editButton: distrib.editButton,\n            target: distrib.target,\n          }\n          arrDitributions.push(newDistribution)\n      })\n\n      //console.log(\"arrDitributions: \", arrDitributions)\n      setDistributionsWork(arrDitributions)\n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[])\n\n\n  //получить рассылку\n\tconst fetchDistribution = async () => {\n\t\tconsole.log(\"Обновление списка рассылок...\")\n\t\tlet response = await getDistributionsCountW(20, distributionsWork.length);\n\t\tlet response2 = await getDistributionsWPlan();\n\n\t\t//сортировка\n\t\tconst messageSort = [...response].sort((a, b) => {       \n\t\t\tvar dateA = new Date(a.datestart), dateB = new Date(b.datestart) \n\t\t\treturn dateB-dateA  //сортировка по убывающей дате  \n\t\t})\n\n\t\tconst messageSort2 = [...response2].sort((a, b) => {       \n\t\t\tvar dateA = new Date(a.datestart), dateB = new Date(b.datestart) \n\t\t\treturn dateA-dateB  //сортировка по убывающей дате  \n\t\t})\n\n\t\tlet all = [...messageSort2, ...messageSort]\n\n    const arrDitributions = []\n    all.map((distrib, index) => {\n        const d = new Date(distrib.datestart);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year}`\n        const newTimeMessage = `${chas}:${minut}`\n\n        let space = /,/gi;\n\n        let deliv = distrib.delivered\n        //console.log(\"deliv: \", distrib.delivered)\n\n        const newDistribution = {\n          id: distrib.id,\n          text: distrib.text,\n          image: distrib.image !=='' ? distrib.image : '',\n          project: distrib.project,\n          projectId: distrib.projectId ? distrib.projectId : '',\n          receivers: distrib.receivers.replace(space, '<br/>'), //strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n          categories: distrib.receivers,\n          count: distrib.count,\n          date: newDateMessage,\n          timestart: newTimeMessage,\n          datestart: distrib.datestart,\n          status: deliv ? \"отправлено\" : \"запланировано\",\n          uuid: distrib.uuid,\n          success: distrib.success,\n          report: distrib.report,\n          delivered: deliv,\n          users: distrib.users,\n          button: distrib.button,\n          stavka: distrib.stavka,\n          editButton: distrib.editButton,\n          target: distrib.target,\n\t\t\t\t}\n        arrDitributions.push(newDistribution)\n    })\n\n\t\tsetDistributionsWork(arrDitributions)\n\t}\n\n  useEffect(() => {\n\t\tsocket.on(\"getDistrib\", fetchDistribution);\t\n\t}, [socket]);\n\n\n  //обновление списка рассылок\n  useEffect(() => {\n    const timer = setInterval(() => {\n      socket.emit(\"sendDistrib\", { \n        task: true,\n      })\n    }, 5000);\n    \n    // очистка интервала\n    return () => clearInterval(timer);\n  });\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    addToast(exampleToast) //ваша рассылка удалена\n    \n    setDistributionsWork(distributionsWork.filter(p => p.id !== desk.id))\n    \n    //удаление сообщения в базе данных\n    await delDistributionW(desk.id)  \n\n    //удаление проекта из планировщика\n    //обновить план в БД\n    let plan = await getPlan(desk.date);\n    const newArray = JSON.parse(plan.times)\n\n    let dateIndex = newArray.findIndex((i) => i.time === desk.timestart)\n    const datesCopy = JSON.parse(JSON.stringify(newArray));\n    const dateObject = datesCopy[dateIndex];\n    datesCopy[dateIndex] = { ...dateObject, ['proj']: '', ['save']: false};\n    let planer_str = JSON.stringify(datesCopy)\n\n    const newObj = {\n      \"datestart\": desk.date,\n      \"times\": planer_str\n    }\n\n    await newPlan(newObj)\n  }\n\n  const showReceivers = (users) => {\n    //console.log(workersAll)\n\n    setVisibleModal(true)\n    let count = 0\n    let count2 = 0\n    let arrReceiver = []\n    JSON.parse(users).map((item, index)=> {\n      if (item.status === 200) {\n        count++\n      } else {\n        count2++\n      }\n      const worker = workersAll.find((i)=> i.chatId === item.user)\n      const obj = {\n        user: item.user,\n        status: item.status,\n        userfamily: worker.userfamily,\n        username: worker.username,\n        categories: worker.worklist,\n      }\n      arrReceiver.push(obj)\n    })\n    setCount(count)\n    setCount2(count2)\n    setUserReceivers(arrReceiver)\n    setUsers(arrReceiver)\n    //console.log(JSON.stringify(users))\n  }\n\n\n  //поиск\n  useEffect(() => {\n    console.log(\"users: \", users)\n    if (users.length > 0) {\n      const filteredData = users.filter(user=> (user.userfamily+user.username+user.user)?.toLowerCase().includes(text.toLowerCase()));\n      setUserReceivers(filteredData);\n    }\n\t\t      \n  }, [text, users]);\n\n\n  const handleClick = (ind) => {\n    console.log(ind, showTable[ind])\n\n    setShowTable(prevShownTable => ({\n        ...prevShownTable,\n        [ind]: !prevShownTable[ind]\n      }));\n  }\n\n  const clickNext = async() => {\n\n    //1 все рассылки\n\t\t//let response = await getDistributionsCountW(100, distributionsWork.length);\n    //console.log(\"distrib size: \", response.length)\n\n    setCountDistrib(100)\n\n    //fetchDistribution(100)\n\n    //const arrayDistrib = []\n\t\t\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    {/* <h2>Рассылки</h2> */}\n                      <Link to={'/distributionw_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <CToaster ref={toaster} push={toast} placement=\"top-end\" /> \n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardBody>\n\n                              {loading ? \n                                    \n                                <CSpinner/> :\n\n                                <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                  <CTableHead className='table-light'>\n                                    <CTableRow>\n                                      <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\">Время</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\">Название проекта</CTableHeaderCell>\n                                      {/* <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell> */}\n                                      <CTableHeaderCell className=\"text-center\">Категория</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\">Получатели</CTableHeaderCell>    \n                                      <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                    </CTableRow>\n                                  </CTableHead>\n                                  <CTableBody>\n                                    {distributionsWork.map((item, index) => (\n                                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                                        {/* <CTableDataCell>\n                                          <div>{index+1}</div>\n                                        </CTableDataCell> */}\n                                        <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                          <div>{item.date}</div>\n                                        </CTableDataCell>  \n                                        <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                          <div>{item.timestart}</div>\n                                        </CTableDataCell>  \n                                        <CTableDataCell className=\"text-center\">\n                                          <CTooltip\n                                            content={item.projectId}\n                                            placement=\"top\"\n                                          >\n                                            <div>{item.project}</div>\n                                          </CTooltip>\n                                        </CTableDataCell>    \n                                        {/* <CTableDataCell className=\"text-center\">\n                                          {item.image.endsWith('.pdf') ?\n                                          <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                          : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                          }\n                                        </CTableDataCell> */}\n                                        <CTableDataCell className=\"text-center\">\n                                          <div dangerouslySetInnerHTML={{__html: item.receivers}} />\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" onClick={()=>showReceivers(item.report)} style={{cursor: 'pointer'}}>\n                                          {\n                                            item.status === 'запланировано' ? \n                                            <div style={{color: '#3887cd'}}>{item.count}</div>\n                                            :<div>{item.count} | {item.success ? item.success : \"0\"}</div>\n                                          }\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          {\n                                            item.status === 'запланировано' ? \n                                            <div style={{color: '#3887cd'}}>{item.status}</div>\n                                            :<div>{item.status}</div>\n                                          }\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          {/* <Link to={'/distributionw_planer'} state={{ project: proj}}>\n                                            <CButton color=\"light\" style={{marginRight: '10px'}}>\n                                              <img src={editIcon} alt='' width='10px' />\n                                            </CButton>\n                                          </Link> */}\n\n                                          {item.projectId ?   \n                                            <Link to={'/distributionw_edit'} state={{editD: true, delivered: item.delivered, project: item.projectId, id: item.id, category: item.categories, users: item.users, text: item.text, img: item.image, date: item.datestart, uuid: item.uuid, button: item.button, editButton: item.editButton, stavka: item.stavka, target: item.target}}><CButton color=\"light\" style={{marginRight: '10px', borderColor: 'transparent', background: '#2b3338',}}><img src={item.delivered ? copyIcon : editIcon} alt='' width='10px' /></CButton></Link>\n                                            :<Link to={''} state={{ project: `${proj}`, }}><CButton color=\"light\" style={{borderColor: 'transparent', background: '#2b3338', marginRight: '10px'}}><img src={item.delivered ? copyIcon : editIcon} alt='' width='10px' /></CButton></Link>\n                                          }\n                                          \n                                          <CButton color=\"light\" style={{borderColor: 'transparent', background: '#2b3338'}} onClick={() => removeDescription(item)}>\n                                            <img src={deleteIcon} alt='' width='10px' />\n                                          </CButton>\n\n                                        </CTableDataCell>\n                                      </CTableRow>\n                                    ))}\n                                  </CTableBody>\n                                </CTable>\n                              } \n\n                              <div style={{display: 'flex', justifyContent: 'center' }}>\n                                <img src={arrowDown} alt='' onClick={()=>clickNext()} style={{width: '50px', marginTop: '15px', cursor: 'pointer'}}></img>\n                              </div>                             \n                            </CCardBody>\n                          </CCard>\n\n                          <MyModal alignment=\"center\" visible={visibleModal} setVisible={setVisibleModal} onClose={() => setVisibleModal(false)}>\n                                          {/* <CModalHeader>\n                                            <CModalTitle>Получатели рассылки</CModalTitle>\n                                          </CModalHeader> */}\n                                          <div style={{paddingTop: '25px'}}>\n                                            <CRow className=\"mb-3\" >\n                                              <CCol sm={9} >\n                                                <h3>Получатели</h3>\n                                              </CCol>\n                                              <CCol sm={3} >\n                                                <CFormInput placeholder=\"Поиск...\" onChange={(e)=>setText(e.target.value)} aria-label=\"spec\"/>\n                                              </CCol>\n                                            </CRow>\n                                          </div>\n                                          \n                                          <img onClick={()=>setVisibleModal(false)} src={Close} alt='' style={{position: 'absolute', right: '20px', top: '20px', width: '15px'}}/>\n                                          <CCardBody>\n\n                                          {/* Рассылка: 800 | Доставлен: 600 | Не доставлено: 200  */}\n                                          <p style={{display: 'flex', justifyContent: 'space-between'}}><span>Рассылка: {count+count2}</span> <span>Доставлено: {count}</span> <span> Не доставлено: {count2}</span></p>  \n\n                                            <div className=\"scroll-table\">\n                                              <CTable align=\"middle\" className=\"mb-0\" responsive style={{color: '#ffffff'}}>\n                                                <CTableHead className='table-dark'>\n                                                  <CTableRow>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '45px'}}>№</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\"style={{width: '110px'}}>TelegramID</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '170px'}}>ФИО</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '180px'}}>Специальность</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '100px'}}>Статус</CTableHeaderCell>\n                                                  </CTableRow>\n                                                </CTableHead>\n                                              </CTable>\t\n                                              <div className=\"scroll-table-body\" style={{height: '300px', overflowX: 'auto'}}>\n                                                <CTable>\n                                                  <CTableBody style={{height: '300px', overflowX: 'auto'}}>\n                                                  {userReceivers.map((item, index) => (\n                                                    <CTableRow key={index+1}>\n                                                      <CTableHeaderCell style={{width: '45px'}} scope=\"row\">{index < 9 ? '0'+(index+1) : index+1}</CTableHeaderCell>\n                                                      <CTableDataCell style={{width: '110px'}}>{item.user}</CTableDataCell>\n                                                      <CTableDataCell style={{width: '170px'}}>{item.userfamily} {item.username}</CTableDataCell>\n                                                      <CTableDataCell style={{fontSize: '11px', width: '180px'}}>\n                                                        {/* {JSON.parse(item.categories).map(it=>\"- \"+it.spec).join('\\n')} */}\n                                                        \n                                                        <div onClick={()=>handleClick(index)} style={{cursor: 'pointer', paddingLeft: '35px'}}>{!showTable[index] ? 'Посмотреть' : <br/>}</div>\n                                                        <CCollapse visible={showTable[index]}>\n                                                          <table>\n                                                            <tbody>\n                                                              {item.categories !== '' ? (JSON.parse(item.categories)).map((spec, index)=>( \n                                                                  <tr key={index}>\n                                                                    <td>{spec.spec !== '' ? \"- \" + spec.spec : ''}</td>\n                                                                  </tr>          \n                                                              )) : \"\"}\n                                                            </tbody> \n                                                          </table>\n                                                        </CCollapse>\n                                                      </CTableDataCell>\n                                                      <CTableDataCell className='text-center' style={{width: '100px', color: item.status === 200 ? '#7070e7' : 'red'}}>{item.status === 200 ? \"Получено\" : \"Не получено\"}</CTableDataCell>\n                                                    </CTableRow> \n                                                  ))\n                                                  }   \n                                                  </CTableBody>\n                                                </CTable>\n                                              </div>\t\n                                            </div>\n\n                                            {/* <p style={{display: 'flex', justifyContent: 'space-between'}}><span>Получено: {count}</span> <span>Не получено: {count2}</span></p>   */}\n                                          </CCardBody> \n                                          \n                          </MyModal>              \n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionW\n"],"names":["_ref","children","visible","setVisible","rootClasses","cl","push","_jsx","className","join","onClick","e","stopPropagation","DistributionW","socket","useSocketContext","workersAll","distributionsWork","setDistributionsWork","useUsersContext","userReceivers","setUserReceivers","useState","users","setUsers","loading","setLoading","proj","setProj","seconds","setSeconds","visibleModal","setVisibleModal","text","setText","count","setCount","count2","setCount2","countDistrib","setCountDistrib","showTable","setShowTable","toast","addToast","toaster","useRef","exampleToast","CToast","autohide","color","_jsxs","CToastBody","CToastClose","white","useEffect","async","response","getDistributionsCountW","length","response2","getDistributionsWPlan","messageSort","sort","a","b","dateA","Date","datestart","all","arrDitributions","map","distrib","index","d","year","getFullYear","month","String","getMonth","padStart","newDateMessage","getDate","newTimeMessage","getHours","getMinutes","deliv","delivered","newDistribution","id","image","project","projectId","receivers","replace","categories","date","timestart","status","uuid","success","report","button","stavka","editButton","target","fetchData","fetchDistribution","console","log","on","timer","setInterval","emit","task","clearInterval","filteredData","filter","user","userfamily","username","toLowerCase","includes","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","_Fragment","Link","to","CButton","size","CToaster","ref","placement","CRow","CCol","xs","CCard","CCardBody","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","item","CTableDataCell","style","width","CTooltip","content","dangerouslySetInnerHTML","__html","arrReceiver","JSON","parse","worker","find","i","chatId","obj","worklist","showReceivers","cursor","state","editD","category","img","marginRight","borderColor","background","src","copyIcon","editIcon","alt","p","desk","delDistributionW","plan","getPlan","newArray","times","dateIndex","findIndex","time","datesCopy","stringify","dateObject","planer_str","newObj","newPlan","removeDescription","deleteIcon","display","justifyContent","arrowDown","clickNext","marginTop","MyModal","alignment","onClose","paddingTop","sm","CFormInput","placeholder","onChange","value","Close","position","right","top","scope","height","overflowX","fontSize","handleClick","ind","prevShownTable","paddingLeft","CCollapse","spec","AppFooter"],"sourceRoot":""}