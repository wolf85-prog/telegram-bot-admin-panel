{"version":3,"file":"static/js/863.41dd4071.chunk.js","mappings":"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","sources":["pages/Distribution.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { delDistribution } from 'src/http/adminAPI';\n\nconst Distribution = () => {\n  const { distributions: messages } = useUsersContext();\n  const [distributions, setDistributions]= useState([]);\n  const [loading, setLoading]= useState(true);\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n\t\t\t//let response = await getDistributions();\n      console.log(\"distributions: \", messages)\n\n      let strReceivers = ''\n\n      const arrDitributions = []\n      messages.map((distrib, index) => {\n        JSON.parse(distrib.receivers).map((receiver)=>{\n          strReceivers = receiver.label + ' '\n        })\n\n        const d = new Date(distrib.createdAt);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year} ${chas}:${minut}`\n\n        const newDistribution = {\n          id: distrib.id,\n\t\t\t\t\tname: distrib.name,\n          text: distrib.text,\n          image: distrib.image.split('5000/')[1] !=='' ? distrib.image: '',\n          button: distrib.button,\n          receivers: strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n          datestart: newDateMessage,\n          status: distrib.delivered ? \"отправлено\" : \"не отправлено\",\n\t\t\t\t}\n        //console.log(index)\n        arrDitributions.push(newDistribution)\n      })\n\n      setDistributions(arrDitributions) \n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[messages])\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    setDistributions(distributions.filter(p => p.id !== desk.id))\n    //удаление сообщения в базе данных\n    await delDistribution(desk.id)\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Рассылки</h2>\n                      <Link to={'/distribution_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardHeader>Рассылки</CCardHeader>\n                            <CCardBody>\n\n                              <br /> \n\n                            {loading ? \n                                  \n                              <CSpinner/> :\n\n                              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                <CTableHead className='table-dark'>\n                                  <CTableRow>\n                                    <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Кнопка</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Текст</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Получатели</CTableHeaderCell>   \n                                    <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                  </CTableRow>\n                                </CTableHead>\n                                <CTableBody>\n                                  {distributions.map((item, index) => (\n                                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                                      {/* <CTableDataCell>\n                                        <div>{index+1}</div>\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.datestart}</div>\n                                      </CTableDataCell>      \n                                      <CTableDataCell className=\"text-center\">\n                                        {item.image.endsWith('.pdf') ?\n                                        <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                        : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.button}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.text}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.receivers}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.status}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <CButton color=\"light\" onClick={() => removeDescription(item)}>\n                                          <img src={deleteIcon} alt='' width='10px' />\n                                        </CButton>\n                                      </CTableDataCell>\n                                    </CTableRow>\n                                  ))}\n                                </CTableBody>\n                              </CTable>\n                            }                              \n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Distribution\n"],"names":["messages","useUsersContext","distributions","_useState","useState","_useState2","_slicedToArray","setDistributions","_useState3","_useState4","loading","setLoading","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","strReceivers","arrDitributions","wrap","_context","prev","next","console","log","map","distrib","index","JSON","parse","receivers","receiver","label","d","Date","createdAt","year","getFullYear","month","String","getMonth","padStart","day","getDate","chas","getHours","minut","getMinutes","newDateMessage","concat","newDistribution","id","name","text","image","split","button","datestart","status","delivered","push","stop","apply","arguments","removeDescription","_ref2","_callee2","desk","_context2","filter","p","delDistribution","_x","_jsxs","className","children","_jsx","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","color","_Fragment","Link","to","CButton","size","CRow","CCol","xs","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","item","CTableDataCell","endsWith","src","height","width","title","href","target","rel","alt","style","objectFit","onClick","deleteIcon","AppFooter"],"sourceRoot":""}