{"version":3,"file":"static/js/5582.e55375ac.chunk.js","mappings":"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","sources":["pages/DistributionW.js"],"sourcesContent":["import React, { Suspense, useState, useEffect, useRef } from 'react'\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CToast,\n  CToastBody,\n  CToaster,\n  CToastClose\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport editIcon from 'src/assets/images/pencil.png'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\nimport { delDistributionW, getPlan, newPlan } from 'src/http/adminAPI';\n\nconst DistributionW = () => {\n  const { distributionsWork: messages, addNewDistrib } = useUsersContext();\n  const [distributionsWork, setDistributionsWork]= useState([]);\n  const [loading, setLoading]= useState(true);\n  const [proj, setProj] = useState('');\n  const [seconds, setSeconds] = useState(1);\n\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n\n  const exampleToast = (\n    <CToast autohide={true} visible={true} color=\"success\" className=\"text-white align-items-center\">\n      <div className=\"d-flex\">\n        <CToastBody>Рассылка успешно удалена!</CToastBody>\n        <CToastClose className=\"me-2 m-auto\" white />\n      </div>\n    </CToast>\n  )\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n\n      const arrDitributions = []\n      messages.map((distrib, index) => {\n        const d = new Date(distrib.datestart);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year}`\n        const newTimeMessage = `${chas}:${minut}`\n\n        let space = /,/gi;\n\n        const newDistribution = {\n          id: distrib.id,\n          text: distrib.text,\n          image: distrib.image !=='' ? distrib.image : '',\n          project: distrib.project,\n          projectId: distrib.projectId ? distrib.projectId : '',\n          receivers: distrib.receivers.replace(space, '<br/>'), //strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n          categories: distrib.receivers,\n          count: distrib.count,\n          datestart: newDateMessage,\n          timestart: newTimeMessage,\n          status: distrib.delivered ? \"отправлено\" : \"запланировано\",\n          uuid: distrib.uuid,\n          success: distrib.success,\n\t\t\t\t}\n        arrDitributions.push(newDistribution)\n      })\n\n      //console.log(\"arrDitributions: \", arrDitributions)\n\n      setDistributionsWork(arrDitributions) \n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[messages])\n\n  //обновление списка рассылок\n  useEffect(() => {\n    const timer = setInterval(() => {\n      //setSeconds(seconds => seconds + 5);\n      addNewDistrib(true)\n    }, 10000);\n    \n    // очистка интервала\n    return () => clearInterval(timer);\n  });\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    addToast(exampleToast) //ваша рассылка удалена\n    \n    setDistributionsWork(distributionsWork.filter(p => p.id !== desk.id))\n    \n    //удаление сообщения в базе данных\n    await delDistributionW(desk.id)  \n\n    //удаление проекта из планировщика\n    //обновить план в БД\n    let plan = await getPlan(desk.datestart);\n    const newArray = JSON.parse(plan.times)\n\n    let dateIndex = newArray.findIndex((i) => i.time === desk.timestart)\n    const datesCopy = JSON.parse(JSON.stringify(newArray));\n    const dateObject = datesCopy[dateIndex];\n    datesCopy[dateIndex] = { ...dateObject, ['proj']: '', ['save']: false};\n    let planer_str = JSON.stringify(datesCopy)\n\n    const newObj = {\n      \"datestart\": desk.datestart,\n      \"times\": planer_str\n    }\n\n    await newPlan(newObj)\n  }\n\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Рассылки</h2>\n                      <Link to={'/distributionw_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <CToaster ref={toaster} push={toast} placement=\"top-end\" /> \n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardHeader>Рассылки для специалистов</CCardHeader>\n                            <CCardBody>\n                              <br /> \n\n                            {loading ? \n                                  \n                              <CSpinner/> :\n\n                              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                <CTableHead className='table-dark'>\n                                  <CTableRow>\n                                    <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Время</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Название проекта</CTableHeaderCell>\n                                    {/* <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell> */}\n                                    <CTableHeaderCell className=\"text-center\">Категория</CTableHeaderCell> \n                                    <CTableHeaderCell className=\"text-center\">Получатели</CTableHeaderCell>    \n                                    <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                  </CTableRow>\n                                </CTableHead>\n                                <CTableBody>\n                                  {distributionsWork.map((item, index) => (\n                                    <CTableRow v-for=\"item in tableItems\" key={index} style={{height: '130px'}}>\n                                      {/* <CTableDataCell>\n                                        <div>{index+1}</div>\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.datestart}</div>\n                                      </CTableDataCell>  \n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.timestart}</div>\n                                      </CTableDataCell>  \n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.project}</div>\n                                      </CTableDataCell>    \n                                      {/* <CTableDataCell className=\"text-center\">\n                                        {item.image.endsWith('.pdf') ?\n                                        <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                        : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                        }\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\">\n                                        <div dangerouslySetInnerHTML={{__html: item.receivers}} />\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {\n                                          item.status === 'запланировано' ? \n                                          <div style={{color: '#3887cd'}}>{item.count}</div>\n                                          :<div>{item.count} | {item.success ? item.success : \"\"}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {\n                                          item.status === 'запланировано' ? \n                                          <div style={{color: '#3887cd'}}>{item.status}</div>\n                                          :<div style={{color: '#f5f114'}}>{item.status}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {/* <Link to={'/distributionw_planer'} state={{ project: proj}}>\n                                          <CButton color=\"light\" style={{marginRight: '10px'}}>\n                                            <img src={editIcon} alt='' width='10px' />\n                                          </CButton>\n                                        </Link> */}\n\n                                        {item.projectId ? \n                                          <Link to={'/distributionw_add'} state={{ project: item.projectId, id: item.id, category: item.categories, img: item.image, date: item.datestart, uuid: item.uuid}}><CButton color=\"light\" style={{marginRight: '10px'}}><img src={editIcon} alt='' width='10px' /></CButton></Link>\n                                          :<Link to={''} state={{ project: `${proj}`, }}><CButton color=\"light\" style={{marginRight: '10px'}}><img src={editIcon} alt='' width='10px' /></CButton></Link>\n                                        }\n                                        \n                                        <CButton color=\"light\" onClick={() => removeDescription(item)}>\n                                          <img src={deleteIcon} alt='' width='10px' />\n                                        </CButton>\n\n                                      </CTableDataCell>\n                                    </CTableRow>\n                                  ))}\n                                </CTableBody>\n                              </CTable>\n                            }                              \n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionW\n"],"names":["useUsersContext","messages","distributionsWork","addNewDistrib","useState","setDistributionsWork","loading","setLoading","proj","toast","addToast","toaster","useRef","exampleToast","autohide","visible","color","className","white","useEffect","fetchData","arrDitributions","map","distrib","index","d","Date","datestart","year","getFullYear","month","String","getMonth","padStart","day","getDate","chas","getHours","minut","getMinutes","newDateMessage","newTimeMessage","newDistribution","id","text","image","project","projectId","receivers","replace","categories","count","timestart","status","delivered","uuid","success","push","timer","setInterval","clearInterval","removeDescription","desk","filter","p","delDistributionW","getPlan","plan","newArray","JSON","parse","times","dateIndex","findIndex","i","time","datesCopy","stringify","dateObject","planer_str","newObj","newPlan","lg","Suspense","fallback","to","size","ref","placement","xs","align","hover","responsive","item","style","height","width","dangerouslySetInnerHTML","__html","state","category","img","date","marginRight","src","editIcon","alt","onClick","deleteIcon"],"sourceRoot":""}