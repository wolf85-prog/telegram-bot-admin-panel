{"version":3,"file":"static/js/1803.b044d656.chunk.js","mappings":"yPAoNA,UArLgB,WAId,IAAQA,GAAuBC,EAAAA,EAAAA,KAAvBD,mBAERE,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3BI,GAAFF,EAAA,GAAaA,EAAA,IAC5BG,GAAwBJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA7BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA8BR,EAAAA,EAAAA,WAAS,GAAKS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAE5CE,GAFcD,EAAA,GAAYA,EAAA,IAEGT,EAAAA,EAAAA,WAAS,IAAKW,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAApCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAE1BG,GAAgCd,EAAAA,EAAAA,WAAS,GAAMe,GAAAb,EAAAA,EAAAA,GAAAY,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GA4E5B,OAzEAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,GAEnBtB,EAAmB,GAEnB,IAAMuB,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GAEQC,EAAAA,EAAAA,MAAmB,KAAD,EACD,OADrCP,EAAWI,EAAAI,KACfC,QAAQC,IAAI,gBAAiBV,GAAYI,EAAAE,KAAA,GAErBK,EAAAA,EAAAA,MAAY,OAIhC,OAJIV,EAAOG,EAAAI,KACXC,QAAQC,IAAI,YAAaT,GAGzBG,EAAAE,KAAA,IAEqBM,EAAAA,EAAAA,MAAe,KAAD,GAA/BV,EAAQE,EAAAI,KACZC,QAAQC,IAAI,aAAcR,GAE1BzB,EAAYyB,GAEZF,EAAYa,IAAG,eAAAC,GAAAlB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAiB,EAAOC,EAAQC,GAAC,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/B,EAAAA,EAAAA,KAAAM,MAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,OAE1BY,EAAahB,EAAS4B,MAAK,SAACC,GAAI,OAAKA,EAAKC,KAAOhB,EAAOiB,SAAS,IAC/Dd,EAAwB,OAAVD,QAAU,IAAVA,OAAU,EAAVA,EAAYgB,KAE5Bd,EAAcnB,EAAQ6B,MAAK,SAACK,GAAI,OAAKA,EAAKC,SAAWpB,EAAOqB,UAAU,IACpEhB,GAAwB,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAakB,YAAa,KAAgB,OAAXlB,QAAW,IAAXA,OAAW,EAAXA,EAAamB,UAG9C,GACJ,GACG,GACF,GAERjB,EAAI,IAAIkB,KAAKxB,EAAOyB,WAAWC,UAC/BnB,EAAK,IAAIiB,KAAKlB,GAEdE,EAAQmB,OAAOpB,EAAGqB,WAAW,GAAGC,SAAS,EAAG,KAC5CpB,EAAMkB,OAAOpB,EAAGuB,WAAWD,SAAS,EAAG,KACvCnB,EAAOH,EAAGwB,WACVpB,EAAMgB,OAAOpB,EAAGyB,cAAcH,SAAS,EAAG,KAE1CjB,EAAO,GAAAqB,OAAMxB,EAAG,KAAAwB,OAAIzB,EAAK,KAAAyB,OAAIvB,EAAI,KAAAuB,OAAItB,GAG3CuB,YAAUtD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAqD,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA3D,EAAAA,EAAAA,KAAAM,MAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cAAAmD,EAAAnD,KAAA,GACiBoD,EAAAA,EAAAA,IAAkB1C,EAAOqB,YAAW,OAAxDkB,EAAWE,EAAAjD,KAEXgD,EAAY,CAChBG,KAAM/B,EACNgC,QAASzC,EACTH,OAAQK,EACRwC,SAAUN,EAAY,GAAG3E,KACzBkF,KAAoB,QAAhBV,EAAEG,EAAY,UAAE,IAAAH,OAAA,EAAdA,EAAgBW,KACtBC,QAAuB,QAAhBX,EAAEE,EAAY,UAAE,IAAAF,OAAA,EAAdA,EAAgBW,QACzBC,MAAqB,QAAhBX,EAAEC,EAAY,UAAE,IAAAD,OAAA,EAAdA,EAAgBW,OAGzBxE,EAAWyE,KAAKV,GAEhB3E,EAAQY,GAERN,GAAW,GAAM,wBAAAsE,EAAAU,OAAA,GAAAhB,EAAA,KAChB,OAASlC,GAAE,yBAAAY,EAAAsC,OAAA,GAAApD,EAAA,KAEf,gBAAAqD,EAAAC,GAAA,OAAAvD,EAAAwD,MAAA,KAAAC,UAAA,EA7Cc,IA6Cb,yBAAAnE,EAAA+D,OAAA,GAAApE,EAAA,KACH,kBA9Dc,OAAAJ,EAAA2E,MAAA,KAAAC,UAAA,KAgEf7E,GAEF,GAAE,KAGA8E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,KACXJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gDAA+CC,SAAA,EAC5DC,EAAAA,EAAAA,KAACE,EAAAA,GAAS,KACVF,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,UAElCC,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CAACC,IAAE,EAAAL,UACVF,EAAAA,EAAAA,MAACQ,EAAAA,SAAQ,CAACC,UAAUN,EAAAA,EAAAA,KAACO,EAAAA,GAAQ,CAACC,MAAM,YAAaT,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wEAEJC,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACX,UAAU,OAAMC,UACpBC,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACC,GAAI,EAAEZ,UACVC,EAAAA,EAAAA,KAACY,EAAAA,GAAU,CAACC,YAAY,oCAAW,aAAW,cAIlDb,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAAAV,UACHC,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACI,MAAO,CAACC,UAAW,UAAUhB,UACjCC,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAAClB,UAAU,OAAMC,UACnBC,EAAAA,EAAAA,KAACiB,EAAAA,GAAS,CAAAlB,SACPxF,GAECyF,EAAAA,EAAAA,KAACO,EAAAA,GAAQ,KAETV,EAAAA,EAAAA,MAACqB,EAAAA,GAAM,CAACC,MAAM,SAASrB,UAAU,cAAcsB,OAAK,EAACC,YAAU,EAAAtB,SAAA,EAC7DC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACxB,UAAU,cAAaC,UACjCF,EAAAA,EAAAA,MAAC0B,EAAAA,GAAS,CAAAxB,SAAA,EACRC,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAC1B,UAAU,cAAcgB,MAAO,CAACW,MAAO,SAAS1B,SAAC,8BACnEC,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAC1B,UAAU,cAAcgB,MAAO,CAACW,MAAO,SAAS1B,SAAC,0CACnEC,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAC1B,UAAU,cAAcgB,MAAO,CAACW,MAAO,SAAS1B,SAAC,wBACnEC,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAC1B,UAAU,cAAcgB,MAAO,CAACW,MAAO,SAAS1B,SAAC,oFACnEC,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAC1B,UAAU,cAAcgB,MAAO,CAACW,MAAO,SAAS1B,SAAC,aACnEC,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAC1B,UAAU,cAAcgB,MAAO,CAACY,SAAU,SAAS3B,SAAC,wEACtEC,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAC1B,UAAU,cAAcgB,MAAO,CAACW,MAAO,SAAS1B,SAAC,qDAGvEC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAU,CAAA5B,SACR9F,EAAKiC,KAAI,SAACsB,EAAMoE,GAAK,OACpB/B,EAAAA,EAAAA,MAAC0B,EAAAA,GAAS,CAAC,QAAM,qBAAoBxB,SAAA,EACnCC,EAAAA,EAAAA,KAAC6B,EAAAA,GAAc,CAAC/B,UAAU,cAAaC,SACpCvC,EAAKwB,QAERgB,EAAAA,EAAAA,KAAC6B,EAAAA,GAAc,CAAC/B,UAAU,cAAaC,SACpCvC,EAAKyB,WAERe,EAAAA,EAAAA,KAAC6B,EAAAA,GAAc,CAAC/B,UAAU,cAAcgB,MAAO,CAACN,MAAOhD,EAAKsE,UAAY,KAAO,MAAQ,IAAI/B,SACtFvC,EAAKnB,UAEVwD,EAAAA,EAAAA,MAACgC,EAAAA,GAAc,CAACf,MAAO,CAACiB,SAAU,OAAQhB,UAAW,QAAQhB,SAAA,EAC3DC,EAAAA,EAAAA,KAAA,OAAKgC,QAAS,kBAAMpH,GAAaD,EAAS,EAACoF,SAAC,kEAC5CC,EAAAA,EAAAA,KAACiC,EAAAA,GAAS,CAACC,QAASvH,EAASoF,UAC3BC,EAAAA,EAAAA,KAAA,SAAAD,SACGvC,EAAK0B,SACL1B,EAAK0B,SAAUhD,KAAI,SAACjC,EAAM2H,GAAK,OAC5B5B,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,KAAG9F,EAAKsD,SADLqE,EAEJ,IAER,WAKP5B,EAAAA,EAAAA,KAAC6B,EAAAA,GAAc,CAAC/B,UAAU,cAAaC,SACpCvC,EAAK2B,QAERa,EAAAA,EAAAA,KAAC6B,EAAAA,GAAc,CAACf,MAAO,CAACN,MAAOhD,EAAKsE,UAAY,KAAO,MAAQ,GAAIC,SAAU,OAAQhB,UAAW,QAAQhB,SACrGvC,EAAK6B,WAERW,EAAAA,EAAAA,KAAC6B,EAAAA,GAAc,CAAC/B,UAAU,cAAaC,UACrCC,EAAAA,EAAAA,KAAA,OAAAD,SAAMvC,EAAK8B,YAhC4BsC,EAkC/B,yBAc1C5B,EAAAA,EAAAA,KAACmC,EAAAA,GAAS,SAIlB,C","sources":["pages/Workers.js"],"sourcesContent":["import React, { Suspense, useEffect, useState } from 'react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport DataTable, { createTheme } from 'react-data-table-component';\nimport { \n  CContainer, \n  CSpinner, \n  CCol,\n  CRow,\n  CFormInput,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CCard,\n  CCardBody,\n  CCollapse,\n  CButton, \n} from '@coreui/react'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\n\nimport { \n  getWorkerId, \n  getProjects3, \n  newPretendent \n} from './../http/adminAPI';\nimport { getAllPretendent, getWorkers, getWorkersNotion, getWorkerNotionId } from './../http/workerAPI'\n\n\n//Workers.js\nconst Workers = () => {\n\n  //const { pretendents } = useUsersContext();\n  //const { projects } = useUsersContext();\n  const { setCountPretendent } = useUsersContext();\n\n  const [projects, setProjects] = useState([]); \n  const [spec, setSpec] = useState([]); \n  const [pending, setPending] = useState(true);  \n\n  const [loading, setLoading]= useState(true);\n\n  const [visibleA, setVisibleA] = useState(false)\n\n  //get pretendents\n  useEffect(() => {\n    const arrWorkers = []\n\n    setCountPretendent(0)\n\n    const fetchData = async () => {\n\n      let pretendents = await getAllPretendent();\n      console.log(\"pretendents: \", pretendents)\n\n      let workers = await getWorkers()\n      console.log(\"workers: \", workers)\n\n      //let workersN = await getWorkersNotion()\n      //console.log(\"workersN: \", workersN)\n\n      let projects = await getProjects3();\n      console.log(\"projects: \", projects)\n\n      setProjects(projects) \n\n      pretendents.map(async (worker, i) => {\n\n        let userObject = projects.find((proj) => proj.id === worker.projectId);  \n        const projectName = userObject?.name\n\n        let userObject2 = workers.find((item) => item.chatId === worker.receiverId);  \n        const workerName = userObject2?.userfamily + \" \"+ userObject2?.username\n\n        //let userObject3 = workersN.find((item) => item.tgId === worker.receiverId);  \n        const worklist = \"\" //userObject3?.spec\n        const rang = \"\" //userObject3?.spec\n        const comment = \"\" //userObject3?.spec\n        const phone = \"\" //userObject3?.phone\n\n        const d = new Date(worker.createdAt).getTime() //+ 10800000 //Текущая дата:  + 3 часа)\n        const d2 = new Date(d)\n\n        const month = String(d2.getMonth()+1).padStart(2, \"0\");\n        const day = String(d2.getDate()).padStart(2, \"0\");\n        const chas = d2.getHours();\n        const min = String(d2.getMinutes()).padStart(2, \"0\");\n        \n        const newDate = `${day}.${month} ${chas}:${min}`;\n\n        //worklist\n        setTimeout(async()=> {\n          const workNotions = await getWorkerNotionId(worker.receiverId)\n      \n          const newWorker = {\n            date: newDate, //newDate,\n            project: projectName,\n            worker: workerName, \n            worklist: workNotions[0].spec,\n            rang: workNotions[0]?.rank,\n            comment: workNotions[0]?.comment,\n            phone: workNotions[0]?.phone,\n\n          }\n          arrWorkers.push(newWorker)\n\n          setSpec(arrWorkers)\n\n          setLoading(false)\n        }, 1500 * ++i)\n        \n      })  \n    }\n\n    fetchData();\n    \n  },[])\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                    <h2>Претенденты</h2>\n                    \n                    <CRow className=\"mb-3\">\n                      <CCol sm={3} >\n                        <CFormInput placeholder=\"Поиск...\" aria-label=\"City\"/>\n                      </CCol>\n                    </CRow>\n\n                    <CRow>\n                      <CCol style={{textAlign: 'center'}}>\n                        <CCard className=\"mb-4\"> \n                            <CCardBody>\n                              {loading ? \n                                      \n                                <CSpinner/> :\n\n                                <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                  <CTableHead className='table-light'>\n                                    <CTableRow>\n                                      <CTableHeaderCell className=\"text-center\" style={{width: '110px'}}>Дата</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '250px'}}>Проект</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '150px'}}>ФИО</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>Специальность</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '120px'}}>U.L.E.Y</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\" style={{minWidth: '120px'}}>Комментарий</CTableHeaderCell>                         \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '180px'}}>Телефон</CTableHeaderCell>\n                                    </CTableRow>\n                                  </CTableHead>\n                                  <CTableBody>                                  \n                                    {spec.map((item, index) => (\n                                      <CTableRow v-for=\"item in tableItems\" key={index}>\n                                        <CTableDataCell className=\"text-center\">\n                                          {item.date}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          {item.project}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.dateborn >= 2005 ? 'red' : ''}}>\n                                            {item.worker}\n                                        </CTableDataCell>\n                                        <CTableDataCell style={{fontSize: '13px', textAlign: 'left'}}>\n                                          <div onClick={() => setVisibleA(!visibleA)}>Посмотреть</div>\n                                          <CCollapse visible={visibleA}>\n                                            <table>\n                                              {item.worklist ? \n                                              (item.worklist).map((spec, index)=>( \n                                                  <tr key={index}>\n                                                    <td>- {spec.name}</td>\n                                                  </tr>          \n                                              ))\n                                              :\"\"\n                                              }\n                                            </table>\n                                          </CCollapse>\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          {item.rang}\n                                        </CTableDataCell>\n                                        <CTableDataCell style={{color: item.dateborn >= 2005 ? 'red' : '', fontSize: '13px', textAlign: 'left'}}>\n                                          {item.comment}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          <div>{item.phone}</div>\n                                        </CTableDataCell>\n                                      </CTableRow>\n                                      ))\n                                    }\n                                </CTableBody>                   \n                              </CTable>\n                            }\n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                    </CRow>\n                  </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Workers\n"],"names":["setCountPretendent","useUsersContext","_useState","useState","_useState2","_slicedToArray","setProjects","_useState3","_useState4","spec","setSpec","_useState5","_useState6","_useState7","_useState8","loading","setLoading","_useState9","_useState10","visibleA","setVisibleA","useEffect","arrWorkers","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","pretendents","workers","projects","wrap","_context3","prev","next","getAllPretendent","sent","console","log","getWorkers","getProjects3","map","_ref2","_callee2","worker","i","userObject","projectName","userObject2","workerName","d","d2","month","day","chas","min","newDate","_context2","find","proj","id","projectId","name","item","chatId","receiverId","userfamily","username","Date","createdAt","getTime","String","getMonth","padStart","getDate","getHours","getMinutes","concat","setTimeout","_callee","_workNotions$","_workNotions$2","_workNotions$3","workNotions","newWorker","_context","getWorkerNotionId","date","project","worklist","rang","rank","comment","phone","push","stop","_x","_x2","apply","arguments","_jsxs","className","children","_jsx","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","color","CRow","CCol","sm","CFormInput","placeholder","style","textAlign","CCard","CCardBody","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","width","minWidth","CTableBody","index","CTableDataCell","dateborn","fontSize","onClick","CCollapse","visible","AppFooter"],"sourceRoot":""}