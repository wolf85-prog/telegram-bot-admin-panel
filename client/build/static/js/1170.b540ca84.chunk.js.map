{"version":3,"file":"static/js/1170.b540ca84.chunk.js","mappings":"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","sources":["pages/Workers.js"],"sourcesContent":["import React, { Suspense, useEffect, useState } from 'react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport DataTable, { createTheme } from 'react-data-table-component';\nimport { \n  CContainer, \n  CSpinner, \n  CCol,\n  CRow,\n  CFormInput,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CCard,\n  CCardBody,\n  CCollapse,\n  CButton, \n} from '@coreui/react'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\n\nimport { \n  getWorkerId, \n  getProjects3, \n  newPretendent \n} from './../http/adminAPI';\nimport { getAllPretendent, getWorkers, getWorkersNotion, getWorkerNotionId } from './../http/workerAPI'\n\n\n//Workers.js\nconst Workers = () => {\n\n  //const { pretendents } = useUsersContext();\n  //const { projects } = useUsersContext();\n  const { setCountPretendent } = useUsersContext();\n\n  const [projects, setProjects] = useState([]); \n  const [spec, setSpec] = useState([]); \n  const [pending, setPending] = useState(true);  \n\n  const [loading, setLoading]= useState(true);\n\n  const [visibleA, setVisibleA] = useState(false)\n\n  //get pretendents\n  useEffect(() => {\n    const arrWorkers = []\n\n    setCountPretendent(0)\n\n    const fetchData = async () => {\n\n      let pretendents = await getAllPretendent();\n      console.log(\"pretendents: \", pretendents)\n\n      let workers = await getWorkers()\n      console.log(\"workers: \", workers)\n\n      //let workersN = await getWorkersNotion()\n      //console.log(\"workersN: \", workersN)\n\n      let projects = await getProjects3();\n      console.log(\"projects: \", projects)\n\n      setProjects(projects) \n\n      pretendents.map(async (worker, i) => {\n\n        let userObject = projects.find((proj) => proj.id === worker.projectId);  \n        const projectName = userObject?.name\n\n        let userObject2 = workers.find((item) => item.chatId === worker.receiverId);  \n        const workerName = userObject2?.userfamily + \" \"+ userObject2?.username\n\n        //let userObject3 = workersN.find((item) => item.tgId === worker.receiverId);  \n        const worklist = \"\" //userObject3?.spec\n        const rang = \"\" //userObject3?.spec\n        const comment = \"\" //userObject3?.spec\n        const phone = \"\" //userObject3?.phone\n\n        const d = new Date(worker.createdAt).getTime() //+ 10800000 //Текущая дата:  + 3 часа)\n        const d2 = new Date(d)\n\n        const month = String(d2.getMonth()+1).padStart(2, \"0\");\n        const day = String(d2.getDate()).padStart(2, \"0\");\n        const chas = d2.getHours();\n        const min = String(d2.getMinutes()).padStart(2, \"0\");\n        \n        const newDate = `${day}.${month} ${chas}:${min}`;\n\n        //worklist\n        setTimeout(async()=> {\n          const workNotions = await getWorkerNotionId(worker.receiverId)\n      \n          const newWorker = {\n            date: newDate, //newDate,\n            project: projectName,\n            worker: workerName, \n            worklist: workNotions[0].spec,\n            rang: workNotions[0]?.rank,\n            comment: workNotions[0]?.comment,\n            phone: workNotions[0]?.phone,\n\n          }\n          arrWorkers.push(newWorker)\n\n          setSpec(arrWorkers)\n\n          setLoading(false)\n        }, 1500 * ++i)\n        \n      })  \n    }\n\n    fetchData();\n    \n  },[])\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                    <h2>Претенденты</h2>\n                    \n                    <CRow className=\"mb-3\">\n                      <CCol sm={3} >\n                        <CFormInput placeholder=\"Поиск...\" aria-label=\"City\"/>\n                      </CCol>\n                    </CRow>\n\n                    <CRow>\n                      <CCol style={{textAlign: 'center'}}>\n                        <CCard className=\"mb-4\"> \n                            <CCardBody>\n                              {loading ? \n                                      \n                                <CSpinner/> :\n\n                                <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                  <CTableHead className='table-light'>\n                                    <CTableRow>\n                                      <CTableHeaderCell className=\"text-center\" style={{width: '110px'}}>Дата</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '250px'}}>Проект</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '150px'}}>ФИО</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>Специальность</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '140px'}}>U.L.E.Y</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\" style={{minWidth: '120px'}}>Комментарий</CTableHeaderCell>                         \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>Телефон</CTableHeaderCell>\n                                    </CTableRow>\n                                  </CTableHead>\n                                  <CTableBody>                                  \n                                    {spec.map((item, index) => (\n                                      <CTableRow v-for=\"item in tableItems\" key={index}>\n                                        <CTableDataCell className=\"text-center\">\n                                          {item.date}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          {item.project}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.dateborn >= 2005 ? 'red' : ''}}>\n                                            {item.worker}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          <div onClick={() => setVisibleA(!visibleA)}>Посмотреть</div>\n                                          <CCollapse visible={visibleA}>\n                                            <table>\n                                              {item.worklist ? \n                                              (item.worklist).map((spec, index)=>( \n                                                  <tr key={index}>\n                                                    <td >{spec.name}</td>\n                                                  </tr>          \n                                              ))\n                                              :\"\"\n                                              }\n                                            </table>\n                                          </CCollapse>\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          {item.rang}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.dateborn >= 2005 ? 'red' : ''}}>\n                                          {item.comment}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          <div>{item.phone}</div>\n                                        </CTableDataCell>\n                                      </CTableRow>\n                                      ))\n                                    }\n                                </CTableBody>                   \n                              </CTable>\n                            }\n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                    </CRow>\n                  </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Workers\n"],"names":["setCountPretendent","useUsersContext","useState","setProjects","spec","setSpec","loading","setLoading","visibleA","setVisibleA","useEffect","arrWorkers","fetchData","getAllPretendent","pretendents","console","log","getWorkers","workers","getProjects3","projects","map","worker","i","userObject","find","proj","id","projectId","projectName","name","userObject2","item","chatId","receiverId","workerName","userfamily","username","d","Date","createdAt","getTime","d2","month","String","getMonth","padStart","day","getDate","chas","getHours","min","getMinutes","newDate","setTimeout","getWorkerNotionId","workNotions","newWorker","date","project","worklist","rang","rank","comment","phone","push","className","lg","Suspense","fallback","color","sm","placeholder","style","textAlign","align","hover","responsive","width","minWidth","index","dateborn","onClick","visible"],"sourceRoot":""}