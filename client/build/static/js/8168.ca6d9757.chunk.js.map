{"version":3,"file":"static/js/8168.ca6d9757.chunk.js","mappings":"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","sources":["pages/DistributionAdd.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { CContainer, CSpinner } from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport { \n  CRow,\n  CCol,\n  CCard,\n  CCardBody,\n  CForm,\n  CFormLabel,\n  CFormInput,\n  CFormTextarea,\n  CButton,\n  CAlert,\n  CFormCheck,\n} from '@coreui/react'\n\nimport { MultiSelect } from 'primereact/multiselect';\nimport \"primereact/resources/themes/lara-light-cyan/theme.css\";\n\n//import { MultiSelect } from \"react-multi-select-component\";\n\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { $host } from './../http/index'\nimport { useNavigate } from 'react-router-dom';\nimport { newDistribution, getDistributions, editDistribution } from './../http/adminAPI';\nimport { newMessage, uploadFile } from './../http/chatAPI';\nimport sendSound from './../chat-app-new/assets/sounds/distribution_sound.mp3';\n\n\nconst DistributionAdd = () => {\n\n  const token = process.env.REACT_APP_TELEGRAM_API_TOKEN\n\tconst host = process.env.REACT_APP_HOST\n  const hostPort = process.env.REACT_APP_API_URL\n  const chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID\n\n  const { users: clients } = useUsersContext();\n  const { addNewMessage, setDistributions } = useUsersContext();\n  const [contacts, setContacts]= useState([]);\n\n  const [selected, setSelected] = useState(null);\n  const [text, setText] = useState('');\n  const [countChar, setCountChar] = useState(0);\n  const [visible, setVisible] = useState(false);\n  const [showEditButtonAdd, setShowEditButtonAdd] = useState(false);\n  const [sendToAdmin, setSendToAdmin] = useState(false);\n  const [textButton, setTextButton] = useState('');\n  const [file, setFile] = useState();\n  const [value, setValue] = useState(\"\");\n  const [image, setImage]= useState(\"\");\n\n  const audio = new Audio(sendSound);\n\n  const navigate = useNavigate();\n\n  const backPage = () => {\n       navigate('/distribution');\n  } \n\n  useEffect(() => {\n    const arrClients = []\n      \n    clients.map((client) => {\n      const newObj = {\n        name: client.name, \n        code: client.chatId,\n      }\n      arrClients.push(newObj)\n    })\n\n    console.log(\"users: \", arrClients)\n    \n    setContacts(arrClients)      \n  }, [clients]);\n\n\n  const onChangeText = (e) => {\n    setText(e.target.value)\n    setCountChar(e.target.value.length)\n  }\n\n  useEffect(() => {\n    const getImage = async () => {\n        if (file) {\n          console.log(\"file:\", file)\n          const data = new FormData();\n          data.append(\"name\", file.name);\n          data.append(\"photo\", file);\n          \n          let response = await uploadFile(data);\n          console.log(\"response: \", response.data.path)\n\n          setImage(response.data.path.split('.team')[1]);\n          //сообщение с ссылкой на файл\n          //console.log(host + response.data.path)\n          //setValue(host + response.data.path)\n        }\n    }\n    getImage();\n  }, [file])\n\n  {/* Добавление файла */}\n  const onFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setValue(e.target.value)\n  }\n\n  {/* Показать Добавление текста кнопки */}\n  const clickShowEditButton = (e) => {\n    e.preventDefault();\n    showEditButtonAdd ? setShowEditButtonAdd (false) : setShowEditButtonAdd (true)\n  }\n\n  const onChangeTextButton = (e) => {\n    setTextButton(e.target.value)\n  }\n\n  const onChangeCheck = (e) => {\n    console.log(!sendToAdmin)\n    setSendToAdmin(!sendToAdmin)\n  }\n\n  {/* Отправка рассылки */}\n  const onSendText = async() => {\n    //console.log(selected)\n    \n    let arrUsers = []\n    let countSuccess = 0\n\n    audio.play();\n\n    //новая рассылка\n    const message = {\n      name: 'Рассылка', \n      text: text, \n      image: host + image, \n      button: textButton, \n      receivers: JSON.stringify(selected), \n      datestart: Date.now(), \n      delivered: 'true',        \n    }\n    console.log(\"message send button: \", message);\n\n    //сохранение рассылки в базе данных\n    const distrNew = await newDistribution(message)\n    \n    selected.map(async (user, index) => {\n      setTimeout(async()=> { \n        console.log(\"Пользователю ID: \" + user.code + \" сообщение \" + text + \" отправлено! Кнопка \" + textButton + \" отправлена!\")\n\n        //по-умолчанию пока сообщение не отправлено\n        arrUsers.push({\n          label: user.name,\n          value: user.code,\n          status: 500,\n          mess: null,\n        }) \n\n        let client = clients.find((client) => client.chatId === user.code);\n        console.log(\"client: \", client)\n        \n        //Передаем данные боту\n        const keyboard = JSON.stringify({\n          inline_keyboard: [\n              [\n                  {\"text\": textButton, callback_data:'/report'},\n              ],\n          ]\n        });\n\n        //отправить в телеграмм\n        let sendToTelegram\n        if (text !== '') {\n          console.log(arrUsers, distrNew)\n          const url_send_msg = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${user.code}&parse_mode=html&text=${text.replace(/\\n/g, '%0A')}`\n          console.log(\"url_send_msg: \", url_send_msg)\n          sendToTelegram = await $host.get(url_send_msg);\n          console.log('sendToTelegram: ', sendToTelegram)\n\n          const { status } = sendToTelegram;              \n          if (status === 200) {\n            console.log(\"статус 200 текст\", arrUsers, distrNew.id)\n            //countSuccess = countSuccess + 1 \n            \n            //обновить статус доставки\n            arrUsers[index-1].status = 200  \n            arrUsers[index-1].mess = sendToTelegram.data?.result?.message_id \n            \n            console.log(\"res: \", {receivers: JSON.stringify(arrUsers)}, distrNew.id)\n\n            //обновить бд рассылку\n            await editDistribution({receivers: JSON.stringify(arrUsers)}, distrNew.id)\n          } \n                              \n        }  \n\n        const url_send_photo = `https://api.telegram.org/bot${token}/sendPhoto?chat_id=${user.code}&reply_markup=${keyboard}`\n        console.log(\"url_send_photo: \", url_send_photo)\n        \n        let sendPhotoToTelegram\n        if (file) {\n          const form = new FormData();\n          form.append(\"photo\", file);\n\n          sendPhotoToTelegram = await $host.post(url_send_photo, form);\n          console.log('sendPhotoToTelegram: ', sendPhotoToTelegram)\n\n          const { status } = sendPhotoToTelegram;\n\n          if (status === 200 && text === '') {\n            console.log(\"статус 200 фото\")\n            //countSuccess = countSuccess + 1  \n                    \n            //обновить статус доставки\n            arrUsers[index-1].status = 200\n            arrUsers[index-1].mess = sendPhotoToTelegram.data?.result?.message_id   \n\n            //обновить бд рассылку\n            await editDistribution({receivers: JSON.stringify(arrUsers)}, distrNew.id)\n          }\n        } \n\n        //отправить в админку\n        if (sendToAdmin) {\n          let message = {};\n          if(!file) {\n              message = {\n                  senderId: chatAdminId, \n                  receiverId: user.code,\n                  conversationId: client.conversationId,\n                  type: \"text\",\n                  text: text,\n                  is_bot: true,\n                  messageId: sendToTelegram.data.result.message_id,\n                  buttons: '',\n              }\n          } else {\n              message = {\n                  senderId: chatAdminId, \n                  receiverId: user.code,\n                  conversationId: client.conversationId,\n                  type: \"image\",\n                  text: host + image,\n                  is_bot: true,\n                  messageId: sendPhotoToTelegram.data.result.message_id,\n                  buttons: textButton,\n              }\n          }\n          console.log(\"message send: \", message);\n\n          //сохранение сообщения в базе данных\n          await newMessage(message)\n\n          //сохранить в контексте\n          if(!file) {\n            addNewMessage(user.code, text, 'text', '', client.conversationId, sendToTelegram.data.result.message_id);\n          } else {\n            addNewMessage(user.code, host + image, 'image', textButton, client.conversationId, sendPhotoToTelegram.data.result.message_id);\n          }\n    \n        }  \n\n      }, 3000 * ++index) \n    })\n\n    //обновить список рассылок\n    // let response = await getDistributions();\n    // console.log(\"distribution new add: \", response.length)\n    // setDistributions(response)\n\n    setSelected([])\n    setSendToAdmin(false)\n    setText('')\n    setShowEditButtonAdd(false)\n    setTextButton('')\n    setVisible(true)\n    setValue('')\n\n    //navigate('/distribution');\n  }\n\n  const selectChange = (e)=> {\n    console.log(selected)\n    setSelected(e.value)\n  } \n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Новая рассылка</h2>\n\n                    <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            {/* <CCardHeader>Рассылки</CCardHeader> */}\n                            <CCardBody>\n                            <CAlert color=\"success\" dismissible visible={visible} onClose={() => setVisible(false)}>\n                              Сообщение успешно отправлено!\n                            </CAlert>\n                              <CForm>\n                                <div className=\"mb-3\" style={{color: '#f3f3f3'}}>\n                                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Выберите получателей:</CFormLabel>\n                                  {/* <MultiSelect\n                                    options={options}\n                                    value={selected}\n                                    onChange={setSelected}\n                                    style={{color: '#1e1919'}}\n                                    overrideStrings={{\n                                      \"allItemsAreSelected\": \"Все поля выбраны\",\n                                      \"clearSearch\": \"Очистить поиск\",\n                                      \"clearSelected\": \"Очистить выбор\",\n                                      \"noOptions\": \"Ничего не найдено\",\n                                      \"search\": \"Поиск\",\n                                      \"selectAll\": \"Выбрать всё\",\n                                      \"selectAllFiltered\": \"Выбрать всё (Найденных)\",\n                                      \"selectSomeItems\": \"Выбрать...\",\n                                      \"create\": \"Создать\",\n                                    }}   \n                                  /> */}\n\n                                  <MultiSelect \n                                    id=\"exampleFormControlInput1\"\n                                    value={selected} \n                                    onChange={(e) => selectChange(e)} \n                                    options={contacts} \n                                    optionLabel=\"name\" \n                                    maxSelectedLabels={3} \n                                    className=\"w-full md:w-20rem\" \n                                    filter \n                                    virtualScrollerOptions={{ itemSize: 43 }}\n                                    placeholder=\"\"\n                                  />\n\n                                  {/* <MultiSelect \n                                    value={selected} \n                                    onChange={(e)=>selectChange(e)} \n                                    options={options} \n                                    style={{color: '#1e1919'}}\n                                    filter \n                                    virtualScrollerOptions={{ itemSize: 43 }}\n                                    maxSelectedLabels={3}\n                                    placeholder=\"Select Items\"\n                                  /> */}\n                                  {/* <MultiSelect\n                                    id=\"exampleFormControlInput1\"\n                                    options={options}\n                                    value={selected}\n                                    onChange={setSelected}\n                                    labelledBy={\"Select\"}\n                                    isCreatable={true}\n                                  /> */}\n                                  <p style={{color: '#767676'}}>Получателей: <span>{selected?.length}</span></p>\n                                </div>\n\n                                <div className='mb-3' style={{color: '#f3f3f3'}}>\n                                  <CFormCheck \n                                    id=\"flexCheckDefault\" \n                                    label=\"Дублировать в админку\"\n                                    onChange={onChangeCheck}\n                                    defaultChecked={sendToAdmin}\n                                  />\n                                </div>\n\n                                <div className=\"mb-3\">\n                                  {/* <CFormLabel htmlFor=\"exampleFormControlTextarea1\">Текст сообщения</CFormLabel> */}\n                                  <CFormTextarea \n                                    id=\"exampleFormControlTextarea1\" \n                                    rows={3} \n                                    placeholder='Введите текст сообщения'\n                                    onChange={onChangeText}\n                                    value={text}\n                                    // helperText = {`${countChar}/500`}\n                                  >           \n                                  </CFormTextarea>\n                                </div>\n                              \n\n                                {/* Добавление картинки */}\n                                <div className=\"mb-6\" style={{color: '#8f8888'}}>\n                                  <CFormInput \n                                    type=\"file\" \n                                    id=\"formFile\" \n                                    label=\"Добавить картинку\" \n                                    name=\"photo\"\n                                    onChange={(e) => onFileChange(e)}\n                                    value={value}\n                                  />\n                                </div>\n\n                                <div className=\"mb-3\"></div>\n\n                                <div className=\"mb-3 text-center\">\n                                  <p style={{color: '#fff', cursor: 'pointer'}} onClick={clickShowEditButton} > {showEditButtonAdd ? '- Убрать кнопку' : '+ Добавить кнопку'}</p>\n                                </div>\n\n                                {/* Добавление кнопки */}\n                                <CForm className=\"row g-3\" style={{color: '#8f8888', display: showEditButtonAdd ? \"block\" : \"none\" }}>\n                                  <CCol md={6}>\n                                    <CFormInput \n                                      type=\"text\" \n                                      id=\"inputTextButton\" \n                                      label=\"Название кнопки\" \n                                      placeholder=\"Введите текст\"\n                                      onChange={onChangeTextButton}\n                                      value={textButton}\n                                    />\n                                  </CCol>\n                                </CForm>\n                                <br/>\n                                <div className=\"mb-3\" style={{textAlign: 'right'}}>\n                                  <CButton color=\"secondary\" style={{marginRight: '15px'}} onClick={backPage}>Отмена</CButton>\n                                  <CButton color=\"primary\" onClick={onSendText}>Отправить рассылку</CButton>\n                                </div>\n                              </CForm>\n\n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionAdd\n"],"names":["DistributionAdd","token","process","host","chatAdminId","users","clients","useUsersContext","addNewMessage","setDistributions","contacts","setContacts","useState","selected","setSelected","text","setText","countChar","setCountChar","visible","setVisible","showEditButtonAdd","setShowEditButtonAdd","sendToAdmin","setSendToAdmin","textButton","setTextButton","file","setFile","value","setValue","image","setImage","audio","Audio","sendSound","navigate","useNavigate","useEffect","arrClients","map","client","newObj","name","code","chatId","push","console","log","async","data","FormData","append","response","uploadFile","path","split","getImage","_jsxs","className","children","_jsx","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","color","_Fragment","CRow","CCol","xs","CCard","CCardBody","CAlert","dismissible","onClose","CForm","style","CFormLabel","htmlFor","MultiSelect","id","onChange","e","selectChange","options","optionLabel","maxSelectedLabels","filter","virtualScrollerOptions","itemSize","placeholder","length","CFormCheck","label","defaultChecked","CFormTextarea","rows","target","CFormInput","type","files","onFileChange","cursor","onClick","preventDefault","display","md","textAlign","CButton","marginRight","backPage","arrUsers","play","message","button","receivers","JSON","stringify","datestart","Date","now","delivered","distrNew","newDistribution","user","index","setTimeout","status","mess","find","keyboard","inline_keyboard","callback_data","sendToTelegram","url_send_msg","replace","$host","get","_sendToTelegram$data","_sendToTelegram$data$","result","message_id","editDistribution","url_send_photo","sendPhotoToTelegram","form","post","_sendPhotoToTelegram$","_sendPhotoToTelegram$2","senderId","receiverId","conversationId","is_bot","messageId","buttons","newMessage","AppFooter"],"sourceRoot":""}