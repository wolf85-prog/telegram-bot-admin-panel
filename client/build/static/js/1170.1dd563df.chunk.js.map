{"version":3,"file":"static/js/1170.1dd563df.chunk.js","mappings":"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","sources":["pages/Workers.js"],"sourcesContent":["import React, { Suspense, useEffect, useState } from 'react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport DataTable, { createTheme } from 'react-data-table-component';\nimport { \n  CContainer, \n  CSpinner, \n  CCol,\n  CRow,\n  CFormInput,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CCard,\n  CCardBody,\n  CCollapse,\n  CButton, \n} from '@coreui/react'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\n\nimport { getAllPretendent, getWorkers, getWorkersNotion100, getWorkersNotion, getWorkerNotionId } from './../http/workerAPI'\n\n\n//Workers.js\nconst Workers = () => {\n\n  //const { pretendents } = useUsersContext();\n  //const { projects } = useUsersContext();\n  const { setCountPretendent, pretendents } = useUsersContext();\n\n  const [projects, setProjects] = useState([]); \n  const [spec, setSpec] = useState([]); \n\n  const [pending, setPending] = useState(true);  \n\n  const [loading, setLoading]= useState(true);\n\n  const [visibleA, setVisibleA] = useState(false)\n\n  const [showTable, setShowTable] = useState([])\n\n  const [text, setText]= useState(\"\");\n\n  \n\n  //поиск\n  // useEffect(() => {\n\t// \tconst filteredData = pretendents.filter(user=> (user.workerFamily+user.workerName)?.toLowerCase().includes(text.toLowerCase()));\n  //   setSpec(filteredData);      \n  // }, [text]);\n\n  //\n  const handleClick = (ind) => {\n    console.log(ind, showTable[ind])\n\n    setShowTable(prevShownTable => ({\n        ...prevShownTable,\n        [ind]: !prevShownTable[ind]\n      }));\n  }\n\n  //get Contacts\n  useEffect(() => {\n\n    const fetchData = async() => {\n      console.log(\"workers-pretendent: \", pretendents)\n      setSpec(pretendents); \n      setLoading(false)\n    }\n\n    fetchData()\n  }, [pretendents])\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                    <h2>Претенденты</h2>\n                    \n                    <CRow className=\"mb-3\">\n                      <CCol sm={3} >\n                        <CFormInput placeholder=\"Поиск...\" onChange={(e)=>setText(e.target.value)} aria-label=\"spec\"/>\n                      </CCol>\n                    </CRow>\n\n                    <CRow>\n                      <CCol style={{textAlign: 'center'}}>\n                        <CCard className=\"mb-4\"> \n                            <CCardBody>\n                              {loading ? \n                                      \n                                <CSpinner/> :\n\n                                <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                  <CTableHead className='table-light'>\n                                    <CTableRow>\n                                      <CTableHeaderCell className=\"text-center\" style={{width: '200px'}}>Дата</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '320px'}}>Проект</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '370px'}}>ФИО</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>Специальность</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>U.L.E.Y</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\" >Комментарий</CTableHeaderCell>                         \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '250px'}}>Телефон</CTableHeaderCell>\n                                    </CTableRow>\n                                  </CTableHead>\n                                  <CTableBody>                                  \n                                    {spec.map((item, index) => (\n                                      <CTableRow v-for=\"item in tableItems\" key={index}>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && \"red\"}}>\n                                          {item.date}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && \"red\"}}>\n                                          {item.project}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.dateborn >= 2005 || item.accept ? 'red' : ''}}>\n                                            {item.workerFamily + \" \" + item.workerName}\n                                        </CTableDataCell>\n                                        <CTableDataCell style={{fontSize: '13px', textAlign: 'left'}}>\n                                          <div onClick={()=>handleClick(index)} style={{cursor: 'pointer'}}>{!showTable[index] ? 'Посмотреть' : <br/>}</div>\n                                          <CCollapse visible={showTable[index]}>\n                                            <table>\n                                              {item.worklist ? \n                                              (item.worklist).map((spec, index)=>( \n                                                  <tr key={index}>\n                                                    <td>- {spec.spec}</td>\n                                                  </tr>          \n                                              ))\n                                              :\"\"\n                                              }\n                                            </table>\n                                          </CCollapse>\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && 'red'}}>\n                                          {item.rang}\n                                        </CTableDataCell>\n                                        <CTableDataCell style={{fontSize: '13px', textAlign: 'left'}}>\n                                          {item.comment}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && \"red\"}}>\n                                          <div>{item.phone}</div>\n                                        </CTableDataCell>\n                                      </CTableRow>\n                                      ))\n                                    }\n                                </CTableBody>                   \n                              </CTable>\n                            }\n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                    </CRow>\n                  </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Workers\n"],"names":["useUsersContext","pretendents","setCountPretendent","useState","spec","setSpec","loading","setLoading","showTable","setShowTable","setText","useEffect","fetchData","console","log","className","lg","Suspense","fallback","color","sm","placeholder","onChange","e","target","value","style","textAlign","align","hover","responsive","width","map","item","index","accept","date","project","dateborn","workerFamily","workerName","fontSize","onClick","ind","prevShownTable","cursor","visible","worklist","rang","comment","phone"],"sourceRoot":""}