{"version":3,"file":"static/js/5638.8e96753e.chunk.js","mappings":"qRAkTA,UApRgB,WAEd,IAAeA,GAAYC,EAAAA,EAAAA,KAAnBC,MACUC,GAAeF,EAAAA,EAAAA,KAAzBG,SACUC,GAAUJ,EAAAA,EAAAA,KAApBK,SACUC,GAAUN,EAAAA,EAAAA,KAApBO,SAERC,GAA+BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAA+BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApCT,EAAQU,EAAA,GAAEC,EAAWD,EAAA,GAC5BE,GAAmCR,EAAAA,EAAAA,UAAS,IAAGS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAmCZ,EAAAA,EAAAA,UAAS,IAAGa,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA6BhB,EAAAA,EAAAA,WAAS,GAAKiB,GAAAf,EAAAA,EAAAA,GAAAc,EAAA,GAApCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,EAAcC,aAgHpB,OA3GAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,GAEbC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAK6B,OAF7CC,QAAQC,IAAI,qBAAsBzC,GAClCwC,QAAQC,IAAI,oBAAqBhD,GACjC+C,QAAQC,IAAI,qBAAsB7C,GAAWyC,EAAAE,KAAA,GAExBG,EAAAA,EAAAA,MAAgB,OAAjCT,EAAQI,EAAAM,KACZH,QAAQC,IAAI,aAAcR,GAE1BxC,EAAQmD,KAAI,SAACC,EAAQC,GAEnB,IAEMC,GAFQC,EAAAA,EAAAA,GAAOpD,GACLA,EAAWqD,WAAU,SAACC,GAAO,OAAKA,EAAQC,OAASN,EAAOO,MAAM,KAG5EC,EAAcrD,EAAMsD,MAAK,SAACC,GAAO,OAAKA,EAAQ1D,SAASyD,MAAK,SAAAE,GAAG,OAAIA,EAAIC,MAAkB,OAAVV,QAAU,IAAVA,OAAU,EAAVA,EAAYU,GAAE,GAAC,IAE5FC,EAAyB,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaM,MAC3BC,EAAyB,OAAXP,QAAW,IAAXA,GAAAA,EAAaQ,KAAkB,OAAXR,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,KAAO,GAEtDC,EAAWjB,EAAOkB,KAAKC,MAAM,KAC7BC,EAAI,IAAIC,KAAKJ,EAAS,IAC1BK,EAAOF,EAAEG,cACTC,EAAQC,OAAOL,EAAEM,WAAW,GAAGC,SAAS,EAAG,KAC3CC,EAAMH,OAAOL,EAAES,WAAWF,SAAS,EAAG,KACtCG,EAAe,GAAAC,OAAMH,EAAG,KAAAG,OAAIP,EAAK,KAAAO,OAAIT,GAEjCU,EAAgBhC,EAAOiC,KAAKC,SAAS,KAAOlC,EAAOiC,KAAKd,MAAM,OAAO,GAAKnB,EAAOiC,KAEjFE,EAAc/C,EAASgD,OACvBC,EAAYjD,EAASkD,QAAO,SAAAC,GAAE,OAAIA,EAAGC,WAAa9D,CAAW,IAC7D+D,EAAgBrD,EAASkD,QAAO,SAAAC,GAAE,OAAIA,EAAGC,WAAaxC,EAAOO,MAAM,IAEnEmC,EAAM9F,EAAQ0F,QAAO,SAAAC,GAAE,MAAmB,KAAfA,EAAGI,OAAc,IAClD1E,EAAcyE,GAEd,IAAME,EAAOhG,EAAQ0F,QAAO,SAAAC,GAAE,MAAmB,KAAfA,EAAGI,OAAc,IACnDtE,EAAcuE,GAEd,IAAMC,EAAS,CACbC,OAAQ9C,EAAO8C,OACfC,KAAM,CACJd,KAAMD,EACNgB,KAAK,EACLC,WAAY,cAEdC,MAAOlD,EAAOO,OACdS,KAAMD,EACNL,QAASG,GAA4B,GACrCsC,MAAiB,OAAVjD,QAAU,IAAVA,OAAU,EAAVA,EAAYiD,MACnBC,MAAO,CACLC,MAAOC,KAAKC,MAA6B,IAAvBd,EAAcL,QAAgBD,EAAcE,EAAUD,SACxEoB,OAAQ,gBAAkB1B,EAC1B2B,MAAO,WAETC,SAAU5B,GAGZjD,EAAW8E,KAAKd,EAClB,IAEMxD,EAAkB,GAAA0C,OAAIlD,GAAYyD,QAAO,SAACC,GAAE,OAAKA,EAAGW,QAAUxE,CAAW,IACzEY,GAAaa,EAAAA,EAAAA,GAAId,GAAiBuE,MAAK,SAACC,EAAGC,GACnD,OAAOA,EAAEV,MAAMC,MAAMQ,EAAET,MAAMC,KAC9B,IACG1D,QAAQC,IAAI,aAAcN,GAC1B5B,EAAY4B,GAEZyE,YAAW,WACTtF,GAAW,EACb,GAAG,QAAO,yBAAAe,EAAAwE,OAAA,GAAA7E,EAAA,KACX,kBAxEc,OAAAJ,EAAAkF,MAAA,KAAAC,UAAA,KA0EfpF,GAEF,GAAG,CAAClC,KAGJgC,EAAAA,EAAAA,YAAU,WACR,IAAMuF,EAAc,GAEdrF,EAAS,eAAAsF,GAAApF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAmF,IAAA,OAAApF,EAAAA,EAAAA,KAAAM,MAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,OAEhBzC,EAAM8C,IAAG,eAAAwE,GAAAvF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAsF,EAAOC,GAAO,IAAAC,EAAA,OAAAzF,EAAAA,EAAAA,KAAAM,MAAA,SAAAoF,GAAA,cAAAA,EAAAlF,KAAAkF,EAAAjF,MAAA,OAChBgF,EAAa,CACtB9D,GAAI6D,EAAQ7D,GACZqB,KAAMwC,EAAQ3D,MACd8D,MAAOH,EAAQI,WACVC,QAASL,EAAQM,aACjBC,IAAKP,EAAQO,IACb3E,QAASoE,EAAQpE,QACjBK,QAAS+D,EAAQ/D,SAEnByD,EAAYR,KAAKe,GAAW,wBAAAC,EAAAX,OAAA,GAAAQ,EAAA,KAC7B,gBAAAS,GAAA,OAAAV,EAAAN,MAAA,KAAAC,UAAA,EAXQ,IAaTrG,EAAYsG,GAAY,wBAAAG,EAAAN,OAAA,GAAAK,EAAA,KACzB,kBAhBc,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAkBfpF,GAEF,GAAE,CAAC7B,KAGDiI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,KACXJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gDAA+CC,SAAA,EAC5DC,EAAAA,EAAAA,KAACE,EAAAA,GAAS,KACVF,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,UAElCC,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CAACC,IAAE,EAAAL,UACVC,EAAAA,EAAAA,KAACK,EAAAA,SAAQ,CAACC,UAAUN,EAAAA,EAAAA,KAACO,EAAAA,GAAQ,CAACnC,MAAM,YAAa2B,UAEjDF,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAT,SAAA,EACAC,EAAAA,EAAAA,KAACS,EAAAA,EAAe,CAAChJ,MAAOF,EAAQwF,OAAO,EAAGlF,SAAUA,EAASkF,OAAQhF,SAAUD,EAAMiF,UAErFiD,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAAAX,UACHC,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACC,IAAE,EAAAb,UACNF,EAAAA,EAAAA,MAACgB,EAAAA,GAAK,CAACf,UAAU,OAAMC,SAAA,EACrBF,EAAAA,EAAAA,MAACiB,EAAAA,GAAW,CAAAf,SAAA,CAAC,sGAAoBxI,EAAQwF,OAAS,EAAE,QACpD8C,EAAAA,EAAAA,MAACkB,EAAAA,GAAS,CAAAhB,SAAA,EACRF,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CAAAX,SAAA,EACHC,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACC,GAAI,GAAII,GAAI,EAAGC,GAAI,EAAElB,UACzBF,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CAAAX,SAAA,EACHC,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACO,GAAI,EAAEnB,UACVF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0DAAyDC,SAAA,EACtEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SAAC,+EAC5CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SAAEpH,EAAWoE,eAGlDiD,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACO,GAAI,EAAEnB,UACVF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iEAAgEC,SAAA,EAC7EC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SAAC,6GAC5CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SAAEhH,EAAWgE,OAAO,eAM7D8C,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,GAAII,GAAI,EAAGC,GAAI,EAAElB,SAAA,EACzBF,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CAAAX,SAAA,EACHC,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACO,GAAI,EAAEnB,UACVF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kEAAiEC,SAAA,EAC9EC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SAAC,4DAC5CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SAAC,YAGtCC,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACO,GAAI,EAAEnB,UACVF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kEAAiEC,SAAA,EAC9EC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SAAC,0CAC5CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SAAC,eAKxCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAKpB3G,GAEC6G,EAAAA,EAAAA,KAACO,EAAAA,GAAQ,KAETV,EAAAA,EAAAA,MAACsB,EAAAA,GAAM,CAACC,MAAM,SAAStB,UAAU,cAAcuB,OAAK,EAACC,YAAU,EAAAvB,SAAA,EAC7DC,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CAACzB,UAAU,aAAYC,UAChCF,EAAAA,EAAAA,MAAC2B,EAAAA,GAAS,CAAAzB,SAAA,EACRC,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAACC,MAAO,CAACC,MAAO,QAAQ5B,SAAC,YAC1CC,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAAC3B,UAAU,cAAc4B,MAAO,CAACC,MAAO,SAAS5B,UAChEC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK,CAACC,KAAMC,EAAAA,OAEf9B,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAACC,MAAO,CAACC,MAAO,SAAS5B,SAAC,8EAC3CC,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAAC3B,UAAU,cAAc4B,MAAO,CAACC,MAAO,SAAS5B,SAAC,wEACnEC,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAAC3B,UAAU,cAAc4B,MAAO,CAACC,MAAO,SAAS5B,SAAC,gDACnEC,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAAC3B,UAAU,cAAc4B,MAAO,CAACC,MAAO,QAAQ5B,SAAC,oCAClEC,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAAC3B,UAAU,cAAc4B,MAAO,CAACC,MAAO,SAAS5B,SAAC,WACnEC,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAACC,MAAO,CAACC,MAAO,SAAS5B,SAAC,oFAC3CC,EAAAA,EAAAA,KAACyB,EAAAA,GAAgB,CAACC,MAAO,CAACC,MAAO,SAAS5B,SAAC,uEAI/CC,EAAAA,EAAAA,KAAC+B,EAAAA,GAAU,CAAAhC,SACR3H,EAASsC,KAAI,SAACsH,EAAMpH,GAAK,OACxBiF,EAAAA,EAAAA,MAAC2B,EAAAA,GAAS,CAAC,QAAM,qBAAoBzB,SAAA,EACnCC,EAAAA,EAAAA,KAACiC,EAAAA,GAAc,CAACnC,UAAU,cAAaC,SACpCnF,EAAM,KAEToF,EAAAA,EAAAA,KAACiC,EAAAA,GAAc,CAACnC,UAAU,cAAaC,UACnCC,EAAAA,EAAAA,KAACkC,EAAAA,GAAO,CAACC,KAAK,KAAKC,IAAKJ,EAAKvE,OApMlDnE,+BAoMkE0I,EAAKvE,OAAS4E,EAASC,IAAI,QAE5EzC,EAAAA,EAAAA,MAACoC,EAAAA,GAAc,CAAAlC,SAAA,EACbC,EAAAA,EAAAA,KAAA,OAAAD,SAAMiC,EAAKtE,KAAKd,QAChBoD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mCAKjBE,EAAAA,EAAAA,KAACiC,EAAAA,GAAc,CAACnC,UAAU,cAAaC,SACpCiC,EAAK3G,SAAU2E,EAAAA,EAAAA,KAAA,OAAAD,SAAMiC,EAAK3G,UAAiB,MAE9C2E,EAAAA,EAAAA,KAACiC,EAAAA,GAAc,CAACnC,UAAU,cAAaC,UACrCC,EAAAA,EAAAA,KAAA,OAAAD,SAAMiC,EAAKlE,WAEbkC,EAAAA,EAAAA,KAACiC,EAAAA,GAAc,CAACnC,UAAU,cAAaC,UACrCC,EAAAA,EAAAA,KAAA,OAAAD,SAAMiC,EAAKrG,UAEbqE,EAAAA,EAAAA,KAACiC,EAAAA,GAAc,CAACnC,UAAU,cAAaC,UACrCC,EAAAA,EAAAA,KAAA,OAAAD,SAAMiC,EAAKnE,WAEbgC,EAAAA,EAAAA,MAACoC,EAAAA,GAAc,CAAAlC,SAAA,EACbF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,CAASiC,EAAKjE,MAAMC,MAAM,UAE5BgC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,uBAAsBC,SAAEiC,EAAKjE,MAAMI,eAGxD6B,EAAAA,EAAAA,KAACuC,EAAAA,GAAS,CAACC,MAAI,EAACpE,MAAO4D,EAAKjE,MAAMK,MAAOJ,MAAOgE,EAAKjE,MAAMC,YAE7D6B,EAAAA,EAAAA,MAACoC,EAAAA,GAAc,CAAAlC,SAAA,EACbC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SAAC,qFAC5CC,EAAAA,EAAAA,KAAA,UAAAD,SAASiC,EAAK3D,gBAvCyBzD,EAkD/B,6BAelCoF,EAAAA,EAAAA,KAACyC,EAAAA,GAAS,SAIlB,C","sources":["pages/Renthub.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { CContainer, CSpinner } from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport {\n  CAvatar,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilPeople,\n} from '@coreui/icons'\n\nimport avatar2 from 'src/assets/images/avatars/blank-avatar.png'\n\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { getAllMessages } from './../http/chatAPI.js'\n\nimport WidgetsDropdown from '../views/widgets/WidgetsDropdown2'\n\nconst Renthub = () => {\n\n  const { users: clients } = useUsersContext();\n  const { managers: zakazchiki } = useUsersContext();\n  const { projects: projs } = useUsersContext();\n  const { companys: comps } = useUsersContext();\n\n  const [contacts, setContacts]= useState([]);\n  const [projects, setProjects]= useState([]);\n  const [newClients, setNewClients]= useState([]);\n  const [oldClients, setOldClients]= useState([]);\n  const [loading, setLoading]= useState(true);\n\n  const chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID\n  const host = process.env.REACT_APP_API_URL\n  \n\n  //get Contacts\n  useEffect(() => {\n    const arrClients = []\n\n    const fetchData = async() => {\n\n      //let companys = await getCompanys()\n      console.log(\"companys (admin): \", comps)\n      console.log(\"clients (admin): \", clients)\n      console.log(\"managers (admin): \", zakazchiki)\n\n      let messages = await getAllMessages()\n      console.log(\"messages: \", messages)\n\n      clients.map((client, index) => {\n        \n        const managers = [...zakazchiki];\n        let userIndex = zakazchiki.findIndex((manager) => manager.tgID === client.chatId);  \n        const userObject = managers[userIndex];\n\n        let userObject2 = comps.find((company) => company.managers.find(man => man.id ===  userObject?.id)) //company.managers.map((manager) => manager.id === userObject?.id));  \n\n        const companyName = userObject2?.title\n        const companyCity = userObject2?.city ? userObject2?.city : ''\n\n        const lastDate = client.date.split('T')\n        const d = new Date(lastDate[0]);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst newDateActivity = `${day}.${month}.${year}`\n\n        const newClientName = client.name.includes(\"|\") ? client.name.split(\" | \")[1] : client.name\n\n        const allMessages = messages.length //всего сообщений\n        const fromAdmin = messages.filter(el => el.senderId === chatAdminId);\n        const messagesUsers = messages.filter(el => el.senderId === client.chatId);\n\n        const arr = clients.filter(el => el.message === '');\n        setNewClients(arr)\n\n        const arr2 = clients.filter(el => el.message !== '');\n        setOldClients(arr2)\n        \n        const newObj = {\n          avatar: client.avatar,\n          user: {\n            name: newClientName,\n            new: true,\n            registered: '01.01.2023',\n          },\n          TG_ID: client.chatId,\n          city: companyCity,\n          company: companyName ? companyName : '',\n          phone: userObject?.phone,\n          usage: {\n            value: Math.round(messagesUsers.length * 100 / (allMessages - fromAdmin.length)), \n            period: '01.04.2023 - ' + newDateActivity,\n            color: 'success',\n          },\n          activity: newDateActivity,\n        }\n\n        arrClients.push(newObj)\n      })\n\n      const filteredClients = [...arrClients].filter((el) => el.TG_ID !== chatAdminId); //без админского пользователя  \n      const clientSort = [...filteredClients].sort((a, b) => {       \n\t\t\t\treturn b.usage.value-a.usage.value  //сортировка по убывающей активности  \n\t\t\t}) \n      console.log('userbots: ', clientSort)  \n      setContacts(clientSort)  \n      \n      setTimeout(() => {\n        setLoading(false)\n      }, \"6000\")\n    }\n    \n    fetchData();\n    \n  }, [clients]);\n//---------------------------------------------------------------------------------------------\n//get Projects\n  useEffect(() => {\n    const arrProjects = []\n\n    const fetchData = async () => {\n\t\t\t//let response = await getProjects();\n      projs.map(async (project) => {\n        const newProject = {\n\t\t\t\t\tid: project.id,\n\t\t\t\t\tname: project.title,\n\t\t\t\t\tstart: project.time_start,\n          created: project.time_created,\n          teh: project.teh,\n          manager: project.manager,\n          company: project.company,\n\t\t\t\t}\n        arrProjects.push(newProject)\n      })\n\n      setProjects(arrProjects) \n    }\n\n    fetchData();\n    \n  },[projs])\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n\n                <>\n                <WidgetsDropdown users={clients.length-1} projects={projects.length} companys={comps.length} />\n\n                <CRow>\n                  <CCol xs>\n                    <CCard className=\"mb-4\">\n                      <CCardHeader>Пользователи бота ({clients.length - 1})</CCardHeader>\n                      <CCardBody>\n                        <CRow>\n                          <CCol xs={12} md={6} xl={6}>\n                            <CRow>\n                              <CCol sm={6}>\n                                <div className=\"border-start border-start-4 border-start-info py-1 px-3\">\n                                  <div className=\"text-medium-emphasis small\">Новые клиенты</div>\n                                  <div className=\"fs-5 fw-semibold\">{newClients.length}</div>\n                                </div>\n                              </CCol>\n                              <CCol sm={6}>\n                                <div className=\"border-start border-start-4 border-start-danger py-1 px-3 mb-3\">\n                                  <div className=\"text-medium-emphasis small\">Постоянные клиенты</div>\n                                  <div className=\"fs-5 fw-semibold\">{oldClients.length-1}</div>\n                                </div>\n                              </CCol>\n                            </CRow>\n                          </CCol>\n\n                          <CCol xs={12} md={6} xl={6}>\n                            <CRow>\n                              <CCol sm={6}>\n                                <div className=\"border-start border-start-4 border-start-warning py-1 px-3 mb-3\">\n                                  <div className=\"text-medium-emphasis small\">Просмотры</div>\n                                  <div className=\"fs-5 fw-semibold\">-</div>\n                                </div>\n                              </CCol>\n                              <CCol sm={6}>\n                                <div className=\"border-start border-start-4 border-start-success py-1 px-3 mb-3\">\n                                  <div className=\"text-medium-emphasis small\">Другое</div>\n                                  <div className=\"fs-5 fw-semibold\">-</div>\n                                </div>\n                              </CCol>\n                            </CRow>\n\n                            <div className=\"mb-5\"></div>\n\n                          </CCol>\n                        </CRow>\n\n                      {loading ? \n                                  \n                        <CSpinner/> :\n\n                        <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                          <CTableHead className='table-dark'>\n                            <CTableRow>\n                              <CTableHeaderCell style={{width: '30px'}}>№</CTableHeaderCell>\n                              <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>\n                                <CIcon icon={cilPeople} />\n                              </CTableHeaderCell>\n                              <CTableHeaderCell style={{width: '160px'}}>Пользователь</CTableHeaderCell>                             \n                              <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>Организация</CTableHeaderCell>\n                              <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>Телефон</CTableHeaderCell>\n                              <CTableHeaderCell className=\"text-center\" style={{width: '80px'}}>Город</CTableHeaderCell>\n                              <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>TG ID</CTableHeaderCell>\n                              <CTableHeaderCell style={{width: '100px'}}>Использование</CTableHeaderCell>\n                              <CTableHeaderCell style={{width: '100px'}}>Активность</CTableHeaderCell>\n                              {/* <CTableHeaderCell>Управление</CTableHeaderCell> */}\n                            </CTableRow>\n                          </CTableHead>\n                          <CTableBody>\n                            {contacts.map((item, index) => (\n                              <CTableRow v-for=\"item in tableItems\" key={index}>\n                                <CTableDataCell className=\"text-center\">\n                                  {index+1}\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                    <CAvatar size=\"md\" src={item.avatar ? host + item.avatar : avatar2} alt='' />\n                                </CTableDataCell>\n                                <CTableDataCell>\n                                  <div>{item.user.name}</div>\n                                  <div className=\"small text-medium-emphasis\">\n                                    {/* <span>{item.user.new ? 'Новый' : 'Recurring'}</span> | Регистрация:{' '}\n                                    {item.user.registered} */}\n                                  </div>\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                  {item.company ? <div>{item.company}</div> : ''}\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                  <div>{item.phone}</div>\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                  <div>{item.city}</div>\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                  <div>{item.TG_ID}</div>\n                                </CTableDataCell>\n                                <CTableDataCell>\n                                  <div className=\"clearfix\">\n                                    <div className=\"float-start\">\n                                      <strong>{item.usage.value}%</strong>\n                                    </div>\n                                    <div className=\"float-end\">\n                                      <small className=\"text-medium-emphasis\">{item.usage.period}</small>\n                                    </div>\n                                  </div>\n                                  <CProgress thin color={item.usage.color} value={item.usage.value} />\n                                </CTableDataCell>\n                                <CTableDataCell>\n                                  <div className=\"small text-medium-emphasis\">Последний вход</div>\n                                  <strong>{item.activity}</strong>\n                                </CTableDataCell>\n                                {/* <CTableDataCell>\n                                  <CButton color=\"light\">\n                                    <img src={pencilIcon} alt='' width='15px'/>\n                                  </CButton>\n                                  &nbsp;\n                                  <CButton color=\"light\">\n                                    <img src={deleteIcon} alt='' width='10px' />\n                                  </CButton>\n                                </CTableDataCell> */}\n                              </CTableRow>\n                            ))}\n                          </CTableBody>\n                        </CTable>\n                      }\n                      </CCardBody>\n                    </CCard>\n                  </CCol>\n                </CRow>\n              </>\n\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Renthub\n"],"names":["clients","useUsersContext","users","zakazchiki","managers","projs","projects","comps","companys","_useState","useState","_useState2","_slicedToArray","contacts","setContacts","_useState3","_useState4","setProjects","_useState5","_useState6","newClients","setNewClients","_useState7","_useState8","oldClients","setOldClients","_useState9","_useState10","loading","setLoading","chatAdminId","process","useEffect","arrClients","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","messages","filteredClients","clientSort","wrap","_context","prev","next","console","log","getAllMessages","sent","map","client","index","userObject","_toConsumableArray","findIndex","manager","tgID","chatId","userObject2","find","company","man","id","companyName","title","companyCity","city","lastDate","date","split","d","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","newDateActivity","concat","newClientName","name","includes","allMessages","length","fromAdmin","filter","el","senderId","messagesUsers","arr","message","arr2","newObj","avatar","user","new","registered","TG_ID","phone","usage","value","Math","round","period","color","activity","push","sort","a","b","setTimeout","stop","apply","arguments","arrProjects","_ref2","_callee3","_context3","_ref3","_callee2","project","newProject","_context2","start","time_start","created","time_created","teh","_x","_jsxs","className","children","_jsx","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","_Fragment","WidgetsDropdown","CRow","CCol","xs","CCard","CCardHeader","CCardBody","md","xl","sm","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","style","width","CIcon","icon","cilPeople","CTableBody","item","CTableDataCell","CAvatar","size","src","avatar2","alt","CProgress","thin","AppFooter"],"sourceRoot":""}