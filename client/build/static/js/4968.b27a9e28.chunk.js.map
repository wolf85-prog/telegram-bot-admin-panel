{"version":3,"file":"static/js/4968.b27a9e28.chunk.js","mappings":"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","sources":["assets/images/arrowDown.svg","pages/Workers2.js"],"sourcesContent":["var _metadata, _g;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgArrowDown(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 256 256\",\n    enableBackground: \"new 0 0 256 256\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _metadata || (_metadata = /*#__PURE__*/React.createElement(\"metadata\", null, \" Svg Vector Icons : http://www.onlinewebfonts.com/icon \")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000000\",\n    d: \"M128,10C62.9,10,10,62.9,10,128c0,65.1,52.9,118,118,118c65.1,0,118-52.9,118-118C246,62.9,193.1,10,128,10z M173.8,148.4l-37,31.4c-2.5,2.1-5.6,3.2-8.7,3.2s-6.2-1.1-8.7-3.2l-37-31.4c-5.7-4.8-6.4-13.3-1.5-19c4.8-5.7,13.3-6.4,19-1.5l14.9,12.6V86.4c0-7.4,6-13.5,13.5-13.5s13.5,6,13.5,13.5v54.2l14.9-12.6c5.7-4.8,14.2-4.1,19,1.5C180.1,135.1,179.4,143.6,173.8,148.4z\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowDown);\nexport default __webpack_public_path__ + \"static/media/arrowDown.4f7021c2d42a26d0369da8983c53315a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { Suspense, useEffect, useState } from 'react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport DataTable, { createTheme } from 'react-data-table-component';\nimport { \n  CContainer, \n  CSpinner, \n  CCol,\n  CRow,\n  CFormInput,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CCard,\n  CCardBody,\n  CCollapse,\n  CButton, \n  CTooltip,\n} from '@coreui/react'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\n\nimport arrowDown from '../assets/images/arrowDown.svg'\n\nimport { getAllPretendent, getAllPretendentCount, getWorkers, getWorkersNotion100, getWorkersNotion, getWorkerNotionId, getCanceled} from '../http/workerAPI'\n\nimport {getProjects, newCountMessagePretendent} from '../http/adminAPI'\n\n\n//Workers.js\nconst Workers = () => {\n\n  const { setCountPretendent, pretendents, setPretendents } = useUsersContext();\n\n  const [projects, setProjects] = useState([]); \n  const [spec, setSpec] = useState([]); \n\n  const [pending, setPending] = useState(true);  \n\n  const [loading, setLoading]= useState(true);\n\n  const [showTable, setShowTable] = useState([])\n  const [showComment, setShowComment] = useState([])\n\n  const [text, setText]= useState(\"\");\n\n  const [countWorker, setCountWorker] = useState(0);  \n  const [countWorkerNew, setCountWorkerNew] = useState(0); \n\n  const [loadingCount, setLoadingCount] = useState(false); \n\n    //поиск\n  useEffect(() => {\n    //let cancels = getCanceled();\n\t\tconst filteredData = spec.filter(user=> (user.tgId + user.crmId)?.replace(/[её]/g, '(е|ё)').toLowerCase().includes(text.replace(/[её]/g, '(е|ё)').toLowerCase()));\n    setSpec(text === '' ? spec : filteredData) \n  }, [text]);\n\n\n  //-----------------------------------------------------------------------------------------\n  //\t\t\tget pretendents\n  //-----------------------------------------------------------------------------------------\n  useEffect(() => {\n    const arrWorkers = []\n\n    setCountPretendent(0)\n    //await newCountMessagePretendent(0)\n\n    const fetchData = async () => {\n\n      let workers = await getWorkers()\n      //console.log(\"workers context: \", workers)\n\n      let projects = await getProjects();\n      //console.log(\"projects: \", projects)\n\n      let cancels = await getCanceled();\n      //console.log(\"cancels: \", cancels)\n\n      cancels.map(async (worker, i) => {\n        console.log(worker)\n        let userObject = projects.find((proj) => proj.id === worker.projectId);  \n        const projectName = userObject?.title\n        const crmId = userObject?.crmID\n\n        let workerObject = workers.find((item) => item.chatId === worker.receiverId);  \n        const workerName = workerObject?.userfamily + \" \"+ workerObject?.username\n\n        const status = worker.cancel\n\n        const d = new Date(worker.createdAt).getTime() //+ 10800000 //Текущая дата:  + 3 часа)\n        const d2 = new Date(d)\n\n        const month = String(d2.getMonth()+1).padStart(2, \"0\");\n        const day = String(d2.getDate()).padStart(2, \"0\");\n        const chas = d2.getHours();\n        const min = String(d2.getMinutes()).padStart(2, \"0\");\n        \n        const newDate = `${day}.${month} ${chas}:${min}`;\n\n\n\n        const d3 = new Date(worker.updatedAt).getTime() //+ 10800000 //Текущая дата:  + 3 часа)\n        const d4 = new Date(d3)\n\n        const month2 = String(d4.getMonth()+1).padStart(2, \"0\");\n        const day2 = String(d4.getDate()).padStart(2, \"0\");\n        const chas2 = d4.getHours();\n        const min2 = String(d4.getMinutes()).padStart(2, \"0\");\n        const updateDate = `${day2}.${month2} ${chas2}:${min2}`;\n\n        let startDate = ''\n        if (worker.datestart) {\n          const d5 = new Date(worker.datestart).getTime() //+ 10800000 //Текущая дата:  + 3 часа)\n          const d6 = new Date(d5)\n\n          const month3 = String(d6.getMonth()+1).padStart(2, \"0\");\n          const day3 = String(d6.getDate()).padStart(2, \"0\");\n          const chas3 = d6.getHours();\n          const min3 = String(d6.getMinutes()).padStart(2, \"0\");\n          startDate = `${day3}.${month3} ${chas3}:${min3}`;\n        }\n\n        let endDate = ''\n        if (worker.dateend) {\n          const d7 = new Date(worker.dateend).getTime() //+ 10800000 //Текущая дата:  + 3 часа)\n          const d8 = new Date(d7)\n\n          const month4 = String(d8.getMonth()+1).padStart(2, \"0\");\n          const day4 = String(d8.getDate()).padStart(2, \"0\");\n          const chas4 = d8.getHours();\n          const min4 = String(d8.getMinutes()).padStart(2, \"0\");\n          endDate = `${day4}.${month4} ${chas4}:${min4}`;\n        }\n        \n\n      \n        //worklist\n        const newWorker = {\n          id: worker.id,\n          workerId: worker.workerId,\n          date: newDate, \n          projectId: worker.projectId,\n          project: projectName,\n          crmId: crmId,\n          workerFamily: workerObject?.userfamily,\n          workerName: workerObject?.username,\n          tgId: worker.receiverId, \n          status: status,  \n          accept: worker.accept,\n          updatedAt: updateDate,\n          datestart: startDate,\n          dateend: endDate,\n        }\n        arrWorkers.push(newWorker)\n\n        setSpec(arrWorkers) \n\n      })  \n      setLoading(false)\n      //setLoadingCount(false)\n    }\n\n    fetchData();\n    \n  },[])\n\n\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                    {/* <h2>Претенденты</h2> */}\n                    \n                    <CRow className=\"mb-3\">\n                      <CCol sm={3} >\n                        <CFormInput placeholder=\"Поиск...\" onChange={(e)=>setText(e.target.value)} aria-label=\"spec\"/>\n                      </CCol>\n                    </CRow>\n\n                    <CRow>\n                      <CCol style={{textAlign: 'center'}}>\n                        <CCard className=\"mb-4\"> \n                            <CCardBody>\n                              {loading ? \n                                      \n                                <CSpinner/> :\n\n                                <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                  <CTableHead className='table-light'>\n                                    <CTableRow>\n                                      <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>№</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '200px'}}>Дата</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '320px'}}>Проект</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '320px'}}>CRM ID</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '370px'}}>ФИО</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>TelegramId</CTableHeaderCell>  \n                                      <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>Статус</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>Обновлено</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>Start</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>End</CTableHeaderCell>\n                                    </CTableRow>\n                                  </CTableHead>\n                                  <CTableBody>                                  \n                                    {spec.length > 0 && spec.map((item, index) => (\n                                      <CTableRow v-for=\"item in tableItems\" key={index}>\n                                        <CTableDataCell className=\"text-center\">\n                                          {item.id}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && \"red\"}}>\n                                          {item.date}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && \"red\"}}>\n                                          <CTooltip\n                                              content={item.projectId}\n                                              placement=\"top\"\n                                            >\n                                              <div>{item.project}</div>\n                                          </CTooltip>\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && \"red\"}}>\n                                          <div>{item.crmId}</div>\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.dateborn >= 2005 || item.accept ? 'red' : ''}}>\n                                          <CTooltip\n                                            content={item.workerId}\n                                            placement=\"top\"\n                                          > \n                                            <div>{item.workerFamily + \" \" + item.workerName}</div>\n                                          </CTooltip>\n                                        </CTableDataCell>\n                                        <CTableDataCell style={{fontSize: '13px', textAlign: 'left'}}>\n                                          {item.tgId}\n                                          \n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && 'red'}}>\n                                          {item.status === true ? 'Отказано' : ''}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && 'red'}}>\n                                          {item.updatedAt}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && \"red\"}}>\n                                          {item.datestart}\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" style={{color: item.accept && \"red\"}}>\n                                          {item.dateend}\n                                        </CTableDataCell>\n                                      </CTableRow>\n                                      ))\n                                    }\n                                </CTableBody>                   \n                                </CTable>\n                              }\n\n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                    </CRow>\n                  </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Workers\n"],"names":["Workers","setCountPretendent","pretendents","setPretendents","useUsersContext","projects","setProjects","useState","spec","setSpec","pending","setPending","loading","setLoading","showTable","setShowTable","showComment","setShowComment","text","setText","countWorker","setCountWorker","countWorkerNew","setCountWorkerNew","loadingCount","setLoadingCount","useEffect","filteredData","filter","user","_ref","tgId","crmId","replace","toLowerCase","includes","arrWorkers","async","workers","getWorkers","getProjects","getCanceled","map","worker","i","console","log","userObject","find","proj","id","projectId","projectName","title","crmID","workerObject","item","chatId","receiverId","userfamily","username","status","cancel","d","Date","createdAt","getTime","d2","month","String","getMonth","padStart","newDate","getDate","getHours","getMinutes","d3","updatedAt","d4","month2","updateDate","startDate","datestart","d5","d6","month3","endDate","dateend","d7","d8","month4","newWorker","workerId","date","project","workerFamily","workerName","accept","push","fetchData","_jsxs","className","children","_jsx","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","color","CRow","CCol","sm","CFormInput","placeholder","onChange","e","target","value","style","textAlign","CCard","CCardBody","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","width","CTableBody","length","index","CTableDataCell","CTooltip","content","placement","dateborn","fontSize","AppFooter"],"sourceRoot":""}