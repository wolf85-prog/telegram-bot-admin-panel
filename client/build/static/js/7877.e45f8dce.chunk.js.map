{"version":3,"file":"static/js/7877.e45f8dce.chunk.js","mappings":"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","sources":["pages/DistributionW.js"],"sourcesContent":["import React, { Suspense, useState, useEffect, useRef } from 'react'\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CToast,\n  CToastBody,\n  CToaster,\n  CToastClose\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport editIcon from 'src/assets/images/pencil.png'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\nimport { delDistributionW, getPlan, newPlan } from 'src/http/adminAPI';\n\nconst DistributionW = () => {\n  const { distributionsWork: messages, addNewDistrib } = useUsersContext();\n  const [distributionsWork, setDistributionsWork]= useState([]);\n  const [loading, setLoading]= useState(true);\n  const [proj, setProj] = useState('');\n  const [seconds, setSeconds] = useState(1);\n\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n\n  const exampleToast = (\n    <CToast autohide={true} visible={true} color=\"success\" className=\"text-white align-items-center\">\n      <div className=\"d-flex\">\n        <CToastBody>Рассылка успешно удалена!</CToastBody>\n        <CToastClose className=\"me-2 m-auto\" white />\n      </div>\n    </CToast>\n  )\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n\n      const arrDitributions = []\n      messages.map((distrib, index) => {\n        const d = new Date(distrib.datestart);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year}`\n        const newTimeMessage = `${chas}:${minut}`\n\n        let space = /,/gi;\n\n        const newDistribution = {\n          id: distrib.id,\n          text: distrib.text,\n          image: distrib.image !=='' ? distrib.image : '',\n          project: distrib.project,\n          projectId: distrib.projectId ? distrib.projectId : '',\n          receivers: distrib.receivers.replace(space, '<br/>'), //strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n          categories: distrib.receivers,\n          count: distrib.count,\n          datestart: newDateMessage,\n          timestart: newTimeMessage,\n          status: distrib.delivered ? \"отправлено\" : \"запланировано\",\n          uuid: distrib.uuid,\n          success: distrib.success,\n\t\t\t\t}\n        arrDitributions.push(newDistribution)\n      })\n\n      //console.log(\"arrDitributions: \", arrDitributions)\n\n      setDistributionsWork(arrDitributions) \n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[messages])\n\n  //обновление списка рассылок\n  useEffect(() => {\n    const timer = setInterval(() => {\n      //setSeconds(seconds => seconds + 5);\n      addNewDistrib(true)\n    }, 10000);\n    \n    // очистка интервала\n    return () => clearInterval(timer);\n  });\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    addToast(exampleToast) //ваша рассылка удалена\n    \n    setDistributionsWork(distributionsWork.filter(p => p.id !== desk.id))\n    \n    //удаление сообщения в базе данных\n    await delDistributionW(desk.id)  \n\n    //удаление проекта из планировщика\n    //обновить план в БД\n    let plan = await getPlan(desk.datestart);\n    const newArray = JSON.parse(plan.times)\n\n    let dateIndex = newArray.findIndex((i) => i.time === desk.timestart)\n    const datesCopy = JSON.parse(JSON.stringify(newArray));\n    const dateObject = datesCopy[dateIndex];\n    datesCopy[dateIndex] = { ...dateObject, ['proj']: '', ['save']: false};\n    let planer_str = JSON.stringify(datesCopy)\n\n    const newObj = {\n      \"datestart\": desk.datestart,\n      \"times\": planer_str\n    }\n\n    await newPlan(newObj)\n  }\n\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Рассылки</h2>\n                      <Link to={'/distributionw_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <CToaster ref={toaster} push={toast} placement=\"top-end\" /> \n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardHeader>Рассылки для специалистов</CCardHeader>\n                            <CCardBody>\n                              <br /> \n\n                            {loading ? \n                                  \n                              <CSpinner/> :\n\n                              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                <CTableHead className='table-dark'>\n                                  <CTableRow>\n                                    <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Время</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Название проекта</CTableHeaderCell>\n                                    {/* <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell> */}\n                                    <CTableHeaderCell className=\"text-center\">Категория</CTableHeaderCell> \n                                    <CTableHeaderCell className=\"text-center\">Получатели</CTableHeaderCell>    \n                                    <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                  </CTableRow>\n                                </CTableHead>\n                                <CTableBody>\n                                  {distributionsWork.map((item, index) => (\n                                    <CTableRow v-for=\"item in tableItems\" key={index} style={{height: '130px'}}>\n                                      {/* <CTableDataCell>\n                                        <div>{index+1}</div>\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.datestart}</div>\n                                      </CTableDataCell>  \n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.timestart}</div>\n                                      </CTableDataCell>  \n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.project}</div>\n                                      </CTableDataCell>    \n                                      {/* <CTableDataCell className=\"text-center\">\n                                        {item.image.endsWith('.pdf') ?\n                                        <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                        : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                        }\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\">\n                                        <div dangerouslySetInnerHTML={{__html: item.receivers}} />\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {\n                                          item.status === 'запланировано' ? \n                                          <div style={{color: '#3887cd'}}>{item.count}</div>\n                                          :<div>{item.count} | {item.success ? item.success : \"\"}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {\n                                          item.status === 'запланировано' ? \n                                          <div style={{color: '#3887cd'}}>{item.status}</div>\n                                          :<div style={{color: '#f5f114'}}>{item.status}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {/* <Link to={'/distributionw_planer'} state={{ project: proj}}>\n                                          <CButton color=\"light\" style={{marginRight: '10px'}}>\n                                            <img src={editIcon} alt='' width='10px' />\n                                          </CButton>\n                                        </Link> */}\n\n                                        {item.projectId ? \n                                          <Link to={'/distributionw_add'} state={{ project: item.projectId, id: item.id, category: item.categories, img: item.image, date: item.datestart, uuid: item.uuid}}><CButton color=\"light\" style={{marginRight: '10px'}}><img src={editIcon} alt='' width='10px' /></CButton></Link>\n                                          :<Link to={''} state={{ project: `${proj}`, }}><CButton color=\"light\" style={{marginRight: '10px'}}><img src={editIcon} alt='' width='10px' /></CButton></Link>\n                                        }\n                                        \n                                        <CButton color=\"light\" onClick={() => removeDescription(item)}>\n                                          <img src={deleteIcon} alt='' width='10px' />\n                                        </CButton>\n\n                                      </CTableDataCell>\n                                    </CTableRow>\n                                  ))}\n                                </CTableBody>\n                              </CTable>\n                            }                              \n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionW\n"],"names":["_useUsersContext","useUsersContext","messages","distributionsWork","addNewDistrib","_useState","useState","_useState2","_slicedToArray","setDistributionsWork","_useState3","_useState4","loading","setLoading","_useState5","_useState6","proj","_useState7","_useState8","_useState9","_useState10","toast","addToast","toaster","useRef","exampleToast","_jsx","CToast","autohide","visible","color","className","children","_jsxs","CToastBody","CToastClose","white","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","arrDitributions","wrap","_context","prev","next","map","distrib","index","d","Date","datestart","year","getFullYear","month","String","getMonth","padStart","day","getDate","chas","getHours","minut","getMinutes","newDateMessage","concat","newTimeMessage","newDistribution","id","text","image","project","projectId","receivers","replace","categories","count","timestart","status","delivered","uuid","success","push","stop","apply","arguments","timer","setInterval","clearInterval","removeDescription","_ref2","_callee2","desk","_objectSpread2","plan","newArray","dateIndex","datesCopy","dateObject","planer_str","newObj","_context2","filter","p","delDistributionW","getPlan","sent","JSON","parse","times","findIndex","i","time","stringify","_objectSpread","_defineProperty","newPlan","_x","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","_Fragment","Link","to","CButton","size","CToaster","ref","placement","CRow","CCol","xs","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","item","style","height","CTableDataCell","width","dangerouslySetInnerHTML","__html","state","category","img","date","marginRight","src","editIcon","alt","onClick","deleteIcon","AppFooter"],"sourceRoot":""}