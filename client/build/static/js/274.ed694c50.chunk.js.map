{"version":3,"file":"static/js/274.ed694c50.chunk.js","mappings":"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","sources":["pages/DistributionW.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport editIcon from 'src/assets/images/pencil.png'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\nimport { delDistributionW } from 'src/http/adminAPI';\n\nconst DistributionW = () => {\n  const { distributionsWork: messages } = useUsersContext();\n  const [distributionsWork, setDistributionsWork]= useState([]);\n  const [loading, setLoading]= useState(true);\n  const [proj, setProj] = useState('');\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n\t\t\t//let response = await getDistributions();\n      console.log(\"distributionsW: \", messages)\n\n      let strReceivers = ''\n\n      const arrDitributions = []\n      messages.map((distrib, index) => {\n        // JSON.parse(distrib.receivers).map((receiver)=>{\n        //   strReceivers = receiver.label + ' '\n        // })\n\n        const d = new Date(distrib.createdAt);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year}`\n        const newTimeMessage = `${chas}:${minut}`\n\n        let space = /,/gi;\n        //var newStr = str.replace(space, '<br>');\n\n        const newDistribution = {\n          id: distrib.id,\n          text: distrib.text,\n          image: distrib.image.split('5000/')[1] !=='' ? distrib.image : '',\n          project: distrib.project,\n          projectId: distrib.projectId ? distrib.projectId : '',\n          receivers: distrib.receivers.replace(space, '<br/>'), //strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n          count: distrib.count,\n          datestart: newDateMessage,\n          timestart: newTimeMessage,\n          status: distrib.delivered ? \"отправлено\" : \"запланировано\",\n\t\t\t\t}\n        //console.log(index)\n        arrDitributions.push(newDistribution)\n      })\n\n      console.log(\"arrDitributions: \", arrDitributions)\n\n      setDistributionsWork(arrDitributions) \n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[messages])\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    setDistributionsWork(distributionsWork.filter(p => p.id !== desk.id))\n    //удаление сообщения в базе данных\n    await delDistributionW(desk.id)\n  }\n\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Рассылки</h2>\n                      <Link to={'/distributionw_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardHeader>Рассылки для специалистов</CCardHeader>\n                            <CCardBody>\n\n                              <br /> \n\n                            {loading ? \n                                  \n                              <CSpinner/> :\n\n                              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                <CTableHead className='table-dark'>\n                                  <CTableRow>\n                                    <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Время</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Название проекта</CTableHeaderCell>\n                                    {/* <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell> */}\n                                    <CTableHeaderCell className=\"text-center\">Категория</CTableHeaderCell> \n                                    <CTableHeaderCell className=\"text-center\">Получатели</CTableHeaderCell>    \n                                    <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                  </CTableRow>\n                                </CTableHead>\n                                <CTableBody>\n                                  {distributionsWork.map((item, index) => (\n                                    <CTableRow v-for=\"item in tableItems\" key={index} style={{height: '130px'}}>\n                                      {/* <CTableDataCell>\n                                        <div>{index+1}</div>\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.datestart}</div>\n                                      </CTableDataCell>  \n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.timestart}</div>\n                                      </CTableDataCell>  \n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.project}</div>\n                                      </CTableDataCell>    \n                                      {/* <CTableDataCell className=\"text-center\">\n                                        {item.image.endsWith('.pdf') ?\n                                        <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                        : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                        }\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\">\n                                        <div dangerouslySetInnerHTML={{__html: item.receivers}} />\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {\n                                          item.status === 'запланировано' ? \n                                          <div style={{color: '#3887cd'}}>{item.count}</div>\n                                          :<div>{item.count}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {\n                                          item.status === 'запланировано' ? \n                                          <div style={{color: '#3887cd'}}>{item.status}</div>\n                                          :<div>{item.status}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        {/* <Link to={'/distributionw_planer'} state={{ project: proj}}>\n                                          <CButton color=\"light\" style={{marginRight: '10px'}}>\n                                            <img src={editIcon} alt='' width='10px' />\n                                          </CButton>\n                                        </Link> */}\n\n                                        {item.projectId ? \n                                          <Link to={'/distributionw_add'} state={{ project: item.projectId}}><CButton color=\"light\" style={{marginRight: '10px'}}><img src={editIcon} alt='' width='10px' /></CButton></Link>\n                                          :<Link to={''} state={{ project: `${proj}`, }}><CButton color=\"light\" style={{marginRight: '10px'}}><img src={editIcon} alt='' width='10px' /></CButton></Link>}\n                                        \n                                        <CButton color=\"light\" onClick={() => removeDescription(item)}>\n                                          <img src={deleteIcon} alt='' width='10px' />\n                                        </CButton>\n                                      </CTableDataCell>\n                                    </CTableRow>\n                                  ))}\n                                </CTableBody>\n                              </CTable>\n                            }                              \n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionW\n"],"names":["messages","useUsersContext","distributionsWork","useState","setDistributionsWork","loading","setLoading","proj","useEffect","fetchData","console","log","arrDitributions","map","distrib","index","d","Date","createdAt","year","getFullYear","month","String","getMonth","padStart","day","getDate","chas","getHours","minut","getMinutes","newDateMessage","newTimeMessage","newDistribution","id","text","image","split","project","projectId","receivers","replace","count","datestart","timestart","status","delivered","push","removeDescription","desk","filter","p","delDistributionW","className","lg","Suspense","fallback","color","to","size","xs","align","hover","responsive","item","style","height","width","dangerouslySetInnerHTML","__html","state","marginRight","src","editIcon","alt","onClick","deleteIcon"],"sourceRoot":""}