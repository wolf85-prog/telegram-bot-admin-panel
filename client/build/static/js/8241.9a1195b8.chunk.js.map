{"version":3,"file":"static/js/8241.9a1195b8.chunk.js","mappings":"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","sources":["chat-app-new/components/Sidebar/Contact.jsx","chat-app-new/components/Sidebar/index.jsx","chat-app-new/pages/Chat/components/EmojiTray.jsx","chat-app-new/pages/Chat/components/useAutosizeTextArea.ts","chat-app-new/pages/Chat/components/ChatInput.jsx","chat-app-new/pages/Chat/components/Header.jsx","chat-app-new/pages/Chat/components/ChatSidebar.jsx","chat-app-new/pages/Chat/components/Search.jsx","chat-app-new/components/Checkbox/index.jsx","chat-app-new/pages/Chat/components/Profile.jsx","chat-app-new/pages/Chat/components/Convo.jsx","chat-app-new/pages/Chat/index.jsx"],"sourcesContent":["import React, { useContext } from \"react\";\nimport Icon from \"./../../components/Icon\";\nimport { Link } from \"react-router-dom\";\nimport formatTime from \"./../../utils/formatTime\";\nimport { useUsersContext } from \"./../../context/usersContext\";\nimport { AccountContext } from '../../../chat-app-new/context/AccountProvider'\nimport avatarDefault from \"./../../assets/images/no-avatar.png\";\nimport { CSpinner} from '@coreui/react'\n\nimport { newCountMessage } from \"src/http/adminAPI\";\n\nconst Contact = ({ contact }) => {\n\t\n\tconst { setPerson } = useContext(AccountContext);\n\tconst host = process.env.REACT_APP_API_URL\n\t\n\t//сделать пользователя непрочитанным\n\tconst { setUserAsUnread, usersOnline, setCountMessage } = useUsersContext();\n\n\tconst status = usersOnline.find(item => item.userId == contact.chatId)\n\n\t//обработка нажатия на пользователя из списка\n    const getUser = async () => {\n        setPerson({\n            name: contact.name, \n            id: contact.chatId, \n\t\t\tavatar: contact.avatar\n        });\n\t\tsetUserAsUnread(contact.chatId)\n\t\tsetCountMessage(0)\n\t\t//await newCountMessage(0)\n    }\n\n\tconst getLastMessage = () => {\n\t\tconst messageDates = Object.keys(contact.messages);\t\n\t\tlet recentMessageDate\n\t\t\n\t\tmessageDates.length !== 0 \t\n\t\t? recentMessageDate = messageDates[messageDates.length - 1]\n\t\t: recentMessageDate = '2000-01-01'\n\n\t\tlet messages = [];\n\t\tif (JSON.stringify(contact.messages) !== '{}') {\n\t\t\tmessages = [...contact.messages[recentMessageDate]];\n\t\t}\t\n\n\t\tif (messages.length) {\n\t\t\tconst lastMessage = messages.pop();\n\t\t\treturn lastMessage;\n\t\t} \n\t\tconst lastMessage = '';\n\t\treturn lastMessage;\n\t};\n\n\tconst lastMessage = getLastMessage(contact);\n\n\t//const lastMessage =  contact.message ? contact.message : '' //getLastMessage(contact);\n\n\tconst onImageError = (e) => {\n\t\te.target.src = avatarDefault\n\t}\n\n\treturn (\n\t\t<Link\n\t\t\tclassName=\"sidebar-contact\"\n\t\t\tonClick={() => getUser()}\n\t\t>\n\t\t\t{/* <div className=\"sidebar-contact__status-wrapper\">\n\t\t\t\t{status \n\t\t\t\t? <img\n\t\t\t\t\tsrc={Status}\n\t\t\t\t\talt=\"status\" \n\t\t\t\t\tclassName=\"status-adm\"\n\t\t\t\t/> \n\t\t\t\t: ''}\n\t\t\t</div> */}\n\t\t\t<div className=\"sidebar-contact__avatar-wrapper\">\n\t\t\t\t{\n\t\t\t\t\tcontact.avatar\n\t\t\t\t\t? <img src={`${host}${contact.avatar}`} onError={onImageError} alt='' className=\"avatar-adm\" />\n\t\t\t\t\t: <img src={avatarDefault} alt='' className=\"avatar-adm\" />\n\t\t\t\t}\t\t\t\t\n\t\t\t</div>\n\t\t\t<div className=\"sidebar-contact__content\">\n\t\t\t\t<div className=\"sidebar-contact__top-content\">\n\t\t\t\t\t<h2 className=\"sidebar-contact__name\"> {contact.name}</h2>\n\t\t\t\t\t<span className=\"sidebar-contact__time\">\n\t\t\t\t\t\t{/* { lastMessage ? \n\t\t\t\t\t\t\tlastMessage === ''  ? '' : formatTime(lastMessage.time)\n\t\t\t\t\t\t\t:<CSpinner />\n\t\t\t\t\t\t} */}\n\t\t\t\t\t\t{lastMessage === ''  ? '' : formatTime(lastMessage.time)}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"sidebar-contact__bottom-content\">\n\t\t\t\t\t<p className=\"sidebar-contact__message-wrapper\">\n\t\t\t\t\t\t{lastMessage.status && (\n\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\tid={\n\t\t\t\t\t\t\t\t\tlastMessage?.status === \"sent\" ? \"singleTick\" : \"doubleTick\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\taria-label={lastMessage?.status}\n\t\t\t\t\t\t\t\tclassName={`sidebar-contact__message-icon ${\n\t\t\t\t\t\t\t\t\tlastMessage?.status === \"read\"\n\t\t\t\t\t\t\t\t\t\t? \"sidebar-contact__message-icon--blue\"\n\t\t\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName={`sidebar-contact__message ${\n\t\t\t\t\t\t\t\t!!contact.unread ? \"sidebar-contact__message--unread\" : \"\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{contact.typing ? <i> печатает...</i> : lastMessage?.content}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t\t<div className=\"sidebar-contact__icons\">\n\t\t\t\t\t\t{contact.pinned && (\n\t\t\t\t\t\t\t<Icon id=\"pinned\" className=\"sidebar-contact__icon\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!!contact.unread && (\n\t\t\t\t\t\t\t<span className=\"sidebar-contact__unread\">{contact.unread}</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<button aria-label=\"sidebar-contact__btn\">\n\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\tid=\"downArrow\"\n\t\t\t\t\t\t\t\tclassName=\"sidebar-contact__icon sidebar-contact__icon--dropdown\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Link>\n\t);\n};\n\nexport default Contact;\n","import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./styles/main.css\";\nimport avatar from \"./../../assets/images/logo_chat_admin.png\";\nimport Icon from \"./../../components/Icon\";\nimport Contact from \"./Contact\";\nimport OptionsBtn from \"./../../components/OptionsButton\";\nimport { useUsersContext } from \"./../../context/usersContext\";\nimport { CSpinner} from '@coreui/react'\n\nimport { getContacts, getConversation, getMessages, getLastMessages } from '../../../http/chatAPI'\n\nconst Sidebar = () => {\n\tconst { users: clients, setUsers} = useUsersContext();\n\t//const { users, setUsers, contacts, setContacts} = useUsersContext();\n\n    const chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID \n\n\tconst [contacts, setContacts]= useState([]);\n\tconst [text, setText]= useState(\"\");\n\tconst [loading, setLoading]= useState(true);\n\tconst [users2, setUsers2] = useState([])\n\n\tconst navigate = useNavigate()\n\n\t// useEffect(() => {\n\t// \tconst fetchData = async () => {\n\t// \t\tsetLoading(true)\n\n\t// \t\t\tlet contacts = await getContacts();\n\t// \t\t\tconsole.log(\"contacts size: \", contacts.length)\n\t\t\n\t// \t\t\tconst arrayContact = []\n\t\t\n\t// \t\t\tcontacts.map(async (user, index) => {\n\t\n\t// \t\t\t\tlet first_name = user.firstname != null ? user.firstname : ''\n\t// \t\t\t\tlet last_name = user.lastname != null ? user.lastname : ''\n\t\n\t// \t\t\t\tlet chatName = user.username ? user.username : first_name + ' ' + last_name\n\t\n\t// \t\t\t\tconst newUser = {\n\t// \t\t\t\t\tid: user.id,\n\t// \t\t\t\t\tname: chatName,\n\t// \t\t\t\t\tchatId: user.chatId,\n\t// \t\t\t\t\tavatar: user.avatar,\n\t// \t\t\t\t\tconversationId: '',\n\t// \t\t\t\t\tunread: 0, \n\t// \t\t\t\t\tpinned: false,\n\t// \t\t\t\t\ttyping: false,\n\t// \t\t\t\t\tmessage:  '',\n\t// \t\t\t\t\tdate: '',\n\t// \t\t\t\t\tmessages: '', // { \"01/01/2023\": arrayMessage,\"Сегодня\":[] },\t\n\t// \t\t\t\t}\n\t// \t\t\t\tarrayContact.push(newUser)\n\t// \t\t\t})\n\t\n\t// \t\t\t//подгрузка контактов\n\t// \t\t\tsetTimeout(() => {\n\t\n\t// \t\t\t\tsetUsers(arrayContact)\n\t// \t\t\t\tsetContacts(arrayContact)\n\t\n\t// \t\t\t\tsetLoading(false)\n\n\t// \t\t\t}, 1000)\n\t// \t\t};\n\n\t// \t\t//все сообщения заказчиков\n\t// \t\tfetchData();\n\t\t\t\n\t// }, [])\n\n\t// //подгрузка сообщений\n  \t// useEffect(() => {\n\t// \t//КЭШ браузера\n\t// \tconst retrievedData = localStorage.getItem(\"contacts\");\n\t// \tconst contactsStorage = JSON.parse(retrievedData ? retrievedData : [])\n\n    // \tconst arrayContact = []\n\n\t// \t//если есть кэш браузера\n\t// \tif (contactsStorage.length > 0) {\n\t// \t\tsetUsers2(contactsStorage)\n\t// \t} else {\n\t// \t\tusers.map(async (user, index) => {\n\t// \t\t\tlet conversationId = await getConversation(user.chatId)\n\n\t// \t\t\t//получить последнее сообщение\n\t// \t\t\tlet message = await getLastMessages(conversationId)\n\t\t\t\n\t// \t\t\tlet newMessage = ''\n\t// \t\t\tlet dateMessage = \"2000-01-01T00:00:00\"\n\n\t// \t\t\tif (message) {\n\t// \t\t\t\tdateMessage = message ? message.createdAt : \"2000-01-01T00:00:00\";\t\t\n\n\t// \t\t\t\tconst d = new Date(message?.createdAt);\n\t// \t\t\t\tconst year = d.getFullYear();\n\t// \t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t// \t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t// \t\t\t\tconst chas = d.getHours();\n\t// \t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\n\t// \t\t\t\tconst newDateMessage = `${day}.${month}.${year}`\n\n\t// \t\t\t\tnewMessage = {\n\t// \t\t\t\t\tdate: newDateMessage,\n\t// \t\t\t\t\tcontent: message?.text,\n\t// \t\t\t\t\timage: message?.type === 'image' ? true : false,\n\t// \t\t\t\t\tdescript: message?.buttons ? message.buttons : '',\n\t// \t\t\t\t\tsender: message?.senderId,\n\t// \t\t\t\t\ttime: chas + ' : ' + minut,\n\t// \t\t\t\t\tstatus: 'sent',\n\t// \t\t\t\t\tid:message?.messageId,\n\t// \t\t\t\t\treply:message?.replyId,\n\t// \t\t\t\t}\n\t// \t\t\t}\n\n\t// \t\t\tconst newUser = {\n\t// \t\t\t\tid: user.id,\n\t// \t\t\t\tname: user.name,\n\t// \t\t\t\tchatId: user.chatId,\n\t// \t\t\t\tavatar: user.avatar,\n\t// \t\t\t\tconversationId: conversationId,\n\t// \t\t\t\tunread: 0, \n\t// \t\t\t\tpinned: false,\n\t// \t\t\t\ttyping: false,\n\t// \t\t\t\tmessage:  newMessage , //lastMessage,\n\t// \t\t\t\tdate: dateMessage,\n\t// \t\t\t\tmessages: '', // { \"01/01/2023\": arrayMessage,\"Сегодня\":[] },\t\n\t// \t\t\t}\n\t// \t\t\tarrayContact.push(newUser)\n\n\t// \t\t\tsetTimeout(() => {\t\n\t// \t\t\t\tconsole.log(\"arrayContact: \", arrayContact)\t\n\t// \t\t\t\tlocalStorage.setItem('contacts', JSON.stringify(arrayContact));\n\t// \t\t\t\tsetUsers2(arrayContact)\n\t// \t\t\t}, 10000)\n\t// \t\t})\n\t// \t}\n\t// }, [users])\n\n\t// //сортировка\n\t// useEffect(()=> {\n\t// \tconst sortedClients = [...users2].sort((a, b) => {       \n\t// \t\tvar dateA = new Date(a.date), dateB = new Date(b.date) \n\t// \t\treturn dateB-dateA  //сортировка по убывающей дате  \n\t// \t})\n\t\t\t\t\n\t// \tsetContacts(sortedClients)\n\n\t// }, [users2])\n\n\t\n\t\n\t// useEffect(() => {\n\t\n\t// \tconst filteredData = contacts.filter(user=> (user.name)?.toLowerCase().includes(text.toLowerCase()));\n    //     setContacts(filteredData);      \n    // }, [text]);\n\n\n\tuseEffect(() => {\n\t\t//сортировка\n\t\tconst userSort = [...clients].sort((a, b) => {       \n\t\t\tvar dateA = new Date(a.date), dateB = new Date(b.date) \n\t\t\treturn dateB-dateA  //сортировка по убывающей дате  \n\t\t})\n\t\tsetContacts(userSort)\n\n\t\t//console.log(\"clients: \", clients)\n\n\t\tif(clients.length > 0) {\n\t\t\tsetLoading(false)\n\t\t}\n\t},[clients])\n\n\tuseEffect(() => {\n\t\t//const filteredData = clients.filter(user=> (user.name)?.toLowerCase().includes(text.toLowerCase()));\n        const filteredData = clients.filter(user=> (user.name+user.chatId)?.replace(/[её]/g, '(е|ё)').toLowerCase().includes(text.replace(/[её]/g, '(е|ё)').toLowerCase())); \n\t\tsetContacts(filteredData);      \n    }, [text]);\n\n\n\n\tconst onSelected = (index) => {\n\t\tswitch(index) {\n\t\t\tcase 0: //данные о контакте\n\t\t\t\tconsole.log('Профиль')\n\t\t\t\tbreak\n\t\t  \n\t\t\tcase 1: \n\t\t\t\tconsole.log('1')\n\t\t\t\tbreak\n\t\t\t\n\t\t\tcase 4: \n\t\t\t\tnavigate(\"/dashboard\");\n\t\t\t\tbreak\n\t\t  \n\t\t\tdefault:\n\t\t\t\tconsole.log(\"В разработке\")\n\t\t\t\tbreak\n\t\t  }\n\t};\n\n\treturn (\n\t\t<aside className=\"sidebarB\">\n\t\t\t{/* Header */}\n\t\t\t<header className=\"headerB\">\n\t\t\t\t<div className=\"sidebar__avatar-wrapper\">\n\t\t\t\t\t<img src={avatar} alt='U.L.E.Y' className=\"avatar-adm\" />\n\t\t\t\t</div>\n\t\t\t\t<div>Менеджеры</div>\n\t\t\t\t<div className=\"sidebar__actions\">\n\t\t\t\t\t<OptionsBtn\n\t\t\t\t\t\tclassName=\"sidebar__action\"\n\t\t\t\t\t\tariaLabel=\"Menu\"\n\t\t\t\t\t\ticonId=\"menu\"\n\t\t\t\t\t\ticonClassName=\"sidebar__action-icon\"\n\t\t\t\t\t\tonSelected={onSelected}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\"Профиль\",\n\t\t\t\t\t\t\t// \"Архив\",\n\t\t\t\t\t\t\t// \"Избранные сообщения\",\n\t\t\t\t\t\t\t// \"Настройки\",\n\t\t\t\t\t\t\t// \"Вернуться в панель управления\",\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t\n\t\t\t{/* Search */}\n\t\t\t<div className=\"search-wrapper\">\n\t\t\t\t<div className=\"search-icons\">\n\t\t\t\t\t<Icon id=\"search\" className=\"search-icon\" />\n\t\t\t\t\t<button className=\"search__back-btn\">\n\t\t\t\t\t\t<Icon id=\"back\" />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<input \n\t\t\t\t\tclassName=\"search\" \n\t\t\t\t\tplaceholder=\"Поиск менеджера\" \n\t\t\t\t\tonChange={(e)=>setText(e.target.value)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t\n\t\t\t{/* Conversations */}\n\t\t\t<div className=\"sidebar__contacts\">\n\t\t\t\t{loading ? \n\t\t\t\t<CSpinner style={{margin: '50%'}}/> :\n\t\t\t\tcontacts.map((contact) => (\n\t\t\t\t\tcontact.chatId !== chatAdminId &&\n                    <>   \n\t\t\t\t\t\t<Contact contact={contact} />\n\t\t\t\t\t</>\n\t\t\t\t))\n\t\t\t\t}\n\t\t\t</div>\n\t\t</aside>\n\t);\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport Icon from \"./../../../components/Icon\";\n\nconst emojiTabs = [\n\t{ icon: \"recent\", label: \"Recent emojis\", active: true },\n\t{ icon: \"emojiPeople\", label: \"People emojis\", active: false },\n\t{ icon: \"emojiNature\", label: \"Nature emojis\", active: false },\n\t{ icon: \"emojiFood\", label: \"Food emojis\", active: false },\n\t{ icon: \"emojiActivity\", label: \"Activity emojis\", active: false },\n\t{ icon: \"emojiTravel\", label: \"Travel emojis\", active: false },\n\t{ icon: \"emojiObjects\", label: \"Object emojis\", active: false },\n\t{ icon: \"emojiSymbols\", label: \"Symbol emojis\", active: false },\n\t{ icon: \"emojiFlags\", label: \"Flag emojis\", active: false },\n];\n\nconst EmojiTray = ({ showEmojis, newMessage, setNewMessage }) => {\n\tconst addEmoji = (emoji) => {\n\t\tsetNewMessage(newMessage + emoji);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={`emojis__wrapper ${\n\t\t\t\tshowEmojis ? \"emojis__wrapper--active\" : \"\"\n\t\t\t}`}\n\t\t>\n\t\t\t<div className=\"emojis__tabs\">\n\t\t\t\t{emojiTabs.map((tab) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`emojis__tab ${tab.active ? \"emojis__tab--active\" : \"\"}`}\n\t\t\t\t\t\tkey={tab.label}\n\t\t\t\t\t>\n\t\t\t\t\t\t<button aria-label={tab.label} key={tab.icon}>\n\t\t\t\t\t\t\t<Icon id={tab.icon} className=\"emojis__tab-icon\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"emojis__content\">\n\t\t\t\t<input className=\"emojis__search\" placeholder=\"Search Emoji\" />\n\t\t\t\t<h4 className=\"emojis__label\"> Smileys {\"&\"} People </h4>\n\t\t\t\t<div className=\"emojis__grid\">\n\t\t\t\t\t{new Array(6).fill(null).map((_, rowIndex) =>\n\t\t\t\t\t\tnew Array(11).fill(null).map((_, colIndex) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\trole=\"img\"\n\t\t\t\t\t\t\t\taria-label=\"emoji\"\n\t\t\t\t\t\t\t\t// onClick={() => addEmoji(\"emoji\")}\n\t\t\t\t\t\t\t\tkey={`${rowIndex}-${colIndex}`}\n\t\t\t\t\t\t\t\tclassName=\"emoji emojis__emoji\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundPositionX: -3 - 44.2 * colIndex,\n\t\t\t\t\t\t\t\t\tbackgroundPositionY: -6 - 52 * rowIndex,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t></div>\n\t\t\t\t\t\t))\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<h4 className=\"emojis__label\"> Animals {\"&\"} Nature </h4>\n\t\t\t\t<div className=\"emojis__grid\">\n\t\t\t\t\t{new Array(6).fill(null).map((_, rowIndex) =>\n\t\t\t\t\t\tnew Array(11).fill(null).map((_, colIndex) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\trole=\"img\"\n\t\t\t\t\t\t\t\taria-label=\"emoji\"\n\t\t\t\t\t\t\t\t// onClick={() => addEmoji(\"emoji\")}\n\t\t\t\t\t\t\t\tkey={`${rowIndex}-${colIndex}`}\n\t\t\t\t\t\t\t\tclassName=\"emoji emojis__emoji\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundPositionX: -3 - 44.2 * colIndex,\n\t\t\t\t\t\t\t\t\tbackgroundPositionY: -6 - 52 * rowIndex,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t></div>\n\t\t\t\t\t\t))\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default EmojiTray;\n","import { useEffect } from \"react\";\n\n// Updates the height of a <textarea> when the value changes.\nconst useAutosizeTextArea = (\n  textAreaRef: HTMLTextAreaElement | null,\n  value: string\n) => {\n  useEffect(() => {\n    if (textAreaRef) {\n      \n        // Нам нужно на мгновение сбросить высоту, чтобы получить правильное значение scrollHeight для текстовой области.\n      textAreaRef.style.height = \"0px\";\n      const scrollHeight = textAreaRef.scrollHeight - 40;\n\n      // Затем мы устанавливаем высоту напрямую, вне цикла рендеринга.\n      // Попытка установить это с помощью состояния или ссылки приведет к неправильному значению.\n      textAreaRef.style.height = scrollHeight + \"px\";\n    }\n  }, [textAreaRef, value]);\n};\n\nexport default useAutosizeTextArea;","import React, {useRef} from \"react\";\nimport Icon from \"./../../../components/Icon\";\n\nimport useAutosizeTextArea from \"./useAutosizeTextArea.ts\";\n\nconst attachButtons = [\n\t// { icon: \"attachContacts\", label: \"Choose contact\", click: \"contact\" },\n\t{ icon: \"attachDocument\", label: \"Choose document\", click: \"doc\" },\n\t{ icon: \"attachImage\", label: \"Choose image\", click: \"image\" },\n];\n\nconst ChatInput = ({\n\tshowAttach,\n\tsetShowAttach,\n\tshowEmojis,\n\tsetShowEmojis,\n\tmess,\n\tsetMess,\n\tsubmitNewMessage,\n\tonFileChange,\n}) => {\n\n\tconst textAreaRef = useRef(null);\n\tuseAutosizeTextArea(textAreaRef.current, mess);\n\n\tconst handleChange = (e) => {\n\t\tconsole.log(e.target.value)\n\t\tsetMess(e.target.value)\n\t};\n\n\tconst detectEnterPress = (e) => {\n\t\tif ((e.key === \"Enter\" && !e.shiftKey) || (e.keyCode === 13 && !e.shiftKey) ) {\n\t\t\tsubmitNewMessage();\n\t\t} \n\t};\n\n\treturn (\n\t\t<div className=\"chat__input-wrapper\">\n\t\t\t{showEmojis && (\n\t\t\t\t<button aria-label=\"Close emojis\" onClick={() => setShowEmojis(false)}>\n\t\t\t\t\t<Icon id=\"cancel\" className=\"chat__input-icon\" />\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t<button aria-label=\"Emojis\" onClick={() => setShowEmojis(true)}>\n\t\t\t\t<Icon\n\t\t\t\t\tid=\"smiley\"\n\t\t\t\t\tclassName={`chat__input-icon ${\n\t\t\t\t\t\tshowEmojis ? \"chat__input-icon--highlight\" : \"\"\n\t\t\t\t\t}`}\n\t\t\t\t/>\n\t\t\t</button>\n\t\t\t{showEmojis && (\n\t\t\t\t<>\n\t\t\t\t\t<button aria-label=\"Choose GIF\">\n\t\t\t\t\t\t<Icon id=\"gif\" className=\"chat__input-icon\" />\n\t\t\t\t\t</button>\n\t\t\t\t\t<button aria-label=\"Choose sticker\">\n\t\t\t\t\t\t<Icon id=\"sticker\" className=\"chat__input-icon\" />\n\t\t\t\t\t</button>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t<div className=\"pos-rel\">\n\t\t\t\t<button aria-label=\"Attach\" onClick={() => setShowAttach(!showAttach)}>\n\t\t\t\t\t<Icon\n\t\t\t\t\t\tid=\"attach\"\n\t\t\t\t\t\tclassName={`chat__input-icon ${\n\t\t\t\t\t\t\tshowAttach ? \"chat__input-icon--pressed\" : \"\"\n\t\t\t\t\t\t}`}\n\t\t\t\t\t/>\n\t\t\t\t</button>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName={`chat__attach ${showAttach ? \"chat__attach--active\" : \"\"}`}\n\t\t\t\t>\n\t\t\t\t\t{attachButtons.map((btn) => (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"chat__attach-btn\"\n\t\t\t\t\t\t\taria-label={btn.label}\n\t\t\t\t\t\t\tkey={btn.label}\n\t\t\t\t\t\t\tonClick={()=>console.log(btn.click)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<label htmlFor='fileInput'>\n\t\t\t\t\t\t\t\t<Icon id={btn.icon} className=\"chat__attach-icon\" />\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\tid=\"fileInput\"\n\t\t\t\t\t\t\t\tname=\"photo\"\n\t\t\t\t\t\t\t\tstyle={{ display: \"none\" }}\n\t\t\t\t\t\t\t\tonChange={(e) => onFileChange(e)}\n\t\t\t\t\t\t\t/>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</button>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<textarea\n\t\t\t\tclassName=\"chat__input\"\n\t\t\t\tplaceholder=\"Введите сообщение\"\n\t\t\t\tvalue={mess} \n\t\t\t\tonChange={handleChange} \n\t\t\t\tref={textAreaRef}\t\t\t\n\t\t\t\trows={1}\n\t\t\t/>\n\n\t\t\t<button aria-label=\"Send message\" onClick={submitNewMessage}>\n\t\t\t\t<Icon id=\"send\" className=\"chat__input-icon\" />\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default ChatInput;\n","import React from \"react\";\nimport Icon from \"./../../../components/Icon\";\nimport OptionsBtn from \"./../../../components/OptionsButton\";\nimport avatarDefault from \"./../../../assets/images/no-avatar.png\";\nimport { \n\tCButton\n  } from '@coreui/react'\n\nconst Header = ({ user, openProfileSidebar, openSearchSidebar, clearFile, setClearFile, clickClearFile }) => {\n\n\tconst host = process.env.REACT_APP_API_URL\n\n\tconst onSelected = (index) => {\n\t\tswitch(index) {\n\t\t\tcase 0: //данные о контакте\n\t\t\t\topenProfileSidebar()\n\t\t\t\tbreak\n\t\t  \n\t\t\tcase 1: \n\t\t\t\tconsole.log('1')\n\t\t\t\tbreak\n\t\t  \n\t\t\tdefault:\n\t\t\t\tconsole.log(\"В разработке\")\n\t\t\t\tbreak\n\t\t  }\n\t};\n\n\treturn (\n\t\t<header className=\"headerB chat__header\">\n\t\t\t<div className=\"chat__avatar-wrapper\" onClick={openProfileSidebar}>\n\t\t\t\t{\n\t\t\t\t\tuser.avatar\n\t\t\t\t\t? <img src={`${host}${user.avatar}`} alt={user?.name} className=\"avatar-adm\" />\n\t\t\t\t\t: <img src={avatarDefault} alt={user?.name} className=\"avatar-adm\" />\n\t\t\t\t}\n\t\t\t</div>\n\n\t\t\t<div className=\"chat__contact-wrapper\" onClick={openProfileSidebar}>\n\t\t\t\t<h2 className=\"chat__contact-name\"> {user?.name}</h2>\n\t\t\t\t<p className=\"chat__contact-desc\">\n\t\t\t\t\t{user.typing ? \"печатает...\" : \"данные контакта\"}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className=\"chat__actions\">\n\t\t\t\t{clearFile ? <CButton color=\"danger\" onClick={clickClearFile}>Очистить</CButton> : ''}\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"chat__action\"\n\t\t\t\t\taria-label=\"Search\"\n\t\t\t\t\tonClick={openSearchSidebar}\n\t\t\t\t>\n\t\t\t\t\t<Icon\n\t\t\t\t\t\tid=\"search\"\n\t\t\t\t\t\tclassName=\"chat__action-icon chat__action-icon--search\"\n\t\t\t\t\t/>\n\t\t\t\t</button>\n\t\t\t\t<OptionsBtn\n\t\t\t\t\tclassName=\"chat__action\"\n\t\t\t\t\tariaLabel=\"Menu\"\n\t\t\t\t\ticonId=\"menu\"\n\t\t\t\t\ticonClassName=\"chat__action-icon\"\n\t\t\t\t\tonSelected={onSelected}\n\t\t\t\t\toptions={[\n\t\t\t\t\t\t\"Данные о контакте\",\n\t\t\t\t\t\t// \"Выбрать сообщения\",\n\t\t\t\t\t\t// \"Отключить уведомления\",\n\t\t\t\t\t\t\"Очистить переписку\",\n\t\t\t\t\t\t\"Удалить чат\",\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React from \"react\";\nimport Icon from \"./../../../components/Icon\";\n\nconst ChatSidebar = ({ active, closeSidebar, heading, children }) => {\n\treturn (\n\t\t<aside className={`chat-sidebar ${active ? \"chat-sidebar--active\" : \"\"}`}>\n\t\t\t<header className=\"header chat-sidebar__header\">\n\t\t\t\t<button onClick={closeSidebar}>\n\t\t\t\t\t<Icon id=\"cancel\" className=\"chat-sidebar__header-icon\" />\n\t\t\t\t</button>\n\t\t\t\t<h2 className=\"chat-sidebar__heading\"> {heading}</h2>\n\t\t\t</header>\n\t\t\t<div className=\"chat-sidebar__content\">{children}</div>\n\t\t</aside>\n\t);\n};\n\nexport default ChatSidebar;\n","import Icon from \"./../../../components/Icon\";\nimport React from \"react\";\n\nconst Search = () => {\n\treturn (\n\t\t<>\n\t\t\t<div className=\"search-wrapper\">\n\t\t\t\t<div className=\"search-icons\">\n\t\t\t\t\t<Icon id=\"search\" className=\"search-icon\" />\n\t\t\t\t\t<button className=\"search__back-btn\">\n\t\t\t\t\t\t<Icon id=\"back\" />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<input className=\"search\" placeholder=\"Поиск...\" />\n\t\t\t</div>\n\t\t\t<div className=\"chat-sidebar__search-results\">\n\t\t\t\t<p> Поиск сообщений в чате</p>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Search;\n","import Icon from \"./../../components/Icon\";\nimport React from \"react\";\nimport \"./styles.css\";\n\nconst Checkbox = ({ inputProps }) => {\n\treturn (\n\t\t<div className=\"checkbox\">\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tid=\"checkbox\"\n\t\t\t\t{...inputProps}\n\t\t\t\tclassName=\"checkbox__input\"\n\t\t\t/>\n\t\t\t<label htmlFor=\"checkbox\" className=\"checkbox__label\">\n\t\t\t\t<Icon id=\"check\" className=\"checkbox__icon\" />\n\t\t\t</label>\n\t\t</div>\n\t);\n};\n\nexport default Checkbox;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport media from \"./../../../assets/images/placeholder.jpeg\";\nimport Checkbox from \"./../../../components/Checkbox\";\nimport Icon from \"./../../../components/Icon\";\nimport { editContact, uploadFile, editContactAvatar } from './../../../../http/chatAPI';\nimport { useUsersContext } from \"./../../../context/usersContext\";\nimport { AccountContext } from './../../../context/AccountProvider';\nimport defaultAvatar from \"./../../../assets/images/no-avatar.png\";\n\nconst Profile = ({ user }) => {\n\tconst [username, setUsername] = useState(\"\")\n\tconst [form, setForm] = useState(false)\n\tconst { addNewName, addNewAvatar } = useUsersContext();\n\tconst { setPerson } = useContext(AccountContext);\n\tconst [img, setImg] = useState(null)\n\tconst [showEdit, setShowEdit] = useState(false)\n\tconst input = React.useRef();\n\n\tconst host = process.env.REACT_APP_API_URL\n\n\tuseEffect(() => {\n\t\tsetImg(`${host}${user.avatar}`)\n\t}, [user]);\n\t\n\n\t//кнопка Изменить\n\tconst changeUsername = () => {\n\t\tsetUsername(user.name);  \n\t\tsetForm(true)\n\t}\n\t\n\tconst handleChange = (e) => {\n\t\te.preventDefault();\n\t\tsetUsername(e.target.value);\n\t}\n\n\tconst getUser = async () => {\n        setPerson({\n            name: user.name, \n            id: user.chatId, \n\t\t\tavatar: user.avatar\n        });\n    }\n\t\n\t//сохранить новое имя\n\tconst handleSubmit = async (e) => {\n\t\te.preventDefault();\n\t\tconst newName = {\n\t\t\tusername, \n\t\t}\n\t\t//сохранить в БД\n\t\tawait editContact(newName, user.chatId)\n\n\t\t//сохранить в контексте\n\t\taddNewName(user.chatId, username);\n\t\tgetUser()\n\n\t\tsetForm(false)\n\t}\n\n\tconst handleAvatar = async (e) => {\n\t\te.preventDefault();\n\t\tsetImg(e.target.files[0])\n\t\tsetShowEdit(true)\n\t}\n\n\t//сохранить новый аватар\n\tconst sendFile = React.useCallback(async () => {\n\t\ttry {\n\t\t\tconst data = new FormData();\n            data.append(\"photo\", img);\n\n            let response = await uploadFile(data);\n\t\t\t//console.log(\"response: \", response.data)\n\t\t\t//setAvatar(response.data.path)\n\n\t\t\tconst newAvatar = {\n\t\t\t\tavatar: response.data.path.split('.team')[1], \n\t\t\t}\n\n\t\t\t//сохранить в БД\n\t\t\tawait editContactAvatar(newAvatar, user.chatId)\n\t\t\t\n\t\t\t//сохранить в контексте\n\t\t\taddNewAvatar(user.chatId, response.data.path.split('.team')[1]);\n\n\t\t\t//получить данные из контекста\n\t\t\tgetUser()\n\n\t\t\tsetShowEdit(false)\n\n\t\t} catch (error) {\n\t\t\t\n\t\t}\n\t}, [img])\n\n\treturn (\n\t\t<div className=\"profile\">\n\t\t\t<div className=\"profile__section profile__section--personal\">\n\t\t\t\t<div className=\"profile__avatar-wrapper upload\">\n\t\t\t\t\t{\n\t\t\t\t\t\tuser.avatar\n\t\t\t\t\t\t\t? <img src={`${host}${user.avatar}`} alt={user?.name} className=\"avatar-adm\" />\n\t\t\t\t\t\t\t: <img src={defaultAvatar} alt={user?.name} className=\"avatar-adm\" />\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<div className=\"round_adm\">\n\t\t\t\t\t\t<input type=\"file\" name=\"photo\" onChange={handleAvatar}/>\n\t\t\t\t\t\t<i className = \"fa fa-camera\" style={{color: '#fff'}}></i>\n\t\t\t\t\t</div>\t\t\t\t\t\t\n\t\t\t\t</div>\n\n\t\t\t\t{\n\t\t\t\t\tshowEdit \n\t\t\t\t\t? <button className=\"btn_save\" onClick={sendFile}>Сохранить</button>\n\t\t\t\t\t: \"\"\n\t\t\t\t}\n\n\t\t\t\t\n\n\t\t\t\t<p style={{ color: '#d5d5d5'}}>{user.chatId}</p>\n\t\t\t\t{\n\t\t\t\t\tform ? <form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\t\t\tvalue={username} \n\t\t\t\t\t\t\t\t\tonChange={handleChange} \n\t\t\t\t\t\t\t\t\tref={input}\n        \t\t\t\t\t\t\tonFocus={() => input.current.select()}\n\t\t\t\t\t\t\t\t\tstyle={{borderBottom: '1px solid #0e892e', color: '#d5d5d5'}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<input type=\"submit\" value=\"Сохранить\" style={{ color: '#6a6a6a'}} />\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t: <h2 className=\"profile__name\"> {user.name} </h2> \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\t!form ? <span onClick={changeUsername} style={{cursor: 'pointer', color: '#6a6a6a'}}>Редактировать</span>\n\t\t\t\t\t: \"\"\n\t\t\t\t}\n\t\t\t</div>\n\n\t\t\t<div className=\"profile__section profile__section--media\">\n\t\t\t\t<div className=\"sb profile__heading-wrapper\">\n\t\t\t\t\t<h2 className=\"profile__heading\"> Медиа, ссылки и документы </h2>\n\t\t\t\t\t<button>\n\t\t\t\t\t\t<Icon id=\"rightArrow\" className=\"profile__heading-icon\" />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"profile__media-wrapper\">\n\t\t\t\t\t<img src={media} alt=\"media\" className=\"profile__media\" />\n\t\t\t\t\t<img src={media} alt=\"media\" className=\"profile__media\" />\n\t\t\t\t\t<img src={media} alt=\"media\" className=\"profile__media\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<ul className=\"profile__section profile__section--actions\">\n\t\t\t\t<li className=\"profile__action\">\n\t\t\t\t\t<p className=\"profile__action-left\">\n\t\t\t\t\t\t<span className=\"profile__action-text profile__action-text--top\">\n\t\t\t\t\t\t\tОтключить уведомления\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t\t<div className=\"profile__action-right\">\n\t\t\t\t\t\t<Checkbox />\n\t\t\t\t\t</div>\n\t\t\t\t</li>\n\t\t\t\t<li className=\"profile__action\">\n\t\t\t\t\t<p className=\"profile__action-left\">\n\t\t\t\t\t\t<span className=\"profile__action-text profile__action-text--top\">\n\t\t\t\t\t\t\tОтмеченные сообщения\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t\t<button className=\"profile__action-right\">\n\t\t\t\t\t\t<Icon id=\"rightArrow\" className=\"profile__heading-icon\" />\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<li className=\"profile__action\">\n\t\t\t\t\t<p className=\"profile__action-left\">\n\t\t\t\t\t\t<span className=\"profile__action-text profile__action-text--top\">\n\t\t\t\t\t\t\tИсчезающие сообщения\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"profile__action-text profile__action-text--bottom\">\n\t\t\t\t\t\t\tOff\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t\t<button className=\"profile__action-right\">\n\t\t\t\t\t\t<Icon id=\"rightArrow\" className=\"profile__heading-icon\" />{\" \"}\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<div className=\"profile__section profile__section--about\">\n\t\t\t\t<div className=\"sb profile__heading-wrapper\">\n\t\t\t\t\t<h2 className=\"profile__heading\"> О компании и номер телефона </h2>\n\t\t\t\t</div>\n\t\t\t\t<ul>\n\t\t\t\t\t<li className=\"profile__about-item\">\n\t\t\t\t\t\tНесколько слов о компании...\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className=\"profile__about-item\">+7 123-12-12</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\n\t\t\t<div className=\"profile__section profile__section--danger\">\n\t\t\t\t<Icon id=\"block\" className=\"profile__danger-icon\" />\n\t\t\t\t<p className=\"profile__danger-text\"> Заблокировать </p>\n\t\t\t</div>\n\n\t\t\t<div className=\"profile__section profile__section--danger\">\n\t\t\t\t<Icon id=\"thumbsDown\" className=\"profile__danger-icon\" />\n\t\t\t\t<p className=\"profile__danger-text\"> Сообщить о контакте </p>\n\t\t\t</div>\n\n\t\t\t<div className=\"profile__section profile__section--danger\">\n\t\t\t\t<Icon id=\"delete\" className=\"profile__danger-icon\" />\n\t\t\t\t<p className=\"profile__danger-text\"> Удалить чат </p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Profile;\n","import Icon from \"./../../../components/Icon\";\nimport React, { useContext, useState, useRef } from \"react\";\n// import pdf from \"./../../../assets/images/PDFicon.png\";\nimport docIcon from \"./../../../assets/images/DOCicon.jpg\";\nimport xlsIcon from \"./../../../assets/images/XLSicon.png\";\nimport formatTime from \"./../../../utils/formatTime\";\nimport { AccountContext } from './../../../context/AccountProvider';\nimport { useUsersContext } from \"./../../../context/usersContext\";\nimport { $host } from './../../../../http/index'\nimport { delMessage } from \"src/http/chatAPI\";\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nconst Convo = ({ lastMsgRef, messages: allMessages }) => {\n\tconst { person } = useContext(AccountContext);\n\tconst dates = Object.keys(allMessages);  //['01/01/2023', 'Сегодня']\n\tconst chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID \n\tconst token = process.env.REACT_APP_TELEGRAM_API_TOKEN\n\n\tconst msgRef = useRef([]);\n\n\tlet replyMessage;\n\t\n\tconst { delMessageContext } = useUsersContext();\n\n\t//прокрутка\n\tconst scrollToMsg = (id) => {\n\t\tconsole.log(id)\n\t\t//alert(id)\n\t\tconsole.log(msgRef.current)\n\t\tmsgRef.current[id].scrollIntoView({transition: \"smooth\"});\n\t};\n\n\tconst CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n\t\t<button\n\t\t\taria-label=\"Message options\"\n\t\t\tclassName=\"chat__msg-options\"\n\t\t\tref={ref}\n\t\t\tonClick={(e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tonClick(e);\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t\t<Icon id=\"downArrow\" className=\"chat__msg-options-icon\" />\t\t\t\t\t\t\t\t\t\t\t\n\t\t</button>\n\t));\n\n\tCustomToggle.displayName = \"Search\";\n\n\tconst CustomMenu = React.forwardRef(\n\t\t({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n\t\t  const [value, setValue] = useState('');\n\t  \n\t\t  return (\n\t\t\t<div\n\t\t\t  ref={ref}\n\t\t\t  style={{backgroundColor: '#20272b'}}\n\t\t\t  className={className}\n\t\t\t  aria-labelledby={labeledBy}\n\t\t\t>\n\t\t\t  <ul className=\"list-unstyled\">\n\t\t\t\t{React.Children.toArray(children).filter(\n\t\t\t\t  (child) =>\n\t\t\t\t\t!value || child.props.children?.toLowerCase().startsWith(value),\n\t\t\t\t)}\n\t\t\t  </ul>\n\t\t\t</div>\n\t\t  );\n\t\t},\n\t);\n\n\tCustomMenu.displayName = CustomMenu\n\n\tconst change = async (eventkey) => {\n\t\t//alert(`you chosen: ${eventkey}`)\n\t\tconst message = JSON.parse(eventkey);\n\n\t\t//удалить сообщение через сокет\n\t\tdelMessageContext(message.id, message.date, message.chatId)\n\n\t\t//удалить сообщение в базе данных\n\t\tdelMessage(message.id)\n\n\t\tconst url_del_msg = `https://api.telegram.org/bot${token}/deleteMessage?chat_id=${person.id}&message_id=${message.id}`\n\n\t\tconst delToTelegram = await $host.get(url_del_msg);\n\n\t\tconsole.log(\"Удаляемое сообщение: \", message.id)\n\t\tconsole.log(\"Дата сообщения: \", message.date)\n\n\t\t//Выводим сообщение об успешной отправке\n\t\tif (delToTelegram) {\n\t\t\tconsole.log('Ваше сообщение удалено из телеграм! ', delToTelegram);\t\n\t\t}           \n\t\t//А здесь сообщение об ошибке при отправке\n\t\telse {\n\t\t\tconsole.log('Что-то пошло не так. Попробуйте ещё раз.');\n\t\t}\t\t\n\t}\n\n\n\treturn dates.map((date, dateIndex) => {\n\t\tconst messages = allMessages[date];\n\t\t\n\t\treturn (\n\t\t\t<div key={dateIndex}>\n\t\t\t\t<div className=\"chat__date-wrapper\">\n\t\t\t\t\t<span className=\"chat__date\"> {date}</span>\n\t\t\t\t</div>\n\t\t\t\t{dateIndex === 0 && (\n\t\t\t\t\t<p className=\"chat__encryption-msg\">\n\t\t\t\t\t\t<Icon id=\"lock\" className=\"chat__encryption-icon\" />\n\t\t\t\t\t\tСообщения шифруются сквозным шифрованием. Никто за пределами этого чата не может читать или слушать их\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t\t<div className=\"chat__msg-group\" >\n\t\t\t\t\t{messages.map((message, msgIndex) => {\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t//получить сообщение по его id\n\t\t\t\t\t\tif (message.content?.includes('_reply_')) {\n\t\t\t\t\t\t\treplyMessage = message?.content.split('_reply_')[0] //messages.find(mess=> mess.id === message.content.split('_reply_')[0])\n\t\t\t\t\t   \t} \n\t\t\t\t\t\t\n\t\t\t\t\t\tconst assignRef = () =>\n\t\t\t\t\t\t\tdateIndex === dates.length - 1 && msgIndex === messages.length - 1\n\t\t\t\t\t\t\t\t? lastMsgRef\n\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{message.image ? (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName={`chat__msg chat__img-wrapper ${\n\t\t\t\t\t\t\t\t\t\t\tmessage.sender !== chatAdminId ? \"chat__msg--rxd\" : \"chat__msg--sent\"\n\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\t\tref={assignRef()}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{message.content.endsWith('.pdf') ? (<figure>\n\t\t\t\t\t\t\t\t\t\t\t{/* <img src={pdf} width={30}/>\n\t\t\t\t\t\t\t\t\t\t\t<a href={message.content} target=\"_blank\" rel=\"noreferrer\">{message.content}</a>*/}\n\t\t\t\t\t\t\t\t\t\t\t<iframe src={message.content} height=\"235px\" width=\"100%\" title=\"myFramePdf\"/>\n\t\t\t\t\t\t\t\t\t\t</figure>) : \n\t\t\t\t\t\t\t\t\t\t\tmessage.content.endsWith('.xlsx') ? <figure> <img src={xlsIcon} width={30}/>\n\t\t\t\t\t\t\t\t\t\t\t<a href={message.content} target=\"_blank\" rel=\"noreferrer\">{message.content}</a> </figure> : \n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tmessage.content.endsWith('.docx') ? <figure> <img src={docIcon} width={30}/>\n\t\t\t\t\t\t\t\t\t\t\t<a href={message.content} target=\"_blank\" rel=\"noreferrer\">{message.content}</a> </figure> : (\n\t\t\t\t\t\t\t\t\t\t\t<figure>\n\t\t\t\t\t\t\t\t\t\t\t\t<a href={message.content} target=\"_blank\" rel=\"noreferrer\"><img src={message.content} alt=\"\" className=\"chat__img\" /></a>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<figcaption style={{textAlign: 'center', backgroundColor: '#607a7a', borderRadius: '5px'}}>{message.descript}</figcaption>\n\t\t\t\t\t\t\t\t\t\t\t</figure>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t<span className=\"chat__msg-footer\">\n\t\t\t\t\t\t\t\t\t\t\t<span>{formatTime(message.time)}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{!message.sender && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage?.status === \"sent\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"singleTick\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"doubleTick\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-label={message?.status}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`chat__msg-status-icon ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage?.status === \"read\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"chat__msg-status-icon--blue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<Dropdown onSelect={change}>\n\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\">\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</Dropdown.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Menu as={CustomMenu}>\n\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Item eventKey={JSON.stringify({id: message.id, date: message.date, chatId: person.id})}>Удалить сообщение</Dropdown.Item>\n\t\t\t\t\t\t\t\t\t\t\t</Dropdown.Menu>\n\t\t\t\t\t\t\t\t\t\t</Dropdown>\t\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t) : message.sender !== chatAdminId ? (\n\t\t\t\t\t\t\t\t\t<p className=\"chat__msg chat__msg--rxd\" ref={assignRef()}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex-row\" ref={el => msgRef.current[message.id] = el} >\n\t\t\t\t\t\t\t\t\t\t\t{/* пересылаемое сообщение */}\n\t\t\t\t\t\t\t\t\t\t\t{message.content?.includes('_reply_') \n\t\t\t\t\t\t\t\t\t\t\t? <div className=\"chat__msg--reply\" onClick={()=>scrollToMsg(message.reply)}>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"reply__content\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"reply__full\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"reply__left\"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"reply__pad\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"reply__contact\">U.L.E.Y</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"reply__text\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* {replyMessage?.content.endsWith('.pdf') ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<figure>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<iframe src={message.content} height=\"50px\" width=\"50px\" title=\"myFramePdf\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</figure>) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<figure>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={replyMessage?.content} target=\"_blank\" rel=\"noreferrer\"><img src={replyMessage?.content} alt=\"\" width='50px' height='50px' /></a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<figcaption style={{textAlign: 'center', backgroundColor: '#607a7a', borderRadius: '5px'}}></figcaption>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</figure>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)} */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{replyMessage?.startsWith('http') ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={replyMessage} target=\"_blank\" rel=\"noreferrer\"><img src={replyMessage} alt='' width='50px' height='50px' /></a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: replyMessage\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t: <></>}\n\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t{/* {message.content?.startsWith('http') \n\t\t\t\t\t\t\t\t\t\t\t\t? <a className=\"chat__href\" href={message.content} target=\"_blank\" rel=\"noreferrer\">{message.content}</a> \n\t\t\t\t\t\t\t\t\t\t\t\t: message.content.includes('_reply_') ? message.content.split('_reply_')[1] : message.content}  */}\n\t\t\t\t\t\t\t\t\t\t\t\t{message.content?.includes('_reply_') \n\t\t\t\t\t\t\t\t\t\t\t\t? message.content.split('_reply_')[1] \n\t\t\t\t\t\t\t\t\t\t\t\t: message.content}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"chat__msg-filler\"> </span>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"chat__msg-footer\">\n\t\t\t\t\t\t\t\t\t\t\t\t{formatTime(message.time)}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t\t<Dropdown onSelect={change}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\">\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t</Dropdown.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Menu as={CustomMenu}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Item eventKey={JSON.stringify({id: message.id, date: message.date, chatId: person.id})}>Удалить сообщение</Dropdown.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t</Dropdown.Menu>\n\t\t\t\t\t\t\t\t\t\t\t</Dropdown>\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<p className=\"chat__msg chat__msg--sent\" ref={assignRef()}>\n\t\t\t\t\t\t\t\t\t\t<div ref={el => msgRef.current[message.id] = el}>\n\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t{message.content?.startsWith('http') \n\t\t\t\t\t\t\t\t\t\t\t\t? <a className=\"chat__href\" href={message.content} target=\"_blank\" rel=\"noreferrer\">{message.content}</a> \n\t\t\t\t\t\t\t\t\t\t\t\t: message.content}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"chat__msg-filler\"> </span>\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"chat__msg-footer\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span> {formatTime(message.time)} </span>\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\t\t\t\t\t\tid={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage?.status === \"sent\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"singleTick\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"doubleTick\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-label={message?.status}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`chat__msg-status-icon ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage?.status === \"read\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"chat__msg-status-icon--blue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t\t<Dropdown onSelect={change}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\">\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t</Dropdown.Toggle>\n\t\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Menu as={CustomMenu}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Dropdown.Item eventKey={JSON.stringify({id: message.id, date: message.date, chatId: person.id})}>Удалить сообщение</Dropdown.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t</Dropdown.Menu>\n\t\t\t\t\t\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t});\n};\n\nexport default Convo;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./styles/main.css\";\nimport EmojiTray from \"./components/EmojiTray\";\nimport ChatInput from \"./components/ChatInput\";\nimport Header from \"./components/Header\";\nimport ChatSidebar from \"./components/ChatSidebar\";\nimport Icon from \"./../../components/Icon\";\nimport Search from \"./components/Search\";\nimport Profile from \"./components/Profile\";\nimport Convo from \"./components/Convo\";\nimport { useUsersContext } from \"./../../context/usersContext\";\nimport { useContext } from 'react';\nimport { AccountContext } from './../../../chat-app-new/context/AccountProvider';\nimport { newMessage, uploadFile, getMessages, getConversation } from './../../../http/chatAPI';\nimport { $host } from './../../../http/index'\n//import sendSound from './../../assets/sounds/sendmessage.mp3';\nimport { CSpinner} from '@coreui/react'\n\n\nconst chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID\nconst token = process.env.REACT_APP_TELEGRAM_API_TOKEN\nconst host = process.env.REACT_APP_HOST\n\nconst Chat = () => {\n\tconst { users, setUsers, setUserAsUnread, addNewMessage, setShowGetMess } = useUsersContext();\n\tconst { person } = useContext(AccountContext);\n\tconst { setCountMessage } = useUsersContext();\n\tconst [clearFile, setClearFile] = useState(false)\n\n\tconst chatId = person.id;\n\tlet user = users.filter((user) => user.chatId === chatId.toString())[0];\n\n\tconst lastMsgRef = useRef(null);\n\tconst [showAttach, setShowAttach] = useState(false);\n\tconst [showEmojis, setShowEmojis] = useState(false);\n\tconst [showProfileSidebar, setShowProfileSidebar] = useState(false);\n\tconst [showSearchSidebar, setShowSearchSidebar] = useState(false);\n\tconst [file, setFile] = useState();\n\tconst [image, setImage]= useState(\"\");\n\tconst [mess, setMess] = useState(\"\");\n\n\tconst [messages, setMessages] = useState([]);\n\tconst [loading, setLoading]= useState(false);\n\n\tconst [user2, setUser2] = useState();\n\t\n\n\t//const audio = new Audio(sendSound);\n\n\t// useEffect(() => {\n\t// \tconst fetchData = async () => {\n\t// \t\tsetLoading(true)\n\n\t// \t\tlet conversationId = await getConversation(user.chatId)\n\n\t// \t\tlet messages = await getMessages(conversationId)\n\n\t// \t\tconsole.log(\"messages: \", messages)\n\t\t\t\n\n\t// \t\tconst arrayMessage = []\n\t// \t\tconst allDate = []\n\n\t// \t\t\tmessages.map(message => {\n\t// \t\t\t\t\tconst d = new Date(message.createdAt);\n\t// \t\t\t\t\tconst year = d.getFullYear();\n\t// \t\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t// \t\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t// \t\t\t\t\tconst chas = d.getHours();\n\t// \t\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\n\t// \t\t\t\t\tconst newDateMessage = `${day}.${month}.${year}`\n\n\t// \t\t\t\t\tconst newMessage = {\n\t// \t\t\t\t\t\tdate: newDateMessage,\n\t// \t\t\t\t\t\tcontent: message.text,\n\t// \t\t\t\t\t\timage: message.type === 'image' ? true : false,\n\t// \t\t\t\t\t\tdescript: message.buttons ? message.buttons : '',\n\t// \t\t\t\t\t\tsender: message.senderId,\n\t// \t\t\t\t\t\ttime: chas + ' : ' + minut,\n\t// \t\t\t\t\t\tstatus: 'sent',\n\t// \t\t\t\t\t\tid:message.messageId,\n\t// \t\t\t\t\t\treply:message.replyId,\n\t// \t\t\t\t\t}\n\t// \t\t\t\t\tarrayMessage.push(newMessage)\n\t// \t\t\t\t\tallDate.push(newDateMessage)\n\t// \t\t\t})\n\n\t// \t\t\tconst dates = [...allDate].filter((el, ind) => ind === allDate.indexOf(el));\n\n\t// \t\t\tlet obj = {};\n\t// \t\t\tfor (let i = 0; i < dates.length; i++) {\n\t// \t\t\t\tconst arrayDateMessage = []\n\t// \t\t\t\tfor (let j = 0; j < arrayMessage.length; j++) {\n\t// \t\t\t\t\tif (arrayMessage[j].date === dates[i]) {\n\t// \t\t\t\t\t\tarrayDateMessage.push(arrayMessage[j])\t\t\t\t\t\t\t\n\t// \t\t\t\t\t}\n\t// \t\t\t\t}\t\n\t// \t\t\t\tobj[dates[i]] = arrayDateMessage;\n\t// \t\t\t}\n\n\t// \t\t\tsetMessages(obj)\n\n\t// \t\t\tlet userIndex = users.findIndex((user) => user.chatId === chatId.toString());\n\t// \t\t\tconst usersCopy = [...users];\n\t// \t\t\tusersCopy[userIndex].messages = obj;\n\t// \t\t\tsetUsers(usersCopy);\n\n\t// \t\t\tsetUser2(usersCopy[userIndex])\n\t// \t\t\tconsole.log(\"user message: \", usersCopy[userIndex].messages)\n\n\t// \t\t\tsetLoading(false)\n\t// \t}\n\n\t// \tfetchData()\n\t// },[person])\n\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\tscrollToLastMsg();\n\t\t\tsetUserAsUnread(user.chatId);\n\t\t\tsetCountMessage(0)\n\t\t\tsetShowGetMess(false)\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tuser && scrollToLastMsg();\n\t}, [users]);\n\n\t//прокрутка\n\tconst scrollToLastMsg = () => {\n\t\tlastMsgRef.current?.scrollIntoView({transition: \"smooth\"});\n\t};\n\n\tuseEffect(() => {\n        const getImage = async () => {\n            if (file) {\n                const data = new FormData();\n                data.append(\"name\", file.name);\n                data.append(\"photo\", file);\n\n               let response = await uploadFile(data);\n\t\t\t   //console.log(\"response: \", response)\n\n               setImage(response.data.path.split('.team')[1]);\n\t\t\t   //сообщение с ссылкой на файл\n\t\t\t   setMess(host + response.data.path.split('.team')[1])\n\n\t\t\t   setClearFile(true)\n            }\n        }\n        getImage();\n    }, [file])\n\n\tconst onFileChange = (e) => {\n        setFile(e.target.files[0]);\n    }\n\n\tconst openSidebar = (cb) => {\n\t\t// close any open sidebar first\n\t\tsetShowProfileSidebar(false);\n\t\tsetShowSearchSidebar(false);\n\n\t\t// call callback fn\n\t\tcb(true);\n\t};\n\n\t//функция отправки сообщения\n\tconst sendText = async () => {\n\t\t//Передаем данные боту\n\t\tlet temp=mess.replace(/\\n/g, '%0A'); //экранирование переноса строки\n\t\ttemp = temp.replace(/#/g, '%23'); \t\t //экранирование решетки\n\t\ttemp = temp.replace(/&/g, '%26'); \t\t //экранирование &\n\t\ttemp = temp.replace(/\\+/g, '%2b'); \t\t //экранирование +\n\t\ttemp = temp.replace(/>/g, '%3e'); \t\t //экранирование >\n\t\ttemp = temp.replace(/</g, '%3c'); \t\t //экранирование <\n\n\t\tlet sendToTelegram\n\t\tlet sendPhotoToTelegram\n\n\t\tif(!file) {\n\t\t\tconst url_send_msg = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${person.id}&parse_mode=html&text=${temp}`\n\t\t\tsendToTelegram = await $host.get(url_send_msg);\n\t\t} else {\n\t\t\tif (image.slice(-3) === 'gif' || image.slice(-3) === 'pdf' || image.slice(-3)==='zip') {\n\t\t\t\tconst url_send_doc = `https://api.telegram.org/bot${token}/sendDocument?chat_id=${person.id}&document=${host+image}`\n\t\t\t\tsendPhotoToTelegram = await $host.get(url_send_doc);\n\t\t\t} else {\n\t\t\t\tconst url_send_photo = `https://api.telegram.org/bot${token}/sendPhoto?chat_id=${person.id}&photo=${host+image}`\n\t\t\t\tsendPhotoToTelegram = await $host.get(url_send_photo);\n\t\t\t}\n\t\t}\n        \n\n\t\t//Выводим сообщение об успешной отправке\n\t\tif (sendToTelegram) {\n\t\t\tconsole.log('Спасибо! Ваша сообщение отправлено! ', sendToTelegram.data.result.message_id);\n\t\t}           \n\t\t//А здесь сообщение об ошибке при отправке\n\t\telse {\n\t\t\tconsole.log('Что-то пошло не так. Попробуйте ещё раз.');\n\t\t}\n\n\t\tlet message = {};\n        if(!file) {\n            message = {\n                senderId: chatAdminId, \n                receiverId: user.chatId,\n                conversationId: user.conversationId,\n                type: \"text\",\n                text: mess,\n                isBot: null,\n\t\t\t\tmessageId: sendToTelegram.data.result.message_id,\n            }\n\n\t\t\t//сохранить в контексте\n\t\t\taddNewMessage(user.chatId, mess, 'text', '', user.conversationId, sendToTelegram.data.result.message_id);\n        } else {\n            message = {\n                senderId: chatAdminId, \n                receiverId: user.chatId,\n                conversationId: user.conversationId,\n                type: \"image\",\n                text: host + image,\n                isBot: null,\n\t\t\t\tmessageId: sendPhotoToTelegram.data.result.message_id,\n            }\n\n\t\t\t//сохранить в контексте\n\t\t\taddNewMessage(user.chatId, host + image, 'image', '', user.conversationId, sendPhotoToTelegram.data.result.message_id);\n        }\n        //console.log(\"message send button: \", message);\n\n\t\t//сохранение сообщения в базе данных\n\t\tawait newMessage(message)\t\n\t}\n\n\tconst submitNewMessage = () => {\n\t\t//audio.play();\n\t\tsendText();\n\n\t\tsetMess(\"\");\n\t\tscrollToLastMsg();\n\t\tsetFile(\"\");\n        setImage(\"\");\n\t};\n\n\tconst clickClearFile = () => {\n\t\tconsole.log(\"clear file...\")\n\t\tsetClearFile(false)\n\t\t\n\t}\n\n\n\treturn (\n\t\t<div className=\"chat\">\n\t\t\t<div className=\"chat__body\">\n\t\t\t\t<div className=\"chat__bg\"></div>\n\n\t\t\t\t<Header\n\t\t\t\t\tuser={person}\n\t\t\t\t\topenProfileSidebar={() => openSidebar(setShowProfileSidebar)}\n\t\t\t\t\topenSearchSidebar={() => openSidebar(setShowSearchSidebar)}\n\t\t\t\t\tsetClearFile={setClearFile}\n\t\t\t\t\tclearFile={clearFile}\n\t\t\t\t\tclickClearFile={clickClearFile}\n\t\t\t\t/>\n\t\t\t\t<div className=\"chat__content\">\n\t\t\t\t\t{loading ?\n\t\t\t\t\t\t<CSpinner style={{margin: '50%'}}/>\n\t\t\t\t\t\t :<Convo lastMsgRef={lastMsgRef} messages={user.messages} />\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<footer className=\"chat__footer\">\n\t\t\t\t\t<div className=\"chat__footer-wrapper\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"chat__scroll-btn\"\n\t\t\t\t\t\t\taria-label=\"scroll down\"\n\t\t\t\t\t\t\tonClick={scrollToLastMsg}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<Icon id=\"downArrow\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<EmojiTray\n\t\t\t\t\t\t\tshowEmojis={showEmojis}\n\t\t\t\t\t\t\tmess={mess}\n\t\t\t\t\t\t\tsetMess={setMess}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ChatInput\n\t\t\t\t\t\t\tshowEmojis={showEmojis}\n\t\t\t\t\t\t\tsetShowEmojis={setShowEmojis}\n\t\t\t\t\t\t\tshowAttach={showAttach}\n\t\t\t\t\t\t\tsetShowAttach={setShowAttach}\n\t\t\t\t\t\t\tonFileChange={onFileChange}\n\t\t\t\t\t\t\tmess={mess}\n\t\t\t\t\t\t\tsetMess={setMess}\n\t\t\t\t\t\t\tsubmitNewMessage={submitNewMessage}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t</div>\t\t\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t\t<ChatSidebar\n\t\t\t\theading=\"Поиск сообщения\"\n\t\t\t\tactive={showSearchSidebar}\n\t\t\t\tcloseSidebar={() => setShowSearchSidebar(false)}\n\t\t\t>\n\t\t\t\t<Search />\n\t\t\t</ChatSidebar>\n\n\t\t\t<ChatSidebar\n\t\t\t\theading=\"Данные контакта\"\n\t\t\t\tactive={showProfileSidebar}\n\t\t\t\tcloseSidebar={() => setShowProfileSidebar(false)}\n\t\t\t>\n\t\t\t\t<Profile user={user} />\n\t\t\t</ChatSidebar>\n\n\t\t</div>\n\t);\n};\n\nexport default Chat;\n"],"names":["_ref","contact","setPerson","useContext","AccountContext","setUserAsUnread","usersOnline","setCountMessage","useUsersContext","lastMessage","find","item","userId","chatId","getLastMessage","messageDates","Object","keys","messages","recentMessageDate","length","JSON","stringify","pop","_jsxs","Link","className","onClick","async","name","id","avatar","getUser","children","_jsx","src","onError","e","target","avatarDefault","alt","formatTime","time","status","Icon","unread","typing","content","pinned","Sidebar","users","clients","setUsers","contacts","setContacts","useState","text","setText","loading","setLoading","users2","setUsers2","navigate","useNavigate","useEffect","userSort","sort","a","b","dateA","Date","date","filteredData","filter","user","replace","toLowerCase","includes","OptionsBtn","ariaLabel","iconId","iconClassName","onSelected","index","console","log","options","placeholder","onChange","value","CSpinner","style","margin","map","process","_Fragment","Contact","emojiTabs","icon","label","active","showEmojis","newMessage","setNewMessage","tab","Array","fill","_","rowIndex","colIndex","role","backgroundPositionX","backgroundPositionY","useAutosizeTextArea","textAreaRef","height","scrollHeight","attachButtons","click","showAttach","setShowAttach","setShowEmojis","mess","setMess","submitNewMessage","onFileChange","useRef","current","btn","htmlFor","type","display","ref","rows","openProfileSidebar","openSearchSidebar","clearFile","setClearFile","clickClearFile","CButton","color","closeSidebar","heading","Search","inputProps","username","setUsername","form","setForm","addNewName","addNewAvatar","img","setImg","showEdit","setShowEdit","input","React","host","sendFile","data","FormData","append","response","uploadFile","newAvatar","path","split","editContactAvatar","error","defaultAvatar","preventDefault","files","onSubmit","newName","editContact","onFocus","select","borderBottom","changeUsername","cursor","media","Checkbox","lastMsgRef","allMessages","person","dates","chatAdminId","msgRef","replyMessage","delMessageContext","CustomToggle","_ref2","displayName","CustomMenu","_ref3","labeledBy","setValue","backgroundColor","toArray","child","_child$props$children","props","startsWith","change","message","parse","eventkey","delMessage","url_del_msg","delToTelegram","$host","get","dateIndex","msgIndex","_message$content","_message$content2","_replyMessage","_message$content3","_message$content4","assignRef","undefined","image","sender","endsWith","width","title","xlsIcon","href","rel","docIcon","textAlign","borderRadius","descript","Dropdown","onSelect","Toggle","as","Menu","Item","eventKey","el","scrollToMsg","reply","scrollIntoView","transition","token","Chat","addNewMessage","setShowGetMess","toString","showProfileSidebar","setShowProfileSidebar","showSearchSidebar","setShowSearchSidebar","file","setFile","setImage","setMessages","user2","setUser2","scrollToLastMsg","_lastMsgRef$current","getImage","openSidebar","cb","Header","Convo","EmojiTray","ChatInput","sendToTelegram","sendPhotoToTelegram","temp","slice","url_send_doc","url_send_photo","url_send_msg","result","message_id","senderId","receiverId","conversationId","isBot","messageId","sendText","ChatSidebar","Profile"],"sourceRoot":""}