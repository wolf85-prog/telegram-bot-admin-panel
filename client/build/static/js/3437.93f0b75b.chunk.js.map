{"version":3,"file":"static/js/3437.93f0b75b.chunk.js","mappings":"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","sources":["assets/images/close.svg","webpack://client/./src/components/MyModal/MyModal.module.css?67e6","components/MyModal/MyModal.jsx","pages/Distribution.js"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgClose(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.62399 10.0556L2.35384 15.3257L0.0294979 13.0014L5.29965 7.73122L0.00463867 2.4362L2.44084 0L7.73586 5.29501L12.9936 0.0372888L15.3179 2.36163L10.0602 7.61935L15.3676 12.9268L12.9314 15.363L7.62399 10.0556Z\",\n    fill: \"#E8F1F9\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.292280e2a4c33572fa44d4be444aac11.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"myModal\":\"MyModal_myModal__PMGvr\",\"showModal\":\"MyModal_showModal__1mw-9\",\"myModalContent\":\"MyModal_myModalContent__SsdJo\",\"active\":\"MyModal_active__-NfGc\"};","import React from 'react';\nimport cl from './MyModal.module.css';\n\nconst MyModal = ({children, visible, setVisible}) => {\n\n    const rootClasses = [cl.myModal]\n\n    if (visible) {\n        rootClasses.push(cl.active);\n    }\n\n    return (\n        <div className={rootClasses.join(' ')} onClick={() => setVisible(false)}>\n            <div className={cl.myModalContent} onClick={(e) => e.stopPropagation()}>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default MyModal;","import React, { Suspense, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { delDistribution, getDistributions } from 'src/http/adminAPI';\nimport MyModal from \"../components/MyModal/MyModal\";\nimport Close from \"../assets/images/close.svg\"\n\nconst Distribution = () => {\n  const { users: zakazchiki } = useUsersContext();\n  const [distributions, setDistributions]= useState([]);\n  const [loading, setLoading]= useState(true);\n  const [visibleModal, setVisibleModal] = useState(false);\n  const [userReceivers, setUserReceivers]= useState([]);\n  const [count, setCount] = useState(0)\n  const [count2, setCount2] = useState(0)\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n\t\t\tlet messages = await getDistributions();\n      //console.log(\"distributions: \", messages)\n\n      let strReceivers = ''\n      let countSuccess = 0\n\n      const arrDitributions = []\n      messages.map((distrib, index) => {\n        countSuccess = 0\n        \n        JSON.parse(distrib.receivers).map((receiver)=>{\n          strReceivers = receiver.label + ' '\n          if (receiver.status === 200) {\n            countSuccess = countSuccess + 1\n          }  \n        })\n\n        const d = new Date(distrib.createdAt);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year} ${chas}:${minut}`\n\n        const newDistribution = {\n          id: distrib.id,\n\t\t\t\t\tname: distrib.name,\n          text: distrib.text,\n          image: distrib.image.split('5000/')[1] !=='' ? distrib.image: '',\n          button: distrib.button,\n          receivers: countSuccess, //strReceivers, //JSON.parse(distrib.receivers)[index-1].label,\n          datestart: newDateMessage,\n          status: distrib.delivered ? \"отправлено\" : \"не отправлено\",\n          count: JSON.parse(distrib.receivers).length,\n          users: JSON.parse(distrib.receivers)\n\t\t\t\t}\n        //console.log(index)\n        arrDitributions.push(newDistribution)\n      })\n\n      setDistributions(arrDitributions) \n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[])\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    setDistributions(distributions.filter(p => p.id !== desk.id))\n    //удаление сообщения в базе данных\n    await delDistribution(desk.id)\n  }\n\n  const showReceivers = (users) => {\n    console.log(\"users: \", zakazchiki)\n    console.log(\"users2: \", users)\n\n    setVisibleModal(true)\n    let count = 0\n    let count2 = 0\n    let arrReceiver = []\n\n    users.map((item, index)=> {\n      if (item.status === 200) {\n        count++\n      } else {\n        count2++\n      }\n      const worker = zakazchiki.find((i)=> i.chatId === item.value)\n      //console.log(\"worker: \", worker)\n      const obj = {\n        user: item.value,\n        status: item.status,\n        userfamily: worker?.name,\n        username: '',\n      }\n      arrReceiver.push(obj)\n    })\n    setCount(count)\n    setCount2(count2)\n    setUserReceivers(arrReceiver)\n    //setUsers(arrReceiver)\n    //console.log(JSON.stringify(users))\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Рассылки</h2>\n                      <Link to={'/distribution_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardHeader>Рассылки</CCardHeader>\n                            <CCardBody>\n\n                              <br /> \n\n                            {loading ? \n                                  \n                              <CSpinner/> :\n\n                              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                <CTableHead className='table-dark'>\n                                  <CTableRow>\n                                    <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Кнопка</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Текст</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Получатели</CTableHeaderCell>   \n                                    <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                  </CTableRow>\n                                </CTableHead>\n                                <CTableBody>\n                                  {distributions.map((item, index) => (\n                                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                                      {/* <CTableDataCell>\n                                        <div>{index+1}</div>\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.datestart}</div>\n                                      </CTableDataCell>      \n                                      <CTableDataCell className=\"text-center\">\n                                        {item.image.endsWith('.pdf') ?\n                                        <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                        : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.button}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                        <div>{item.text}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\" onClick={()=>showReceivers(item.users)}>\n                                        <div>{item.count} | {item.receivers}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.status}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <CButton color=\"light\" onClick={() => removeDescription(item)}>\n                                          <img src={deleteIcon} alt='' width='10px' />\n                                        </CButton>\n                                      </CTableDataCell>\n                                    </CTableRow>\n                                  ))}\n                                </CTableBody>\n                              </CTable>\n                            }                              \n                            </CCardBody>\n                          </CCard>\n\n                          <MyModal alignment=\"center\" visible={visibleModal} setVisible={setVisibleModal} onClose={() => setVisibleModal(false)}>\n                                          {/* <CModalHeader>\n                                            <CModalTitle>Получатели рассылки</CModalTitle>\n                                          </CModalHeader> */}\n                                          <div style={{paddingTop: '25px'}}>\n                                            <CRow className=\"mb-3\" >\n                                              <CCol sm={9} >\n                                                <h3>Получатели</h3>\n                                              </CCol>\n                                            </CRow>\n                                          </div>\n                                          \n                                          <img onClick={()=>setVisibleModal(false)} src={Close} alt='' style={{position: 'absolute', right: '20px', top: '20px', width: '15px'}}/>\n                                          <CCardBody>\n\n                                          {/* Рассылка: 800 | Доставлен: 600 | Не доставлено: 200  */}\n                                          <p style={{display: 'flex', justifyContent: 'space-between'}}><span>Рассылка: {count+count2}</span> <span>Доставлено: {count}</span> <span> Не доставлено: {count2}</span></p>  \n\n                                            <div className=\"scroll-table\">\n                                              <CTable align=\"middle\" className=\"mb-0\" responsive style={{color: '#ffffff'}}>\n                                                <CTableHead className='table-dark'>\n                                                  <CTableRow>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '45px'}}>№</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\"style={{width: '110px'}}>TelegramID</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '170px'}}>ФИО</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '100px'}}>Статус</CTableHeaderCell>\n                                                  </CTableRow>\n                                                </CTableHead>\n                                              </CTable>\t\n                                              <div className=\"scroll-table-body\" style={{height: '300px', overflowX: 'auto'}}>\n                                                <CTable>\n                                                  <CTableBody style={{height: '300px', overflowX: 'auto'}}>\n                                                  {userReceivers.map((item, index) => (\n                                                    <CTableRow key={index+1}>\n                                                      <CTableHeaderCell style={{width: '45px'}} scope=\"row\">{index < 9 ? '0'+(index+1) : index+1}</CTableHeaderCell>\n                                                      <CTableDataCell style={{width: '110px'}}>{item.user}</CTableDataCell>\n                                                      <CTableDataCell style={{width: '170px'}}>{item.userfamily} {item.username}</CTableDataCell>\n                                                      <CTableDataCell className='text-center' style={{width: '100px', color: item.status === 200 ? '#7070e7' : 'red'}}>{item.status === 200 ? \"Получено\" : \"Не получено\"}</CTableDataCell>\n                                                    </CTableRow> \n                                                  ))\n                                                  }   \n                                                  </CTableBody>\n                                                </CTable>\n                                              </div>\t\n                                            </div>\n\n                                            {/* <p style={{display: 'flex', justifyContent: 'space-between'}}><span>Получено: {count}</span> <span>Не получено: {count2}</span></p>   */}\n                                          </CCardBody> \n                                          \n                          </MyModal> \n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Distribution\n"],"names":["_ref","children","visible","setVisible","rootClasses","cl","push","_jsx","className","join","onClick","e","stopPropagation","zakazchiki","useUsersContext","users","_useState","useState","_useState2","_slicedToArray","distributions","setDistributions","_useState3","_useState4","loading","setLoading","_useState5","_useState6","visibleModal","setVisibleModal","_useState7","_useState8","userReceivers","setUserReceivers","_useState9","_useState10","count","setCount","_useState11","_useState12","count2","setCount2","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","messages","countSuccess","arrDitributions","wrap","_context","prev","next","getDistributions","sent","map","distrib","index","JSON","parse","receivers","receiver","label","status","d","Date","createdAt","year","getFullYear","month","String","getMonth","padStart","day","getDate","chas","getHours","minut","getMinutes","newDateMessage","concat","newDistribution","id","name","text","image","split","button","datestart","delivered","length","stop","apply","arguments","removeDescription","_ref2","_callee2","desk","_context2","filter","p","delDistribution","_x","_jsxs","AppSidebar","AppHeader","CContainer","lg","Suspense","fallback","CSpinner","color","_Fragment","Link","to","CButton","size","CRow","CCol","xs","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","item","CTableDataCell","endsWith","src","height","width","title","href","target","rel","alt","style","objectFit","console","log","arrReceiver","worker","find","i","chatId","value","obj","user","userfamily","username","showReceivers","deleteIcon","MyModal","alignment","onClose","paddingTop","sm","Close","position","right","top","display","justifyContent","scope","overflowX","AppFooter"],"sourceRoot":""}