{"version":3,"file":"static/js/274.6bca97f4.chunk.js","mappings":"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","sources":["pages/DistributionW.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport editIcon from 'src/assets/images/pencil.png'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\nimport { delDistributionW } from 'src/http/adminAPI';\nimport { editContact } from 'src/http/chatAPI'\n\nconst DistributionW = () => {\n  const { distributionsWork: messages } = useUsersContext();\n  const [distributionsWork, setDistributionsWork]= useState([]);\n  const [loading, setLoading]= useState(true);\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n\t\t\t//let response = await getDistributions();\n      console.log(\"distributionsW: \", messages)\n\n      let strReceivers = ''\n\n      const arrDitributions = []\n      messages.map((distrib, index) => {\n        // JSON.parse(distrib.receivers).map((receiver)=>{\n        //   strReceivers = receiver.label + ' '\n        // })\n\n        const d = new Date(distrib.createdAt);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year} ${chas}:${minut}`\n\n        const newDistribution = {\n          id: distrib.id,\n          text: distrib.text,\n          image: distrib.image.split('5000/')[1] !=='' ? distrib.image : '',\n          project: distrib.project,\n          receivers: distrib.receivers, //strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n          datestart: newDateMessage,\n          status: distrib.delivered ? \"отправлено\" : \"не отправлено\",\n\t\t\t\t}\n        //console.log(index)\n        arrDitributions.push(newDistribution)\n      })\n\n      setDistributionsWork(arrDitributions) \n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[messages])\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    setDistributionsWork(distributionsWork.filter(p => p.id !== desk.id))\n    //удаление сообщения в базе данных\n    await delDistributionW(desk.id)\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Рассылки</h2>\n                      <Link to={'/distributionw_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardHeader>Рассылки для специалистов</CCardHeader>\n                            <CCardBody>\n\n                              <br /> \n\n                            {loading ? \n                                  \n                              <CSpinner/> :\n\n                              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                <CTableHead className='table-dark'>\n                                  <CTableRow>\n                                    {/* <CTableHeaderCell>№</CTableHeaderCell> */}\n                                    <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Название проекта</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Категории</CTableHeaderCell>   \n                                    <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                    <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                  </CTableRow>\n                                </CTableHead>\n                                <CTableBody>\n                                  {distributionsWork.map((item, index) => (\n                                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                                      {/* <CTableDataCell>\n                                        <div>{index+1}</div>\n                                      </CTableDataCell> */}\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.datestart}</div>\n                                      </CTableDataCell>  \n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.project}</div>\n                                      </CTableDataCell>    \n                                      <CTableDataCell className=\"text-center\">\n                                        {item.image.endsWith('.pdf') ?\n                                        <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                        : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                        }\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.receivers}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <div>{item.status}</div>\n                                      </CTableDataCell>\n                                      <CTableDataCell className=\"text-center\">\n                                        <CButton color=\"light\" style={{marginRight: '10px'}}>\n                                          <img src={editIcon} alt='' width='10px' />\n                                        </CButton>\n                                        \n                                        <CButton color=\"light\" onClick={() => removeDescription(item)}>\n                                          <img src={deleteIcon} alt='' width='10px' />\n                                        </CButton>\n                                      </CTableDataCell>\n                                    </CTableRow>\n                                  ))}\n                                </CTableBody>\n                              </CTable>\n                            }                              \n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionW\n"],"names":["messages","useUsersContext","distributionsWork","useState","setDistributionsWork","loading","setLoading","useEffect","fetchData","console","log","arrDitributions","map","distrib","index","d","Date","createdAt","year","getFullYear","month","String","getMonth","padStart","day","getDate","chas","getHours","minut","getMinutes","newDateMessage","newDistribution","id","text","image","split","project","receivers","datestart","status","delivered","push","removeDescription","desk","filter","p","delDistributionW","className","lg","Suspense","fallback","color","to","size","xs","align","hover","responsive","item","endsWith","src","height","width","title","href","target","rel","alt","style","objectFit","marginRight","editIcon","onClick","deleteIcon"],"sourceRoot":""}