{"version":3,"file":"static/js/3161.ab49e25c.chunk.js","mappings":"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","sources":["assets/images/arrowDown.svg","webpack://client/./src/components/MyModal/MyModal.module.css?67e6","components/MyModal/MyModal.jsx","pages/DistributionW.js"],"sourcesContent":["var _metadata, _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgArrowDown(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 256 256\",\n    enableBackground: \"new 0 0 256 256\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _metadata || (_metadata = /*#__PURE__*/React.createElement(\"metadata\", null, \" Svg Vector Icons : http://www.onlinewebfonts.com/icon \")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#000000\",\n    d: \"M128,10C62.9,10,10,62.9,10,128c0,65.1,52.9,118,118,118c65.1,0,118-52.9,118-118C246,62.9,193.1,10,128,10z M173.8,148.4l-37,31.4c-2.5,2.1-5.6,3.2-8.7,3.2s-6.2-1.1-8.7-3.2l-37-31.4c-5.7-4.8-6.4-13.3-1.5-19c4.8-5.7,13.3-6.4,19-1.5l14.9,12.6V86.4c0-7.4,6-13.5,13.5-13.5s13.5,6,13.5,13.5v54.2l14.9-12.6c5.7-4.8,14.2-4.1,19,1.5C180.1,135.1,179.4,143.6,173.8,148.4z\"\n  })))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowDown);\nexport default __webpack_public_path__ + \"static/media/arrowDown.4f7021c2d42a26d0369da8983c53315a.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"myModal\":\"MyModal_myModal__KxbTn\",\"showModal\":\"MyModal_showModal__Unqye\",\"myModalContent\":\"MyModal_myModalContent__mbl-X\",\"active\":\"MyModal_active__irwIH\"};","import React from 'react';\r\nimport cl from './MyModal.module.css';\r\n\r\nconst MyModal = ({children, visible, setVisible}) => {\r\n\r\n    const rootClasses = [cl.myModal]\r\n\r\n    if (visible) {\r\n        rootClasses.push(cl.active);\r\n    }\r\n\r\n    return (\r\n        <div className={rootClasses.join(' ')} onClick={() => setVisible(false)}>\r\n            <div className={cl.myModalContent} onClick={(e) => e.stopPropagation()}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyModal;","import React, { Suspense, useState, useEffect, useRef } from 'react'\nimport { useSocketContext } from \"./../chat-app-new/context/socketContext\";\nimport { Link } from 'react-router-dom'\nimport { \n  CContainer, \n  CSpinner, \n  CButton, \n  CTable, \n  CTableRow, \n  CTableHead,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CToast,\n  CToastBody,\n  CToaster,\n  CToastClose,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CFormInput,\n  CCollapse,\n  CTooltip,\n} from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nimport deleteIcon from 'src/assets/images/delete.png'\nimport editIcon from 'src/assets/images/pencil.png'\nimport copyIcon from 'src/assets/images/copy.png'\nimport { useUsersContext } from \"../chat-app-new/context/usersContext\";\nimport { delDistributionW, getDistributionsCountW, getPlan, newPlan, getDistributionsWPlan, getDistributionsW} from 'src/http/adminAPI';\n\nimport MyModal from \"../components/MyModal/MyModal\";\nimport Close from \"../assets/images/close.svg\"\nimport arrowDown from '../assets/images/arrowDown.svg'\n\nconst DistributionW = () => {\n  const socket = useSocketContext();\n  const { workersAll, distributionsWork, setDistributionsWork } = useUsersContext();\n  //const [distributionsWork, setDistributionsWork]= useState([]);\n  const [userReceivers, setUserReceivers]= useState([]);\n  const [users, setUsers]= useState([]);\n  const [loading, setLoading]= useState(true);\n  const [proj, setProj] = useState('');\n  const [seconds, setSeconds] = useState(1);\n\n  const [visibleModal, setVisibleModal] = useState(false);\n\n  const [text, setText]= useState(\"\");\n\n  const [count, setCount] = useState(0)\n  const [count2, setCount2] = useState(0)\n\n  const [countDistrib, setCountDistrib] = useState(20)\n\n  const [showTable, setShowTable] = useState([])\n\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n\n  const exampleToast = (\n    <CToast autohide={true} visible={true} color=\"success\" className=\"text-white align-items-center\">\n      <div className=\"d-flex\">\n        <CToastBody>Рассылка успешно удалена!</CToastBody>\n        <CToastClose className=\"me-2 m-auto\" white />\n      </div>\n    </CToast>\n  )\n\n  //get Distribution\n  useEffect(() => {\n    const fetchData = async () => {\n      let response = await getDistributionsCountW(20, distributionsWork.length);\n      let response2 = await getDistributionsWPlan();\n      //console.log(\"response2: \", response2)\n\n      //сортировка\n      const messageSort = [...response].sort((a, b) => {       \n        var dateA = new Date(a.datestart), dateB = new Date(b.datestart) \n        return dateB-dateA  //сортировка по убывающей дате  \n      })\n\n      const messageSort2 = [...response2].sort((a, b) => {       \n        var dateA = new Date(a.datestart), dateB = new Date(b.datestart) \n        return dateA-dateB  //сортировка по возрастающей дате  \n      })\n      //console.log(\"messageSort2: \", messageSort2)\n      //console.log(\"messageSort: \", messageSort)\n\n      let all = [...messageSort2, ...messageSort]\n      //console.log(\"all: \", all)\n      const arrDitributions = []\n      all.map((distrib, index) => {\n          const d = new Date(distrib.datestart);\n          const year = d.getFullYear();\n          const month = String(d.getMonth()+1).padStart(2, \"0\");\n          const day = String(d.getDate()).padStart(2, \"0\");\n          const chas = d.getHours();\n          const minut = String(d.getMinutes()).padStart(2, \"0\");\n          const newDateMessage = `${day}.${month}.${year}`\n          const newTimeMessage = `${chas}:${minut}`\n\n          let space = /,/gi;\n\n          let deliv = distrib.delivered\n          //console.log(\"deliv: \", distrib.delivered)\n\n          const newDistribution = {\n            id: distrib.id,\n            text: distrib.text,\n            image: distrib.image !=='' ? distrib.image : '',\n            project: distrib.project,\n            projectId: distrib.projectId ? distrib.projectId : '',\n            receivers: distrib.receivers.replace(space, '<br/>'), //strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n            categories: distrib.receivers,\n            count: distrib.count,\n            date: newDateMessage,\n            timestart: newTimeMessage,\n            datestart: distrib.datestart,\n            status: deliv ? \"отправлено\" : \"запланировано\",\n            uuid: distrib.uuid,\n            success: distrib.success,\n            report: distrib.report,\n            delivered: deliv,\n            users: distrib.users,\n            button: distrib.button,\n            stavka: distrib.stavka,\n            editButton: distrib.editButton,\n            target: distrib.target,\n          }\n          arrDitributions.push(newDistribution)\n      })\n\n      //console.log(\"arrDitributions: \", arrDitributions)\n      setDistributionsWork(arrDitributions)\n      setLoading(false)\n    }\n\n    fetchData();\n    \n  },[])\n\n\n  //получить рассылку\n\tconst fetchDistribution = async () => {\n\t\tconsole.log(\"Обновление списка рассылок...\")\n\t\tlet response = await getDistributionsCountW(20, distributionsWork.length);\n\t\tlet response2 = await getDistributionsWPlan();\n\n\t\t//сортировка\n\t\tconst messageSort = [...response].sort((a, b) => {       \n\t\t\tvar dateA = new Date(a.datestart), dateB = new Date(b.datestart) \n\t\t\treturn dateB-dateA  //сортировка по убывающей дате  \n\t\t})\n\n\t\tconst messageSort2 = [...response2].sort((a, b) => {       \n\t\t\tvar dateA = new Date(a.datestart), dateB = new Date(b.datestart) \n\t\t\treturn dateA-dateB  //сортировка по убывающей дате  \n\t\t})\n\n\t\tlet all = [...messageSort2, ...messageSort]\n\n    const arrDitributions = []\n    all.map((distrib, index) => {\n        const d = new Date(distrib.datestart);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst chas = d.getHours();\n\t\t\t\tconst minut = String(d.getMinutes()).padStart(2, \"0\");\n\t\t\t\tconst newDateMessage = `${day}.${month}.${year}`\n        const newTimeMessage = `${chas}:${minut}`\n\n        let space = /,/gi;\n\n        let deliv = distrib.delivered\n        //console.log(\"deliv: \", distrib.delivered)\n\n        const newDistribution = {\n          id: distrib.id,\n          text: distrib.text,\n          image: distrib.image !=='' ? distrib.image : '',\n          project: distrib.project,\n          projectId: distrib.projectId ? distrib.projectId : '',\n          receivers: distrib.receivers.replace(space, '<br/>'), //strReceivers,//JSON.parse(distrib.receivers)[index-1].label,\n          categories: distrib.receivers,\n          count: distrib.count,\n          date: newDateMessage,\n          timestart: newTimeMessage,\n          datestart: distrib.datestart,\n          status: deliv ? \"отправлено\" : \"запланировано\",\n          uuid: distrib.uuid,\n          success: distrib.success,\n          report: distrib.report,\n          delivered: deliv,\n          users: distrib.users,\n          button: distrib.button,\n          stavka: distrib.stavka,\n          editButton: distrib.editButton,\n          target: distrib.target,\n\t\t\t\t}\n        arrDitributions.push(newDistribution)\n    })\n\n\t\tsetDistributionsWork(arrDitributions)\n\t}\n\n  useEffect(() => {\n\t\tsocket.on(\"getDistrib\", fetchDistribution);\t\n\t}, [socket]);\n\n\n  //обновление списка рассылок\n  useEffect(() => {\n    const timer = setInterval(() => {\n      socket.emit(\"sendDistrib\", { \n        task: true,\n      })\n    }, 5000);\n    \n    // очистка интервала\n    return () => clearInterval(timer);\n  });\n\n  {/* Удаление рассылки */}\n  const removeDescription = async(desk) => {\n    addToast(exampleToast) //ваша рассылка удалена\n    \n    setDistributionsWork(distributionsWork.filter(p => p.id !== desk.id))\n    \n    //удаление сообщения в базе данных\n    await delDistributionW(desk.id)  \n\n    //удаление проекта из планировщика\n    //обновить план в БД\n    let plan = await getPlan(desk.date);\n    const newArray = JSON.parse(plan.times)\n\n    let dateIndex = newArray.findIndex((i) => i.time === desk.timestart)\n    const datesCopy = JSON.parse(JSON.stringify(newArray));\n    const dateObject = datesCopy[dateIndex];\n    datesCopy[dateIndex] = { ...dateObject, ['proj']: '', ['save']: false};\n    let planer_str = JSON.stringify(datesCopy)\n\n    const newObj = {\n      \"datestart\": desk.date,\n      \"times\": planer_str\n    }\n\n    await newPlan(newObj)\n  }\n\n  const showReceivers = (users) => {\n    //console.log(workersAll)\n\n    setVisibleModal(true)\n    let count = 0\n    let count2 = 0\n    let arrReceiver = []\n    JSON.parse(users).map((item, index)=> {\n      if (item.status === 200) {\n        count++\n      } else {\n        count2++\n      }\n      const worker = workersAll.find((i)=> i.chatId === item.user)\n      const obj = {\n        user: item.user,\n        status: item.status,\n        userfamily: worker.userfamily,\n        username: worker.username,\n        categories: worker.worklist,\n      }\n      arrReceiver.push(obj)\n    })\n    setCount(count)\n    setCount2(count2)\n    setUserReceivers(arrReceiver)\n    setUsers(arrReceiver)\n    //console.log(JSON.stringify(users))\n  }\n\n\n  //поиск\n  useEffect(() => {\n    console.log(\"users: \", users)\n    if (users.length > 0) {\n      const filteredData = users.filter(user=> (user.userfamily+user.username+user.user)?.toLowerCase().includes(text.toLowerCase()));\n      setUserReceivers(filteredData);\n    }\n\t\t      \n  }, [text, users]);\n\n\n  const handleClick = (ind) => {\n    console.log(ind, showTable[ind])\n\n    setShowTable(prevShownTable => ({\n        ...prevShownTable,\n        [ind]: !prevShownTable[ind]\n      }));\n  }\n\n  const clickNext = async() => {\n\n    //1 все рассылки\n\t\t//let response = await getDistributionsCountW(100, distributionsWork.length);\n    //console.log(\"distrib size: \", response.length)\n\n    setCountDistrib(100)\n\n    //fetchDistribution(100)\n\n    //const arrayDistrib = []\n\t\t\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    {/* <h2>Рассылки</h2> */}\n                      <Link to={'/distributionw_add'}><CButton color=\"primary\" size=\"lg\" >Новая рассылка</CButton></Link>\n                      <CToaster ref={toaster} push={toast} placement=\"top-end\" /> \n                      <br />\n                      <br />\n                      <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            <CCardBody>\n\n                              {loading ? \n                                    \n                                <CSpinner/> :\n\n                                <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                                  <CTableHead className='table-light'>\n                                    <CTableRow>\n                                      <CTableHeaderCell className=\"text-center\">Дата</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\">Время</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\">Название проекта</CTableHeaderCell>\n                                      {/* <CTableHeaderCell className=\"text-center\">Картинка</CTableHeaderCell> */}\n                                      <CTableHeaderCell className=\"text-center\">Категория</CTableHeaderCell> \n                                      <CTableHeaderCell className=\"text-center\">Получатели</CTableHeaderCell>    \n                                      <CTableHeaderCell className=\"text-center\">Статус</CTableHeaderCell>\n                                      <CTableHeaderCell className=\"text-center\">Управление</CTableHeaderCell>\n                                    </CTableRow>\n                                  </CTableHead>\n                                  <CTableBody>\n                                    {distributionsWork.map((item, index) => (\n                                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                                        {/* <CTableDataCell>\n                                          <div>{index+1}</div>\n                                        </CTableDataCell> */}\n                                        <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                          <div>{item.date}</div>\n                                        </CTableDataCell>  \n                                        <CTableDataCell className=\"text-center\" style={{width: '50px'}}>\n                                          <div>{item.timestart}</div>\n                                        </CTableDataCell>  \n                                        <CTableDataCell className=\"text-center\">\n                                          <CTooltip\n                                            content={item.projectId}\n                                            placement=\"top\"\n                                          >\n                                            <div>{item.project}</div>\n                                          </CTooltip>\n                                        </CTableDataCell>    \n                                        {/* <CTableDataCell className=\"text-center\">\n                                          {item.image.endsWith('.pdf') ?\n                                          <iframe src={item.image} height=\"120px\" width=\"200px\" title=\"myFramePdf\"/>\n                                          : <div>{item.image ? <a href={item.image} target='_blank' rel=\"noreferrer\"><img src={item.image} alt='' width={230} height={120} style={{objectFit: 'contain'}}></img></a> : ''}</div>\n                                          }\n                                        </CTableDataCell> */}\n                                        <CTableDataCell className=\"text-center\">\n                                          <div dangerouslySetInnerHTML={{__html: item.receivers}} />\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\" onClick={()=>showReceivers(item.report)} style={{cursor: 'pointer'}}>\n                                          {\n                                            item.status === 'запланировано' ? \n                                            <div style={{color: '#3887cd'}}>{item.count}</div>\n                                            :<div>{item.count} | {item.success ? item.success : \"0\"}</div>\n                                          }\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          {\n                                            item.status === 'запланировано' ? \n                                            <div style={{color: '#3887cd'}}>{item.status}</div>\n                                            :<div>{item.status}</div>\n                                          }\n                                        </CTableDataCell>\n                                        <CTableDataCell className=\"text-center\">\n                                          {/* <Link to={'/distributionw_planer'} state={{ project: proj}}>\n                                            <CButton color=\"light\" style={{marginRight: '10px'}}>\n                                              <img src={editIcon} alt='' width='10px' />\n                                            </CButton>\n                                          </Link> */}\n\n                                          {item.projectId ?   \n                                            <Link to={'/distributionw_edit'} state={{editD: true, delivered: item.delivered, project: item.projectId, id: item.id, category: item.categories, users: item.users, text: item.text, img: item.image, date: item.datestart, uuid: item.uuid, button: item.button, editButton: item.editButton, stavka: item.stavka, target: item.target}}><CButton color=\"light\" style={{marginRight: '10px', borderColor: 'transparent', background: '#2b3338',}}><img src={item.delivered ? copyIcon : editIcon} alt='' width='10px' /></CButton></Link>\n                                            :<Link to={''} state={{ project: `${proj}`, }}><CButton color=\"light\" style={{borderColor: 'transparent', background: '#2b3338', marginRight: '10px'}}><img src={item.delivered ? copyIcon : editIcon} alt='' width='10px' /></CButton></Link>\n                                          }\n                                          \n                                          <CButton color=\"light\" style={{borderColor: 'transparent', background: '#2b3338'}} onClick={() => removeDescription(item)}>\n                                            <img src={deleteIcon} alt='' width='10px' />\n                                          </CButton>\n\n                                        </CTableDataCell>\n                                      </CTableRow>\n                                    ))}\n                                  </CTableBody>\n                                </CTable>\n                              } \n\n                              <div style={{display: 'flex', justifyContent: 'center' }}>\n                                <img src={arrowDown} alt='' onClick={()=>clickNext()} style={{width: '50px', marginTop: '15px', cursor: 'pointer'}}></img>\n                              </div>                             \n                            </CCardBody>\n                          </CCard>\n\n                          <MyModal alignment=\"center\" visible={visibleModal} setVisible={setVisibleModal} onClose={() => setVisibleModal(false)}>\n                                          {/* <CModalHeader>\n                                            <CModalTitle>Получатели рассылки</CModalTitle>\n                                          </CModalHeader> */}\n                                          <div style={{paddingTop: '25px'}}>\n                                            <CRow className=\"mb-3\" >\n                                              <CCol sm={9} >\n                                                <h3>Получатели</h3>\n                                              </CCol>\n                                              <CCol sm={3} >\n                                                <CFormInput placeholder=\"Поиск...\" onChange={(e)=>setText(e.target.value)} aria-label=\"spec\"/>\n                                              </CCol>\n                                            </CRow>\n                                          </div>\n                                          \n                                          <img onClick={()=>setVisibleModal(false)} src={Close} alt='' style={{position: 'absolute', right: '20px', top: '20px', width: '15px'}}/>\n                                          <CCardBody>\n\n                                          {/* Рассылка: 800 | Доставлен: 600 | Не доставлено: 200  */}\n                                          <p style={{display: 'flex', justifyContent: 'space-between'}}><span>Рассылка: {count+count2}</span> <span>Доставлено: {count}</span> <span> Не доставлено: {count2}</span></p>  \n\n                                            <div className=\"scroll-table\">\n                                              <CTable align=\"middle\" className=\"mb-0\" responsive style={{color: '#ffffff'}}>\n                                                <CTableHead className='table-dark'>\n                                                  <CTableRow>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '45px'}}>№</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\"style={{width: '110px'}}>TelegramID</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '170px'}}>ФИО</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '180px'}}>Специальность</CTableHeaderCell>\n                                                    <CTableHeaderCell scope=\"col\" style={{width: '100px'}}>Статус</CTableHeaderCell>\n                                                  </CTableRow>\n                                                </CTableHead>\n                                              </CTable>\t\n                                              <div className=\"scroll-table-body\" style={{height: '300px', overflowX: 'auto'}}>\n                                                <CTable>\n                                                  <CTableBody style={{height: '300px', overflowX: 'auto'}}>\n                                                  {userReceivers.map((item, index) => (\n                                                    <CTableRow key={index+1}>\n                                                      <CTableHeaderCell style={{width: '45px'}} scope=\"row\">{index < 9 ? '0'+(index+1) : index+1}</CTableHeaderCell>\n                                                      <CTableDataCell style={{width: '110px'}}>{item.user}</CTableDataCell>\n                                                      <CTableDataCell style={{width: '170px'}}>{item.userfamily} {item.username}</CTableDataCell>\n                                                      <CTableDataCell style={{fontSize: '11px', width: '180px'}}>\n                                                        {/* {JSON.parse(item.categories).map(it=>\"- \"+it.spec).join('\\n')} */}\n                                                        \n                                                        <div onClick={()=>handleClick(index)} style={{cursor: 'pointer', paddingLeft: '35px'}}>{!showTable[index] ? 'Посмотреть' : <br/>}</div>\n                                                        <CCollapse visible={showTable[index]}>\n                                                          <table>\n                                                            <tbody>\n                                                              {item.categories !== '' ? (JSON.parse(item.categories)).map((spec, index)=>( \n                                                                  <tr key={index}>\n                                                                    <td>{spec.spec !== '' ? \"- \" + spec.spec : ''}</td>\n                                                                  </tr>          \n                                                              )) : \"\"}\n                                                            </tbody> \n                                                          </table>\n                                                        </CCollapse>\n                                                      </CTableDataCell>\n                                                      <CTableDataCell className='text-center' style={{width: '100px', color: item.status === 200 ? '#7070e7' : 'red'}}>{item.status === 200 ? \"Получено\" : \"Не получено\"}</CTableDataCell>\n                                                    </CTableRow> \n                                                  ))\n                                                  }   \n                                                  </CTableBody>\n                                                </CTable>\n                                              </div>\t\n                                            </div>\n\n                                            {/* <p style={{display: 'flex', justifyContent: 'space-between'}}><span>Получено: {count}</span> <span>Не получено: {count2}</span></p>   */}\n                                          </CCardBody> \n                                          \n                          </MyModal>              \n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionW\n"],"names":["children","visible","setVisible","rootClasses","cl","push","className","join","onClick","e","stopPropagation","socket","useSocketContext","useUsersContext","workersAll","distributionsWork","setDistributionsWork","useState","userReceivers","setUserReceivers","users","setUsers","loading","setLoading","proj","visibleModal","setVisibleModal","text","setText","count","setCount","count2","setCount2","setCountDistrib","showTable","setShowTable","toast","addToast","toaster","useRef","exampleToast","autohide","color","white","useEffect","fetchData","getDistributionsCountW","length","response","getDistributionsWPlan","response2","messageSort","sort","a","b","dateA","Date","datestart","messageSort2","all","arrDitributions","map","distrib","index","d","year","getFullYear","month","String","getMonth","padStart","day","getDate","chas","getHours","minut","getMinutes","newDateMessage","newTimeMessage","deliv","delivered","newDistribution","id","image","project","projectId","receivers","replace","categories","date","timestart","status","uuid","success","report","button","stavka","editButton","target","fetchDistribution","console","log","on","timer","setInterval","emit","task","clearInterval","removeDescription","desk","filter","p","delDistributionW","getPlan","plan","newArray","JSON","parse","times","dateIndex","findIndex","i","time","datesCopy","stringify","dateObject","planer_str","newObj","newPlan","filteredData","user","userfamily","username","toLowerCase","includes","clickNext","lg","Suspense","fallback","to","size","ref","placement","xs","align","hover","responsive","item","style","width","content","dangerouslySetInnerHTML","__html","arrReceiver","worker","find","chatId","obj","worklist","showReceivers","cursor","state","editD","category","img","marginRight","borderColor","background","src","copyIcon","editIcon","alt","deleteIcon","display","justifyContent","arrowDown","marginTop","MyModal","alignment","onClose","paddingTop","sm","placeholder","onChange","value","Close","position","right","top","scope","height","overflowX","fontSize","ind","prevShownTable","paddingLeft","spec"],"sourceRoot":""}