{"version":3,"file":"static/js/4645.296137a9.chunk.js","mappings":"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","sources":["pages/Renthub.js","views/widgets/WidgetsDropdown2.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { CContainer, CSpinner } from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport {\n  CAvatar,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilPeople,\n} from '@coreui/icons'\n\nimport avatar2 from 'src/assets/images/avatars/blank-avatar.png'\n\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { getAllMessages } from './../http/chatAPI.js'\n\nimport WidgetsDropdown from '../views/widgets/WidgetsDropdown2'\n\nconst Renthub = () => {\n\n  const { users: clients } = useUsersContext();\n  const { managers: zakazchiki } = useUsersContext();\n  const { projects: projs } = useUsersContext();\n  const { companys: comps } = useUsersContext();\n\n  const [contacts, setContacts]= useState([]);\n  const [projects, setProjects]= useState([]);\n  const [newClients, setNewClients]= useState([]);\n  const [oldClients, setOldClients]= useState([]);\n  const [loading, setLoading]= useState(true);\n\n  const chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID\n  const host = process.env.REACT_APP_API_URL\n  \n\n  //get Contacts\n  useEffect(() => {\n    const arrClients = []\n\n    const fetchData = async() => {\n\n      //let companys = await getCompanys()\n      console.log(\"companys (admin): \", comps)\n      console.log(\"clients (admin): \", clients)\n      console.log(\"managers (admin): \", zakazchiki)\n\n      let messages = await getAllMessages()\n      console.log(\"messages: \", messages)\n\n      clients.map((client, index) => {\n        \n        const managers = [...zakazchiki];\n        let userIndex = zakazchiki.findIndex((manager) => manager.tgID === client.chatId);  \n        const userObject = managers[userIndex];\n\n        let userObject2 = comps.find((company) => company.managers.find(man => man.id ===  userObject?.id)) //company.managers.map((manager) => manager.id === userObject?.id));  \n\n        const companyName = userObject2?.title\n        const companyCity = userObject2?.city ? userObject2?.city : ''\n\n        const lastDate = client.date.split('T')\n        const d = new Date(lastDate[0]);\n\t\t\t\tconst year = d.getFullYear();\n\t\t\t\tconst month = String(d.getMonth()+1).padStart(2, \"0\");\n\t\t\t\tconst day = String(d.getDate()).padStart(2, \"0\");\n\t\t\t\tconst newDateActivity = `${day}.${month}.${year}`\n\n        const newClientName = client.name.includes(\"|\") ? client.name.split(\" | \")[1] : client.name\n\n        const allMessages = messages.length //всего сообщений\n        const fromAdmin = messages.filter(el => el.senderId === chatAdminId);\n        const messagesUsers = messages.filter(el => el.senderId === client.chatId);\n\n        const arr = clients.filter(el => el.message === '');\n        setNewClients(arr)\n\n        const arr2 = clients.filter(el => el.message !== '');\n        setOldClients(arr2)\n        \n        const newObj = {\n          avatar: client.avatar,\n          user: {\n            name: newClientName,\n            new: true,\n            registered: '01.01.2023',\n          },\n          TG_ID: client.chatId,\n          city: companyCity,\n          company: companyName ? companyName : '',\n          phone: userObject?.phone,\n          usage: {\n            value: Math.round(messagesUsers.length * 100 / (allMessages - fromAdmin.length)), \n            period: '01.04.2023 - ' + newDateActivity,\n            color: 'success',\n          },\n          activity: newDateActivity,\n        }\n\n        arrClients.push(newObj)\n      })\n\n      const filteredClients = [...arrClients].filter((el) => el.TG_ID !== chatAdminId); //без админского пользователя  \n      const clientSort = [...filteredClients].sort((a, b) => {       \n\t\t\t\treturn b.usage.value-a.usage.value  //сортировка по убывающей активности  \n\t\t\t}) \n      console.log('userbots: ', clientSort)  \n      setContacts(clientSort)  \n      \n      setTimeout(() => {\n        setLoading(false)\n      }, \"6000\")\n    }\n    \n    fetchData();\n    \n  }, [clients]);\n//---------------------------------------------------------------------------------------------\n//get Projects\n  useEffect(() => {\n    const arrProjects = []\n\n    const fetchData = async () => {\n\t\t\t//let response = await getProjects();\n      projs.map(async (project) => {\n        const newProject = {\n\t\t\t\t\tid: project.id,\n\t\t\t\t\tname: project.title,\n\t\t\t\t\tstart: project.time_start,\n          created: project.time_created,\n          teh: project.teh,\n          manager: project.manager,\n          company: project.company,\n\t\t\t\t}\n        arrProjects.push(newProject)\n      })\n\n      setProjects(arrProjects) \n    }\n\n    fetchData();\n    \n  },[projs])\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n\n                <>\n                <WidgetsDropdown users={clients.length-1} projects={projects.length} companys={comps.length} />\n\n                <CRow>\n                  <CCol xs>\n                    <CCard className=\"mb-4\">\n                      <CCardHeader>Пользователи бота ({clients.length - 1})</CCardHeader>\n                      <CCardBody>\n                        <CRow>\n                          <CCol xs={12} md={6} xl={6}>\n                            <CRow>\n                              <CCol sm={6}>\n                                <div className=\"border-start border-start-4 border-start-info py-1 px-3\">\n                                  <div className=\"text-medium-emphasis small\">Новые клиенты</div>\n                                  <div className=\"fs-5 fw-semibold\">{newClients.length}</div>\n                                </div>\n                              </CCol>\n                              <CCol sm={6}>\n                                <div className=\"border-start border-start-4 border-start-danger py-1 px-3 mb-3\">\n                                  <div className=\"text-medium-emphasis small\">Постоянные клиенты</div>\n                                  <div className=\"fs-5 fw-semibold\">{oldClients.length-1}</div>\n                                </div>\n                              </CCol>\n                            </CRow>\n                          </CCol>\n\n                          <CCol xs={12} md={6} xl={6}>\n                            <CRow>\n                              <CCol sm={6}>\n                                <div className=\"border-start border-start-4 border-start-warning py-1 px-3 mb-3\">\n                                  <div className=\"text-medium-emphasis small\">Просмотры</div>\n                                  <div className=\"fs-5 fw-semibold\">-</div>\n                                </div>\n                              </CCol>\n                              <CCol sm={6}>\n                                <div className=\"border-start border-start-4 border-start-success py-1 px-3 mb-3\">\n                                  <div className=\"text-medium-emphasis small\">Другое</div>\n                                  <div className=\"fs-5 fw-semibold\">-</div>\n                                </div>\n                              </CCol>\n                            </CRow>\n\n                            <div className=\"mb-5\"></div>\n\n                          </CCol>\n                        </CRow>\n\n                      {loading ? \n                                  \n                        <CSpinner/> :\n\n                        <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                          <CTableHead className='table-dark'>\n                            <CTableRow>\n                              <CTableHeaderCell style={{width: '30px'}}>№</CTableHeaderCell>\n                              <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>\n                                <CIcon icon={cilPeople} />\n                              </CTableHeaderCell>\n                              <CTableHeaderCell style={{width: '160px'}}>Пользователь</CTableHeaderCell>                             \n                              <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>Организация</CTableHeaderCell>\n                              <CTableHeaderCell className=\"text-center\" style={{width: '160px'}}>Телефон</CTableHeaderCell>\n                              <CTableHeaderCell className=\"text-center\" style={{width: '80px'}}>Город</CTableHeaderCell>\n                              <CTableHeaderCell className=\"text-center\" style={{width: '100px'}}>TG ID</CTableHeaderCell>\n                              <CTableHeaderCell style={{width: '100px'}}>Использование</CTableHeaderCell>\n                              <CTableHeaderCell style={{width: '100px'}}>Активность</CTableHeaderCell>\n                              {/* <CTableHeaderCell>Управление</CTableHeaderCell> */}\n                            </CTableRow>\n                          </CTableHead>\n                          <CTableBody>\n                            {contacts.map((item, index) => (\n                              <CTableRow v-for=\"item in tableItems\" key={index}>\n                                <CTableDataCell className=\"text-center\">\n                                  {index+1}\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                    <CAvatar size=\"md\" src={item.avatar ? host + item.avatar : avatar2} alt='' />\n                                </CTableDataCell>\n                                <CTableDataCell>\n                                  <div>{item.user.name}</div>\n                                  <div className=\"small text-medium-emphasis\">\n                                    {/* <span>{item.user.new ? 'Новый' : 'Recurring'}</span> | Регистрация:{' '}\n                                    {item.user.registered} */}\n                                  </div>\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                  {item.company ? <div>{item.company}</div> : ''}\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                  <div>{item.phone}</div>\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                  <div>{item.city}</div>\n                                </CTableDataCell>\n                                <CTableDataCell className=\"text-center\">\n                                  <div>{item.TG_ID}</div>\n                                </CTableDataCell>\n                                <CTableDataCell>\n                                  <div className=\"clearfix\">\n                                    <div className=\"float-start\">\n                                      <strong>{item.usage.value}%</strong>\n                                    </div>\n                                    <div className=\"float-end\">\n                                      <small className=\"text-medium-emphasis\">{item.usage.period}</small>\n                                    </div>\n                                  </div>\n                                  <CProgress thin color={item.usage.color} value={item.usage.value} />\n                                </CTableDataCell>\n                                <CTableDataCell>\n                                  <div className=\"small text-medium-emphasis\">Последний вход</div>\n                                  <strong>{item.activity}</strong>\n                                </CTableDataCell>\n                                {/* <CTableDataCell>\n                                  <CButton color=\"light\">\n                                    <img src={pencilIcon} alt='' width='15px'/>\n                                  </CButton>\n                                  &nbsp;\n                                  <CButton color=\"light\">\n                                    <img src={deleteIcon} alt='' width='10px' />\n                                  </CButton>\n                                </CTableDataCell> */}\n                              </CTableRow>\n                            ))}\n                          </CTableBody>\n                        </CTable>\n                      }\n                      </CCardBody>\n                    </CCard>\n                  </CCol>\n                </CRow>\n              </>\n\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default Renthub\n","import React from 'react'\nimport {\n  CRow,\n  CCol,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport { getStyle } from '@coreui/utils'\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\n\nconst WidgetsDropdown2 = ({\n  users, \n  newUsers, \n  activeUsers, \n  delUsers, \n}) => {\n\n  return (\n    <CRow>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              {users.length} {/*{' '}\n               <span className=\"fs-6 fw-normal\">\n                (-12.4% <CIcon icon={cilArrowBottom} />)\n              </span> */}\n            </>\n          }\n          title={\"Всего\"}\n          action={\"\"}\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль'],\n                datasets: [\n                  {\n                    label: 'Специалисты',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-primary'),\n                    data: [\n                      (users.filter(item => new Date(item.createDate).getMonth() === 0)).length*100/users.length-5, \n                      (users.filter(item => new Date(item.createDate).getMonth() === 1)).length*100/users.length-5, \n                      (users.filter(item => new Date(item.createDate).getMonth() === 2)).length*100/users.length-5, \n                      (users.filter(item => new Date(item.createDate).getMonth() === 3)).length*100/users.length-5, \n                     0, 0, 0\n                    ],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: -5,\n                    max: 95,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"info\"\n          value={\n            <>\n              {newUsers.length} \n              {/* <span className=\"fs-6 fw-normal\">\n                (40.9% <CIcon icon={cilArrowTop} />)\n              </span> */}\n            </>\n          }\n          title={\"Новые\"}\n          action={\"\"}\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль'],\n                datasets: [\n                  {\n                    label: 'Специалисты',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-info'),\n                    data: [\n                      (newUsers.filter(item => new Date(item.createDate).getMonth() === 0)).length*100/newUsers.length-5, \n                      (newUsers.filter(item => new Date(item.createDate).getMonth() === 1)).length*100/newUsers.length-5, \n                      (newUsers.filter(item => new Date(item.createDate).getMonth() === 2)).length*100/newUsers.length-5, \n                      (newUsers.filter(item => new Date(item.createDate).getMonth() === 3)).length*100/newUsers.length-5, \n                      0, 0, 0\n                    ],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: -5,\n                    max: 95,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"warning\"\n          value={\n            <>\n              {activeUsers.length} {/*{' '}\n               <span className=\"fs-6 fw-normal\">\n                (-12.4% <CIcon icon={cilArrowBottom} />)\n              </span> */}\n            </>\n          }\n          title={\"Активные\"}\n          action={\"\"}\n          chart={\n            <CChartLine\n              className=\"mt-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль'],\n                datasets: [\n                  {\n                    label: 'Специалисты',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [activeUsers, 0, 0, 0, 0, 0, 0],\n                    fill: true,\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    display: false,\n                  },\n                  y: {\n                    display: false,\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 2,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 0,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"danger\"\n          value={\n            <>\n              {delUsers.length}\n            </>\n          }\n          title={\"Удаленные\"}\n          action={\"\"}\n          chart={\n            <CChartBar\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: [\n                  'Январь', \n                  'Февраль', \n                  'Март', \n                  'Апрель', \n                  'Май', \n                  'Июнь', \n                  'Июль',\n                  'Август',\n                  'Сентябрь',\n                  'Октябрь',\n                  'Ноябрь',\n                  'Декабрь',\n                ],\n                datasets: [\n                  {\n                    label: 'Специалисты',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [delUsers, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    barPercentage: 0.6,\n                  },\n                ],\n              }}\n              options={{\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown2\n"],"names":["clients","useUsersContext","users","zakazchiki","managers","projs","projects","comps","companys","useState","contacts","setContacts","setProjects","newClients","setNewClients","oldClients","setOldClients","loading","setLoading","chatAdminId","process","useEffect","arrClients","fetchData","console","log","getAllMessages","messages","map","client","index","userObject","findIndex","manager","tgID","chatId","userObject2","find","company","man","id","companyName","title","companyCity","city","lastDate","date","split","d","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","newDateActivity","newClientName","name","includes","allMessages","length","fromAdmin","filter","el","senderId","messagesUsers","arr","message","arr2","newObj","avatar","user","new","registered","TG_ID","phone","usage","value","Math","round","period","color","activity","push","filteredClients","clientSort","sort","a","b","setTimeout","arrProjects","project","newProject","start","time_start","created","time_created","teh","className","lg","Suspense","fallback","xs","md","xl","sm","align","hover","responsive","style","width","icon","cilPeople","item","size","src","avatar2","alt","thin","newUsers","activeUsers","delUsers","action","chart","height","data","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","getStyle","createDate","options","plugins","legend","display","maintainAspectRatio","scales","x","grid","drawBorder","ticks","y","min","max","elements","line","borderWidth","tension","point","radius","hitRadius","hoverRadius","fill","barPercentage","drawTicks"],"sourceRoot":""}