{"version":3,"file":"static/js/758.fe7e82da.chunk.js","mappings":"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","sources":["pages/DistributionAdd.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react'\nimport { CContainer, CSpinner } from '@coreui/react'\nimport { AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport { \n  CRow,\n  CCol,\n  CCard,\n  CCardBody,\n  CForm,\n  CFormLabel,\n  CFormInput,\n  CFormTextarea,\n  CButton,\n  CAlert,\n  CFormCheck,\n} from '@coreui/react'\n\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { useUsersContext } from \"./../chat-app-new/context/usersContext\";\nimport { $host } from './../http/index'\nimport { useNavigate } from 'react-router-dom';\nimport { newDistribution, getDistributions, editDistribution } from './../http/adminAPI';\nimport { newMessage, uploadFile } from './../http/chatAPI';\nimport sendSound from './../chat-app-new/assets/sounds/distribution_sound.mp3';\n\n\nconst DistributionAdd = () => {\n\n  const token = process.env.REACT_APP_TELEGRAM_API_TOKEN\n\tconst host = process.env.REACT_APP_HOST\n  const hostPort = process.env.REACT_APP_API_URL\n  const chatAdminId = process.env.REACT_APP_CHAT_ADMIN_ID\n\n  const { users: clients } = useUsersContext();\n  const { addNewMessage, setDistributions } = useUsersContext();\n  const [contacts, setContacts]= useState([]);\n\n  const [selected, setSelected] = useState([]);\n  const [text, setText] = useState('');\n  const [countChar, setCountChar] = useState(0);\n  const [visible, setVisible] = useState(false);\n  const [showEditButtonAdd, setShowEditButtonAdd] = useState(false);\n  const [sendToAdmin, setSendToAdmin] = useState(false);\n  const [textButton, setTextButton] = useState('');\n  const [file, setFile] = useState();\n  const [value, setValue] = useState(\"\");\n  const [image, setImage]= useState(\"\");\n\n  const audio = new Audio(sendSound);\n\n  const navigate = useNavigate();\n\n  const backPage = () => {\n       navigate('/distribution');\n  } \n\n  useEffect(() => {\n    const arrClients = []\n    \n    clients.map((client) => {\n      const newObj = {\n        label: client.name, \n        value: client.chatId,\n      }\n      arrClients.push(newObj)\n    })\n    setContacts(arrClients)      \n  }, [clients]);\n\n  const onChangeText = (e) => {\n    setText(e.target.value)\n    setCountChar(e.target.value.length)\n  }\n\n  useEffect(() => {\n    const getImage = async () => {\n        if (file) {\n          console.log(\"file:\", file)\n          const data = new FormData();\n          data.append(\"name\", file.name);\n          data.append(\"photo\", file);\n          \n          let response = await uploadFile(data);\n          console.log(\"response: \", response.data.path)\n\n          setImage(response.data.path.split('.team')[1]);\n          //сообщение с ссылкой на файл\n          //console.log(host + response.data.path)\n          //setValue(host + response.data.path)\n        }\n    }\n    getImage();\n  }, [file])\n\n  {/* Добавление файла */}\n  const onFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setValue(e.target.value)\n  }\n\n  {/* Показать Добавление текста кнопки */}\n  const clickShowEditButton = (e) => {\n    e.preventDefault();\n    showEditButtonAdd ? setShowEditButtonAdd (false) : setShowEditButtonAdd (true)\n  }\n\n  const onChangeTextButton = (e) => {\n    setTextButton(e.target.value)\n  }\n\n  const onChangeCheck = (e) => {\n    setSendToAdmin(e.target.value)\n  }\n\n  {/* Отправка рассылки */}\n  const onSendText = async() => {\n    //console.log(selected)\n    \n    let arrUsers = []\n    let countSuccess = 0\n\n    audio.play();\n\n    //новая рассылка\n    const message = {\n      name: 'Рассылка', \n      text: text, \n      image: host + image, \n      button: textButton, \n      receivers: JSON.stringify(selected), \n      datestart: Date.now(), \n      delivered: 'true',        \n    }\n    console.log(\"message send button: \", message);\n\n    //сохранение рассылки в базе данных\n    const distrNew = await newDistribution(message)\n    \n    selected.map(async (user, index) => {\n      setTimeout(async()=> { \n        console.log(\"Пользователю ID: \" + user.value + \" сообщение \" + text + \" отправлено! Кнопка \" + textButton + \" отправлена!\")\n\n        //по-умолчанию пока сообщение не отправлено\n        arrUsers.push({\n          label: user.label,\n          value: user.value,\n          status: 500,\n          mess: null,\n        }) \n\n        let client = clients.filter((client) => client.chatId === user.value.toString())[0];\n        \n        //Передаем данные боту\n        const keyboard = JSON.stringify({\n          inline_keyboard: [\n              [\n                  {\"text\": textButton, callback_data:'/report'},\n              ],\n          ]\n        });\n\n        //отправить в телеграмм\n        let sendToTelegram\n        if (text !== '') {\n          console.log(arrUsers, distrNew)\n          const url_send_msg = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${user.value}&parse_mode=html&text=${text.replace(/\\n/g, '%0A')}`\n          console.log(\"url_send_msg: \", url_send_msg)\n          sendToTelegram = await $host.get(url_send_msg);\n          console.log('sendToTelegram: ', sendToTelegram)\n\n          const { status } = sendToTelegram;              \n          if (status === 200) {\n            console.log(\"статус 200 текст\", arrUsers, distrNew.id)\n            //countSuccess = countSuccess + 1 \n            \n            //обновить статус доставки\n            arrUsers[index-1].status = 200  \n            arrUsers[index-1].mess = sendToTelegram.data?.result?.message_id \n            \n            console.log(\"res: \", {receivers: JSON.stringify(arrUsers)}, distrNew.id)\n\n            //обновить бд рассылку\n            await editDistribution({receivers: JSON.stringify(arrUsers)}, distrNew.id)\n          } \n                              \n        }  \n\n        const url_send_photo = `https://api.telegram.org/bot${token}/sendPhoto?chat_id=${user.value}&reply_markup=${keyboard}`\n        console.log(\"url_send_photo: \", url_send_photo)\n        \n        let sendPhotoToTelegram\n        if (file) {\n          const form = new FormData();\n          form.append(\"photo\", file);\n\n          sendPhotoToTelegram = await $host.post(url_send_photo, form);\n          console.log('sendPhotoToTelegram: ', sendPhotoToTelegram)\n\n          const { status } = sendPhotoToTelegram;\n\n          if (status === 200 && text === '') {\n            console.log(\"статус 200 фото\")\n            //countSuccess = countSuccess + 1  \n                    \n            //обновить статус доставки\n            arrUsers[index-1].status = 200\n            arrUsers[index-1].mess = sendPhotoToTelegram.data?.result?.message_id   \n\n            //обновить бд рассылку\n            await editDistribution({receivers: JSON.stringify(arrUsers)}, distrNew.id)\n          }\n        } \n\n        //отправить в админку\n        if (sendToAdmin) {\n          let message = {};\n          if(!file) {\n              message = {\n                  senderId: chatAdminId, \n                  receiverId: user.value,\n                  conversationId: client.conversationId,\n                  type: \"text\",\n                  text: text,\n                  is_bot: true,\n                  messageId: sendToTelegram.data.result.message_id,\n                  buttons: '',\n              }\n          } else {\n              message = {\n                  senderId: chatAdminId, \n                  receiverId: user.value,\n                  conversationId: client.conversationId,\n                  type: \"image\",\n                  text: host + image,\n                  is_bot: true,\n                  messageId: sendPhotoToTelegram.data.result.message_id,\n                  buttons: textButton,\n              }\n          }\n          console.log(\"message send: \", message);\n\n          //сохранение сообщения в базе данных\n          await newMessage(message)\n\n          //сохранить в контексте\n          if(!file) {\n            addNewMessage(user.value, text, 'text', '', client.conversationId, sendToTelegram.data.result.message_id);\n          } else {\n            addNewMessage(user.value, host + image, 'image', textButton, client.conversationId, sendPhotoToTelegram.data.result.message_id);\n          }\n    \n        }  \n\n      }, 3000 * ++index) \n    })\n\n    //обновить список рассылок\n    let response = await getDistributions();\n    console.log(\"distribution new add: \", response.length)\n    setDistributions(response)\n\n    setSelected([])\n    setSendToAdmin(false)\n    setText('')\n    setShowEditButtonAdd(false)\n    setTextButton('')\n    setVisible(true)\n    setValue('')\n\n    navigate('/distribution');\n  }\n\n  return (\n    <div className='dark-theme'>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-uley\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n\n            <CContainer lg>\n                <Suspense fallback={<CSpinner color=\"primary\" />}>\n                  <>\n                    <h2>Новая рассылка</h2>\n\n                    <CRow>\n                        <CCol xs>\n                          <CCard className=\"mb-4\">\n                            {/* <CCardHeader>Рассылки</CCardHeader> */}\n                            <CCardBody>\n                            <CAlert color=\"success\" dismissible visible={visible} onClose={() => setVisible(false)}>\n                              Сообщение успешно отправлено!\n                            </CAlert>\n                              <CForm>\n                                <div className=\"mb-3\" style={{color: '#f3f3f3'}}>\n                                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Выберите получателей:</CFormLabel>\n                                  <MultiSelect\n                                    options={contacts}\n                                    value={selected}\n                                    onChange={setSelected}\n                                    style={{color: '#1e1919'}}\n                                    overrideStrings={{\n                                      \"allItemsAreSelected\": \"Все поля выбраны\",\n                                      \"clearSearch\": \"Очистить поиск\",\n                                      \"clearSelected\": \"Очистить выбор\",\n                                      \"noOptions\": \"Ничего не найдено\",\n                                      \"search\": \"Поиск\",\n                                      \"selectAll\": \"Выбрать всё\",\n                                      \"selectAllFiltered\": \"Выбрать всё (Найденных)\",\n                                      \"selectSomeItems\": \"Выбрать...\",\n                                      \"create\": \"Создать\",\n                                    }}   \n                                  />\n                                  <p style={{color: '#767676'}}>Получателей: <span>{selected.length}</span></p>\n                                </div>\n\n                                <div className='mb-3' style={{color: '#f3f3f3'}}>\n                                  <CFormCheck \n                                    id=\"flexCheckDefault\" \n                                    label=\"Дублировать в админку\"\n                                    onChange={onChangeCheck}\n                                    defaultChecked={sendToAdmin}\n                                  />\n                                </div>\n\n                                <div className=\"mb-3\">\n                                  {/* <CFormLabel htmlFor=\"exampleFormControlTextarea1\">Текст сообщения</CFormLabel> */}\n                                  <CFormTextarea \n                                    id=\"exampleFormControlTextarea1\" \n                                    rows={3} \n                                    placeholder='Введите текст сообщения'\n                                    onChange={onChangeText}\n                                    value={text}\n                                    // helperText = {`${countChar}/500`}\n                                  >           \n                                  </CFormTextarea>\n                                </div>\n                              \n\n                                {/* Добавление картинки */}\n                                <div className=\"mb-6\" style={{color: '#8f8888'}}>\n                                  <CFormInput \n                                    type=\"file\" \n                                    id=\"formFile\" \n                                    label=\"Добавить картинку\" \n                                    name=\"photo\"\n                                    onChange={(e) => onFileChange(e)}\n                                    value={value}\n                                  />\n                                </div>\n\n                                <div className=\"mb-3\"></div>\n\n                                <div className=\"mb-3 text-center\">\n                                  <p style={{color: '#fff', cursor: 'pointer'}} onClick={clickShowEditButton} > {showEditButtonAdd ? '- Убрать кнопку' : '+ Добавить кнопку'}</p>\n                                </div>\n\n                                {/* Добавление кнопки */}\n                                <CForm className=\"row g-3\" style={{color: '#8f8888', display: showEditButtonAdd ? \"block\" : \"none\" }}>\n                                  <CCol md={6}>\n                                    <CFormInput \n                                      type=\"text\" \n                                      id=\"inputTextButton\" \n                                      label=\"Название кнопки\" \n                                      placeholder=\"Введите текст\"\n                                      onChange={onChangeTextButton}\n                                      value={textButton}\n                                    />\n                                  </CCol>\n                                </CForm>\n                                <br/>\n                                <div className=\"mb-3\" style={{textAlign: 'right'}}>\n                                  <CButton color=\"secondary\" style={{marginRight: '15px'}} onClick={backPage}>Отмена</CButton>\n                                  <CButton color=\"primary\" onClick={onSendText}>Отправить рассылку</CButton>\n                                </div>\n                              </CForm>\n\n                            </CCardBody>\n                          </CCard>\n                        </CCol>\n                      </CRow>\n                  </>\n                </Suspense>\n            </CContainer>\n\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DistributionAdd\n"],"names":["token","process","host","chatAdminId","clients","useUsersContext","users","addNewMessage","setDistributions","useState","contacts","setContacts","selected","setSelected","text","setText","setCountChar","visible","setVisible","showEditButtonAdd","setShowEditButtonAdd","sendToAdmin","setSendToAdmin","textButton","setTextButton","file","setFile","value","setValue","image","setImage","audio","Audio","sendSound","navigate","useNavigate","useEffect","arrClients","map","client","newObj","label","name","chatId","push","getImage","console","log","data","FormData","append","uploadFile","response","path","split","onSendText","arrUsers","play","message","button","receivers","JSON","stringify","datestart","Date","now","delivered","newDistribution","distrNew","user","index","setTimeout","status","mess","filter","toString","keyboard","inline_keyboard","callback_data","url_send_msg","replace","$host","sendToTelegram","id","result","message_id","editDistribution","url_send_photo","form","sendPhotoToTelegram","senderId","receiverId","conversationId","type","is_bot","messageId","buttons","newMessage","getDistributions","length","className","lg","Suspense","fallback","color","xs","dismissible","onClose","style","htmlFor","options","onChange","overrideStrings","e","target","defaultChecked","rows","placeholder","files","onFileChange","cursor","onClick","preventDefault","display","md","textAlign","marginRight"],"sourceRoot":""}